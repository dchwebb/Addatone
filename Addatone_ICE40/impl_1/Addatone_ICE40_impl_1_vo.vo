
// Verilog netlist produced by program backanno, Version Radiant Software (64-bit) 2.0.1.281.2

// backanno -o Addatone_ICE40_impl_1_vo.vo -sp High-Performance_1.2V -w -neg -gui -msgset D:/Eurorack/Addatone/Addatone_ICE40/promote.xml Addatone_ICE40_impl_1.udb 
// Netlist created on Mon Mar 23 14:51:29 2020
// Netlist written on Mon Mar 23 14:51:33 2020
// Design is for device iCE40UP5K
// Design is for package SG48
// Design is for performance grade High-Performance_1.2V

`timescale 1 ns / 1 ps

module top ( reset_n, i_ADC_CS, o_DAC_SCK, o_DAC_MOSI, test, led, i_ADC_Clock, 
             i_ADC_Data, i_Clock, o_DAC_CS );
  input  reset_n, i_ADC_CS, i_ADC_Clock, i_ADC_Data, i_Clock;
  output o_DAC_SCK, o_DAC_MOSI, test, led, o_DAC_CS;
  wire   n44, n45, n2435, \counter[6] , n1692, \counter[5] , reset_n_N_91, 
         Clock_48MHz, n1694, n51, n52, n2456, \outcount[10] , n1706, 
         \outcount[9] , n872, n53, n54, n2453, \outcount[8] , n1704, 
         \outcount[7] , n55, n56, n2450, \outcount[6] , n1702, \outcount[5] , 
         n48, n49, n2429, \counter[2] , n1688, \counter[1] , n1690, n61, n2441, 
         VCC_net, \outcount[0] , n1698, n57, n58, n2447, \outcount[4] , n1700, 
         \outcount[3] , n42, n43, n2438, \counter[8] , \counter[7] , n46, n47, 
         n2432, \counter[4] , \counter[3] , n50, n2426, \counter[0] , n59, n60, 
         n2444, \outcount[2] , \outcount[1] , n1356, n1357, \DAC_Data[7] , 
         DAC_Send_N_93, \o_Sample_Value[7] , reset_n_c, \DAC_Data[6] , 
         \o_Sample_Value[6] , test_N_90, test_c, ADC_Data_Received, 
         \DAC_Data[12].sig_001.FeedThruLUT , 
         \DAC_Data[13].sig_000.FeedThruLUT , \DAC_Data[12] , \DAC_Data[13] , 
         \dac.n870 , \dac.r_Data_To_Send[10] , \dac.r_Data_To_Send[11] , 
         \DAC_Data[10].sig_003.FeedThruLUT , 
         \DAC_Data[11].sig_002.FeedThruLUT , \DAC_Data[10] , \DAC_Data[11] , 
         \dac.r_Data_To_Send[12] , \dac.r_Data_To_Send[13] , 
         \DAC_Data[8].sig_005.FeedThruLUT , \DAC_Data[9].sig_004.FeedThruLUT , 
         \DAC_Data[8] , \DAC_Data[9] , \dac.r_Data_To_Send[14] , 
         \dac.r_Data_To_Send[15] , \DAC_Data[6].sig_007.FeedThruLUT , 
         \DAC_Data[7].sig_006.FeedThruLUT , \dac.r_Data_To_Send[16] , 
         \dac.r_Data_To_Send[17] , \DAC_Data[4].sig_009.FeedThruLUT , 
         \DAC_Data[5].sig_008.FeedThruLUT , \DAC_Data[4] , \DAC_Data[5] , 
         \dac.r_Data_To_Send[18] , \dac.r_Data_To_Send[19] , 
         \DAC_Data[2].sig_011.FeedThruLUT , \DAC_Data[3].sig_010.FeedThruLUT , 
         \DAC_Data[2] , \DAC_Data[3] , \dac.r_Data_To_Send[20] , 
         \dac.r_Data_To_Send[21] , \DAC_Data[0].sig_013.FeedThruLUT , 
         \DAC_Data[1].sig_012.FeedThruLUT , \DAC_Data[0] , \DAC_Data[1] , 
         \dac.r_Data_To_Send[22] , \dac.r_Data_To_Send[23] , \dac.n25[0] , 
         \dac.n25[1] , \dac.Current_Bit[0] , \dac.Current_Bit[1] , \dac.n1276 , 
         \dac.n1327 , \dac.n25[3] , \dac.n25[2] , \dac.Current_Bit[2] , 
         \dac.Current_Bit[3] , \DAC_Data[14].sig_016.FeedThruLUT , 
         \DAC_Data[15].sig_014.FeedThruLUT , \DAC_Data[14] , \DAC_Data[15] , 
         \dac.r_Data_To_Send[8] , \dac.r_Data_To_Send[9] , \dac.n1995 , 
         \dac.n1907 , n675, \SM_DAC_Out[2] , \dac.n827 , \dac.n1902 , DAC_Send, 
         \SM_DAC_Out[0] , n1385, \SM_DAC_Out[1] , 
         \SM_DAC_Out[2].sig_015.FeedThruLUT , \dac.n12 , o_DAC_CS_c, n1354, 
         n1355, \o_Sample_Value[9] , \o_Sample_Value[8] , n1352, n1353, 
         \o_Sample_Value[11] , \o_Sample_Value[10] , n1350, n1351, 
         \o_Sample_Value[13] , \o_Sample_Value[12] , n1348, n1349, 
         \o_Sample_Value[15] , \o_Sample_Value[14] , n1336, n1347, 
         \o_Sample_Value[2] , \o_Sample_Value[3] , n1344, n1345, 
         \o_Sample_Value[5] , \o_Sample_Value[4] , n1339, n1340, 
         \o_Sample_Value[1] , \o_Sample_Value[0] , \adc.n377[3] , 
         \adc.n377[2] , \adc.Receive_Byte[3] , \adc.Receive_Byte[0] , 
         \adc.Receive_Byte[1] , \adc.Receive_Byte[2] , \adc.n1260 , 
         \adc.n1331 , \adc.Clock_Stable , \adc.n17[1] , \adc.n17[0] , 
         \adc.Count_Stable[1] , \adc.Count_Stable[0] , \adc.n1333 , 
         \adc.n377[1] , \adc.n377[0] , \adc.n17[2] , \adc.Count_Stable[2] , 
         \adc.n402[0] , \adc.Receive_Bit[0] , \adc.n883 , \adc.n1485 , 
         \adc.n370[1] , \adc.n370[2] , \adc.Receive_Bit[1] , 
         \adc.Receive_Bit[2] , \adc.n1316 , \adc.n370[3] , 
         \adc.Receive_Bit[3] , \dac.n14 , \dac.n2295 , \dac.n2123 , 
         \dac.n2121 , \dac.n2220 , \dac.n2122 , \dac.n2208 , \dac.n22 , 
         \dac.Current_Bit[4] , \dac.o_SPI_Data_N_394 , \SM_DAC_Out[3] , 
         \dac.n7 , Clock_Counter, \dac.n6_adj_420 , \dac.n2286 , \dac.n2289 , 
         \dac.n2292 , n865, n8, n1900, \dac.n2058 , \dac.n2298 , \dac.n2301 , 
         n24, n2108, n12, n1834, \dac.n1477 , \dac.n6 , \dac.n2003 , \dac.n21 , 
         \dac.n2100 , o_DAC_SCK_c, \dac.n8_c , \dac.n2042 , \dac.n2110 , 
         \dac.n855 , \dac.n2048 , \dac.n1886 , \dac.n1989 , \dac.n1980 , 
         o_DAC_MOSI_c, n16, n17_2, DAC_Ready, CS_Stable, \adc.n7 , 
         \adc.o_Data_Received_N_282 , SM_ADC_In, \adc.Data_State , 
         \adc.CS_State_N_291 , i_ADC_Data_c, \adc.Clock_State_N_288 , 
         \adc.CS_State , \adc.i_ADC_CS_c , \adc.n1322 , \adc.n1155 , 
         \adc.n2035 , \adc.n1925 , \dac.o_Ready_N_396 , \dac.n18 , n1343, 
         n1467, \adc.n2 , \i_ADC_Clock_c.sig_019.FeedThruLUT , i_ADC_Clock_c, 
         \adc.Clock_State , \i_ADC_Data_c.sig_018.FeedThruLUT , \adc.n1073 , 
         n1346, \n457$n0 , \dac.n1648 , \dac.n25[4] , GND_net, 
         \i_ADC_Clock_c.sig_021.FeedThruLUT , \adc.n1067 , 
         \adc.i_ADC_CS_c.sig_017.FeedThruLUT , \adc.n1065 , 
         \adc.i_ADC_CS_c.sig_020.FeedThruLUT , i_Clock_c, 
         \pll_48.lscc_pll_inst.feedback_w ;

  SLICE_0 SLICE_0( .DI1(n44), .DI0(n45), .D1(n2435), .C1(\counter[6] ), 
    .D0(n1692), .C0(\counter[5] ), .LSR(reset_n_N_91), .CLK(Clock_48MHz), 
    .CIN0(n1692), .CIN1(n2435), .Q0(\counter[5] ), .Q1(\counter[6] ), .F0(n45), 
    .F1(n44), .COUT1(n1694), .COUT0(n2435));
  SLICE_1 SLICE_1( .DI1(n51), .DI0(n52), .D1(n2456), .B1(\outcount[10] ), 
    .D0(n1706), .B0(\outcount[9] ), .CE(n872), .LSR(reset_n_N_91), 
    .CLK(Clock_48MHz), .CIN0(n1706), .CIN1(n2456), .Q0(\outcount[9] ), 
    .Q1(\outcount[10] ), .F0(n52), .F1(n51), .COUT0(n2456));
  SLICE_2 SLICE_2( .DI1(n53), .DI0(n54), .D1(n2453), .B1(\outcount[8] ), 
    .D0(n1704), .B0(\outcount[7] ), .CE(n872), .LSR(reset_n_N_91), 
    .CLK(Clock_48MHz), .CIN0(n1704), .CIN1(n2453), .Q0(\outcount[7] ), 
    .Q1(\outcount[8] ), .F0(n54), .F1(n53), .COUT1(n1706), .COUT0(n2453));
  SLICE_3 SLICE_3( .DI1(n55), .DI0(n56), .D1(n2450), .B1(\outcount[6] ), 
    .D0(n1702), .B0(\outcount[5] ), .CE(n872), .LSR(reset_n_N_91), 
    .CLK(Clock_48MHz), .CIN0(n1702), .CIN1(n2450), .Q0(\outcount[5] ), 
    .Q1(\outcount[6] ), .F0(n56), .F1(n55), .COUT1(n1704), .COUT0(n2450));
  SLICE_4 SLICE_4( .DI1(n48), .DI0(n49), .D1(n2429), .C1(\counter[2] ), 
    .D0(n1688), .C0(\counter[1] ), .LSR(reset_n_N_91), .CLK(Clock_48MHz), 
    .CIN0(n1688), .CIN1(n2429), .Q0(\counter[1] ), .Q1(\counter[2] ), .F0(n49), 
    .F1(n48), .COUT1(n1690), .COUT0(n2429));
  SLICE_5 SLICE_5( .DI1(n61), .D1(n2441), .C1(VCC_net), .B1(\outcount[0] ), 
    .CE(n872), .LSR(reset_n_N_91), .CLK(Clock_48MHz), .CIN1(n2441), 
    .Q1(\outcount[0] ), .F1(n61), .COUT1(n1698), .COUT0(n2441));
  SLICE_6 SLICE_6( .DI1(n57), .DI0(n58), .D1(n2447), .B1(\outcount[4] ), 
    .D0(n1700), .B0(\outcount[3] ), .CE(n872), .LSR(reset_n_N_91), 
    .CLK(Clock_48MHz), .CIN0(n1700), .CIN1(n2447), .Q0(\outcount[3] ), 
    .Q1(\outcount[4] ), .F0(n58), .F1(n57), .COUT1(n1702), .COUT0(n2447));
  SLICE_7 SLICE_7( .DI1(n42), .DI0(n43), .D1(n2438), .C1(\counter[8] ), 
    .D0(n1694), .C0(\counter[7] ), .LSR(reset_n_N_91), .CLK(Clock_48MHz), 
    .CIN0(n1694), .CIN1(n2438), .Q0(\counter[7] ), .Q1(\counter[8] ), .F0(n43), 
    .F1(n42), .COUT0(n2438));
  SLICE_8 SLICE_8( .DI1(n46), .DI0(n47), .D1(n2432), .C1(\counter[4] ), 
    .D0(n1690), .C0(\counter[3] ), .LSR(reset_n_N_91), .CLK(Clock_48MHz), 
    .CIN0(n1690), .CIN1(n2432), .Q0(\counter[3] ), .Q1(\counter[4] ), .F0(n47), 
    .F1(n46), .COUT1(n1692), .COUT0(n2432));
  SLICE_9 SLICE_9( .DI1(n50), .D1(n2426), .C1(\counter[0] ), .B1(VCC_net), 
    .LSR(reset_n_N_91), .CLK(Clock_48MHz), .CIN1(n2426), .Q1(\counter[0] ), 
    .F1(n50), .COUT1(n1688), .COUT0(n2426));
  SLICE_10 SLICE_10( .DI1(n59), .DI0(n60), .D1(n2444), .B1(\outcount[2] ), 
    .D0(n1698), .B0(\outcount[1] ), .CE(n872), .LSR(reset_n_N_91), 
    .CLK(Clock_48MHz), .CIN0(n1698), .CIN1(n2444), .Q0(\outcount[1] ), 
    .Q1(\outcount[2] ), .F0(n60), .F1(n59), .COUT1(n1700), .COUT0(n2444));
  SLICE_11 SLICE_11( .DI1(n1356), .DI0(n1357), .D1(\DAC_Data[7] ), 
    .C1(DAC_Send_N_93), .B1(\o_Sample_Value[7] ), .A1(reset_n_c), 
    .D0(DAC_Send_N_93), .C0(\DAC_Data[6] ), .B0(reset_n_c), 
    .A0(\o_Sample_Value[6] ), .CLK(Clock_48MHz), .Q0(\DAC_Data[6] ), 
    .Q1(\DAC_Data[7] ), .F0(n1357), .F1(n1356));
  SLICE_12 SLICE_12( .DI0(test_N_90), .A0(test_c), .CLK(ADC_Data_Received), 
    .Q0(test_c), .F0(test_N_90));
  SLICE_13 SLICE_13( .DI1(\DAC_Data[12].sig_001.FeedThruLUT ), 
    .DI0(\DAC_Data[13].sig_000.FeedThruLUT ), .A1(\DAC_Data[12] ), 
    .A0(\DAC_Data[13] ), .CE(\dac.n870 ), .CLK(Clock_48MHz), 
    .Q0(\dac.r_Data_To_Send[10] ), .Q1(\dac.r_Data_To_Send[11] ), 
    .F0(\DAC_Data[13].sig_000.FeedThruLUT ), 
    .F1(\DAC_Data[12].sig_001.FeedThruLUT ));
  SLICE_15 SLICE_15( .DI1(\DAC_Data[10].sig_003.FeedThruLUT ), 
    .DI0(\DAC_Data[11].sig_002.FeedThruLUT ), .A1(\DAC_Data[10] ), 
    .A0(\DAC_Data[11] ), .CE(\dac.n870 ), .CLK(Clock_48MHz), 
    .Q0(\dac.r_Data_To_Send[12] ), .Q1(\dac.r_Data_To_Send[13] ), 
    .F0(\DAC_Data[11].sig_002.FeedThruLUT ), 
    .F1(\DAC_Data[10].sig_003.FeedThruLUT ));
  SLICE_17 SLICE_17( .DI1(\DAC_Data[8].sig_005.FeedThruLUT ), 
    .DI0(\DAC_Data[9].sig_004.FeedThruLUT ), .B1(\DAC_Data[8] ), 
    .A0(\DAC_Data[9] ), .CE(\dac.n870 ), .CLK(Clock_48MHz), 
    .Q0(\dac.r_Data_To_Send[14] ), .Q1(\dac.r_Data_To_Send[15] ), 
    .F0(\DAC_Data[9].sig_004.FeedThruLUT ), 
    .F1(\DAC_Data[8].sig_005.FeedThruLUT ));
  SLICE_19 SLICE_19( .DI1(\DAC_Data[6].sig_007.FeedThruLUT ), 
    .DI0(\DAC_Data[7].sig_006.FeedThruLUT ), .C1(\DAC_Data[6] ), 
    .D0(\DAC_Data[7] ), .CE(\dac.n870 ), .CLK(Clock_48MHz), 
    .Q0(\dac.r_Data_To_Send[16] ), .Q1(\dac.r_Data_To_Send[17] ), 
    .F0(\DAC_Data[7].sig_006.FeedThruLUT ), 
    .F1(\DAC_Data[6].sig_007.FeedThruLUT ));
  SLICE_21 SLICE_21( .DI1(\DAC_Data[4].sig_009.FeedThruLUT ), 
    .DI0(\DAC_Data[5].sig_008.FeedThruLUT ), .D1(\DAC_Data[4] ), 
    .A0(\DAC_Data[5] ), .CE(\dac.n870 ), .CLK(Clock_48MHz), 
    .Q0(\dac.r_Data_To_Send[18] ), .Q1(\dac.r_Data_To_Send[19] ), 
    .F0(\DAC_Data[5].sig_008.FeedThruLUT ), 
    .F1(\DAC_Data[4].sig_009.FeedThruLUT ));
  SLICE_23 SLICE_23( .DI1(\DAC_Data[2].sig_011.FeedThruLUT ), 
    .DI0(\DAC_Data[3].sig_010.FeedThruLUT ), .A1(\DAC_Data[2] ), 
    .C0(\DAC_Data[3] ), .CE(\dac.n870 ), .CLK(Clock_48MHz), 
    .Q0(\dac.r_Data_To_Send[20] ), .Q1(\dac.r_Data_To_Send[21] ), 
    .F0(\DAC_Data[3].sig_010.FeedThruLUT ), 
    .F1(\DAC_Data[2].sig_011.FeedThruLUT ));
  SLICE_25 SLICE_25( .DI1(\DAC_Data[0].sig_013.FeedThruLUT ), 
    .DI0(\DAC_Data[1].sig_012.FeedThruLUT ), .A1(\DAC_Data[0] ), 
    .C0(\DAC_Data[1] ), .CE(\dac.n870 ), .CLK(Clock_48MHz), 
    .Q0(\dac.r_Data_To_Send[22] ), .Q1(\dac.r_Data_To_Send[23] ), 
    .F0(\DAC_Data[1].sig_012.FeedThruLUT ), 
    .F1(\DAC_Data[0].sig_013.FeedThruLUT ));
  dac_SLICE_27 \dac.SLICE_27 ( .DI1(\dac.n25[0] ), .DI0(\dac.n25[1] ), 
    .C1(\dac.Current_Bit[0] ), .D0(\dac.Current_Bit[0] ), 
    .A0(\dac.Current_Bit[1] ), .CE(\dac.n1276 ), .LSR(\dac.n1327 ), 
    .CLK(Clock_48MHz), .Q0(\dac.Current_Bit[1] ), .Q1(\dac.Current_Bit[0] ), 
    .F0(\dac.n25[1] ), .F1(\dac.n25[0] ));
  dac_SLICE_31 \dac.SLICE_31 ( .DI1(\dac.n25[3] ), .DI0(\dac.n25[2] ), 
    .D1(\dac.Current_Bit[2] ), .C1(\dac.Current_Bit[0] ), 
    .B1(\dac.Current_Bit[1] ), .A1(\dac.Current_Bit[3] ), 
    .C0(\dac.Current_Bit[2] ), .B0(\dac.Current_Bit[0] ), 
    .A0(\dac.Current_Bit[1] ), .CE(\dac.n1276 ), .LSR(\dac.n1327 ), 
    .CLK(Clock_48MHz), .Q0(\dac.Current_Bit[2] ), .Q1(\dac.Current_Bit[3] ), 
    .F0(\dac.n25[2] ), .F1(\dac.n25[3] ));
  SLICE_34 SLICE_34( .DI1(\DAC_Data[14].sig_016.FeedThruLUT ), 
    .DI0(\DAC_Data[15].sig_014.FeedThruLUT ), .D1(\DAC_Data[14] ), 
    .D0(\DAC_Data[15] ), .CE(\dac.n870 ), .CLK(Clock_48MHz), 
    .Q0(\dac.r_Data_To_Send[8] ), .Q1(\dac.r_Data_To_Send[9] ), 
    .F0(\DAC_Data[15].sig_014.FeedThruLUT ), 
    .F1(\DAC_Data[14].sig_016.FeedThruLUT ));
  dac_SLICE_35 \dac.SLICE_35 ( .DI1(\dac.n1995 ), .DI0(\dac.n1907 ), .D1(n675), 
    .C1(\SM_DAC_Out[2] ), .B1(\dac.n827 ), .A1(\dac.n1902 ), .D0(DAC_Send), 
    .C0(n675), .B0(\SM_DAC_Out[2] ), .A0(\SM_DAC_Out[0] ), .CE(n1385), 
    .LSR(reset_n_N_91), .CLK(Clock_48MHz), .Q0(\SM_DAC_Out[1] ), 
    .Q1(\SM_DAC_Out[2] ), .F0(\dac.n1907 ), .F1(\dac.n1995 ));
  SLICE_39 SLICE_39( .DI0(\SM_DAC_Out[2].sig_015.FeedThruLUT ), 
    .D0(\SM_DAC_Out[2] ), .CE(\dac.n12 ), .LSR(reset_n_N_91), 
    .CLK(Clock_48MHz), .Q0(o_DAC_CS_c), 
    .F0(\SM_DAC_Out[2].sig_015.FeedThruLUT ));
  SLICE_43 SLICE_43( .DI1(n1354), .DI0(n1355), .D1(\o_Sample_Value[9] ), 
    .C1(reset_n_c), .B1(DAC_Send_N_93), .A1(\DAC_Data[9] ), 
    .D0(\o_Sample_Value[8] ), .C0(\DAC_Data[8] ), .B0(reset_n_c), 
    .A0(DAC_Send_N_93), .CLK(Clock_48MHz), .Q0(\DAC_Data[8] ), 
    .Q1(\DAC_Data[9] ), .F0(n1355), .F1(n1354));
  SLICE_45 SLICE_45( .DI1(n1352), .DI0(n1353), .D1(\o_Sample_Value[11] ), 
    .C1(\DAC_Data[11] ), .B1(DAC_Send_N_93), .A1(reset_n_c), 
    .D0(\o_Sample_Value[10] ), .C0(reset_n_c), .B0(\DAC_Data[10] ), 
    .A0(DAC_Send_N_93), .CLK(Clock_48MHz), .Q0(\DAC_Data[10] ), 
    .Q1(\DAC_Data[11] ), .F0(n1353), .F1(n1352));
  SLICE_47 SLICE_47( .DI1(n1350), .DI0(n1351), .D1(\DAC_Data[13] ), 
    .C1(DAC_Send_N_93), .B1(reset_n_c), .A1(\o_Sample_Value[13] ), 
    .D0(DAC_Send_N_93), .C0(\DAC_Data[12] ), .B0(\o_Sample_Value[12] ), 
    .A0(reset_n_c), .CLK(Clock_48MHz), .Q0(\DAC_Data[12] ), 
    .Q1(\DAC_Data[13] ), .F0(n1351), .F1(n1350));
  SLICE_49 SLICE_49( .DI1(n1348), .DI0(n1349), .D1(\DAC_Data[15] ), 
    .C1(DAC_Send_N_93), .B1(reset_n_c), .A1(\o_Sample_Value[15] ), 
    .D0(DAC_Send_N_93), .C0(\o_Sample_Value[14] ), .B0(\DAC_Data[14] ), 
    .A0(reset_n_c), .CLK(Clock_48MHz), .Q0(\DAC_Data[14] ), 
    .Q1(\DAC_Data[15] ), .F0(n1349), .F1(n1348));
  SLICE_51 SLICE_51( .DI1(n1336), .DI0(n1347), .D1(\DAC_Data[2] ), 
    .C1(DAC_Send_N_93), .B1(\o_Sample_Value[2] ), .A1(reset_n_c), 
    .D0(DAC_Send_N_93), .C0(\DAC_Data[3] ), .B0(reset_n_c), 
    .A0(\o_Sample_Value[3] ), .CLK(Clock_48MHz), .Q0(\DAC_Data[3] ), 
    .Q1(\DAC_Data[2] ), .F0(n1347), .F1(n1336));
  SLICE_52 SLICE_52( .DI1(n1344), .DI0(n1345), .D1(\DAC_Data[5] ), 
    .C1(DAC_Send_N_93), .B1(reset_n_c), .A1(\o_Sample_Value[5] ), 
    .D0(\o_Sample_Value[4] ), .C0(\DAC_Data[4] ), .B0(DAC_Send_N_93), 
    .A0(reset_n_c), .CLK(Clock_48MHz), .Q0(\DAC_Data[4] ), .Q1(\DAC_Data[5] ), 
    .F0(n1345), .F1(n1344));
  SLICE_54 SLICE_54( .DI1(n1339), .DI0(n1340), .D1(\DAC_Data[1] ), 
    .C1(DAC_Send_N_93), .B1(reset_n_c), .A1(\o_Sample_Value[1] ), 
    .D0(DAC_Send_N_93), .C0(\DAC_Data[0] ), .B0(\o_Sample_Value[0] ), 
    .A0(reset_n_c), .CLK(Clock_48MHz), .Q0(\DAC_Data[0] ), .Q1(\DAC_Data[1] ), 
    .F0(n1340), .F1(n1339));
  adc_SLICE_61 \adc.SLICE_61 ( .DI1(\adc.n377[3] ), .DI0(\adc.n377[2] ), 
    .D1(\adc.Receive_Byte[3] ), .C1(\adc.Receive_Byte[0] ), 
    .B1(\adc.Receive_Byte[1] ), .A1(\adc.Receive_Byte[2] ), 
    .D0(\adc.Receive_Byte[2] ), .B0(\adc.Receive_Byte[0] ), 
    .A0(\adc.Receive_Byte[1] ), .CE(\adc.n1260 ), .LSR(\adc.n1331 ), 
    .CLK(\adc.Clock_Stable ), .Q0(\adc.Receive_Byte[2] ), 
    .Q1(\adc.Receive_Byte[3] ), .F0(\adc.n377[2] ), .F1(\adc.n377[3] ));
  adc_SLICE_62 \adc.SLICE_62 ( .DI1(\adc.n17[1] ), .DI0(\adc.n17[0] ), 
    .D1(\adc.Count_Stable[1] ), .C1(\adc.Count_Stable[0] ), 
    .B0(\adc.Count_Stable[0] ), .CE(reset_n_c), .LSR(\adc.n1333 ), 
    .CLK(Clock_48MHz), .Q0(\adc.Count_Stable[0] ), .Q1(\adc.Count_Stable[1] ), 
    .F0(\adc.n17[0] ), .F1(\adc.n17[1] ));
  adc_SLICE_63 \adc.SLICE_63 ( .DI1(\adc.n377[1] ), .DI0(\adc.n377[0] ), 
    .D1(\adc.Receive_Byte[1] ), .C1(\adc.Receive_Byte[0] ), 
    .B0(\adc.Receive_Byte[0] ), .CE(\adc.n1260 ), .LSR(\adc.n1331 ), 
    .CLK(\adc.Clock_Stable ), .Q0(\adc.Receive_Byte[0] ), 
    .Q1(\adc.Receive_Byte[1] ), .F0(\adc.n377[0] ), .F1(\adc.n377[1] ));
  adc_SLICE_65 \adc.SLICE_65 ( .DI0(\adc.n17[2] ), .C0(\adc.Count_Stable[1] ), 
    .B0(\adc.Count_Stable[0] ), .A0(\adc.Count_Stable[2] ), .CE(reset_n_c), 
    .LSR(\adc.n1333 ), .CLK(Clock_48MHz), .Q0(\adc.Count_Stable[2] ), 
    .F0(\adc.n17[2] ));
  adc_SLICE_68 \adc.SLICE_68 ( .DI0(\adc.n402[0] ), .A0(\adc.Receive_Bit[0] ), 
    .CE(\adc.n883 ), .LSR(\adc.n1485 ), .CLK(\adc.Clock_Stable ), 
    .Q0(\adc.Receive_Bit[0] ), .F0(\adc.n402[0] ));
  adc_SLICE_69 \adc.SLICE_69 ( .DI1(\adc.n370[1] ), .DI0(\adc.n370[2] ), 
    .D1(\adc.Receive_Bit[1] ), .A1(\adc.Receive_Bit[0] ), 
    .C0(\adc.Receive_Bit[2] ), .B0(\adc.Receive_Bit[0] ), 
    .A0(\adc.Receive_Bit[1] ), .CE(\adc.n883 ), .LSR(\adc.n1316 ), 
    .CLK(\adc.Clock_Stable ), .Q0(\adc.Receive_Bit[2] ), 
    .Q1(\adc.Receive_Bit[1] ), .F0(\adc.n370[2] ), .F1(\adc.n370[1] ));
  adc_SLICE_71 \adc.SLICE_71 ( .DI0(\adc.n370[3] ), .D0(\adc.Receive_Bit[0] ), 
    .C0(\adc.Receive_Bit[1] ), .B0(\adc.Receive_Bit[3] ), 
    .A0(\adc.Receive_Bit[2] ), .CE(\adc.n883 ), .LSR(\adc.n1316 ), 
    .CLK(\adc.Clock_Stable ), .Q0(\adc.Receive_Bit[3] ), .F0(\adc.n370[3] ));
  dac_SLICE_76 \dac.SLICE_76 ( .D1(\dac.Current_Bit[3] ), .C1(\dac.n14 ), 
    .B1(\dac.Current_Bit[2] ), .A1(\dac.n2295 ), .D0(\dac.Current_Bit[3] ), 
    .C0(\dac.n2123 ), .B0(\dac.n2121 ), .A0(\dac.Current_Bit[1] ), 
    .F0(\dac.n14 ), .F1(\dac.n2220 ));
  dac_SLICE_77 \dac.SLICE_77 ( .D1(\dac.Current_Bit[1] ), .C1(\dac.n2122 ), 
    .B1(\dac.Current_Bit[3] ), .A1(\dac.n2208 ), .D0(\dac.r_Data_To_Send[14] ), 
    .B0(\dac.r_Data_To_Send[15] ), .A0(\dac.Current_Bit[0] ), .F0(\dac.n2122 ), 
    .F1(\dac.n2123 ));
  dac_SLICE_78 \dac.SLICE_78 ( .D0(\dac.n22 ), .C0(\dac.n2220 ), 
    .B0(\dac.Current_Bit[4] ), .A0(\dac.Current_Bit[3] ), 
    .F0(\dac.o_SPI_Data_N_394 ));
  dac_SLICE_80 \dac.SLICE_80 ( .D1(\SM_DAC_Out[3] ), .C1(\dac.n7 ), 
    .B1(\SM_DAC_Out[2] ), .A1(Clock_Counter), .D0(\SM_DAC_Out[0] ), 
    .C0(reset_n_c), .B0(\SM_DAC_Out[1] ), .A0(DAC_Send), .F0(\dac.n7 ), 
    .F1(\dac.n1276 ));
  dac_SLICE_81 \dac.SLICE_81 ( .D1(\dac.n1276 ), .C1(\dac.n6_adj_420 ), 
    .B1(\SM_DAC_Out[2] ), .A1(\SM_DAC_Out[1] ), .B0(\SM_DAC_Out[0] ), 
    .A0(\SM_DAC_Out[3] ), .F0(\dac.n6_adj_420 ), .F1(\dac.n1327 ));
  dac_SLICE_82 \dac.SLICE_82 ( .D1(\dac.r_Data_To_Send[17] ), .C1(\dac.n2286 ), 
    .B1(\dac.Current_Bit[1] ), .A1(\dac.r_Data_To_Send[16] ), 
    .D0(\dac.Current_Bit[0] ), .C0(\dac.r_Data_To_Send[19] ), 
    .B0(\dac.r_Data_To_Send[18] ), .A0(\dac.Current_Bit[1] ), .F0(\dac.n2286 ), 
    .F1(\dac.n2289 ));
  dac_SLICE_84 \dac.SLICE_84 ( .D1(\dac.r_Data_To_Send[9] ), .C1(\dac.n2292 ), 
    .B1(\dac.Current_Bit[1] ), .A1(\dac.r_Data_To_Send[8] ), 
    .D0(\dac.Current_Bit[0] ), .C0(\dac.r_Data_To_Send[10] ), 
    .B0(\dac.Current_Bit[1] ), .A0(\dac.r_Data_To_Send[11] ), .F0(\dac.n2292 ), 
    .F1(\dac.n2295 ));
  dac_SLICE_86 \dac.SLICE_86 ( .C1(n865), .A1(reset_n_c), .D0(n675), 
    .C0(\dac.n827 ), .B0(Clock_Counter), .A0(\SM_DAC_Out[2] ), .F0(n865), 
    .F1(n1385));
  dac_SLICE_87 \dac.SLICE_87 ( .DI1(n8), .D1(reset_n_c), .C1(n675), .B1(n865), 
    .A1(\SM_DAC_Out[0] ), .D0(\SM_DAC_Out[3] ), .C0(\SM_DAC_Out[0] ), 
    .B0(\SM_DAC_Out[1] ), .A0(\SM_DAC_Out[2] ), .CLK(Clock_48MHz), 
    .Q1(\SM_DAC_Out[0] ), .F0(n675), .F1(n8));
  dac_SLICE_88 \dac.SLICE_88 ( .D1(\SM_DAC_Out[0] ), .C1(n1900), 
    .B1(Clock_Counter), .A1(\SM_DAC_Out[2] ), .C0(\SM_DAC_Out[0] ), 
    .B0(\SM_DAC_Out[3] ), .A0(\SM_DAC_Out[1] ), .F0(n1900), .F1(\dac.n2058 ));
  dac_SLICE_90 \dac.SLICE_90 ( .D1(\dac.Current_Bit[1] ), .C1(\dac.n2298 ), 
    .B1(\dac.r_Data_To_Send[21] ), .A1(\dac.r_Data_To_Send[20] ), 
    .D0(\dac.Current_Bit[0] ), .C0(\dac.Current_Bit[1] ), 
    .B0(\dac.r_Data_To_Send[22] ), .A0(\dac.r_Data_To_Send[23] ), 
    .F0(\dac.n2298 ), .F1(\dac.n2301 ));
  SLICE_92 SLICE_92( .C1(n24), .A1(Clock_Counter), .D0(\SM_DAC_Out[0] ), 
    .C0(\SM_DAC_Out[2] ), .B0(\SM_DAC_Out[3] ), .A0(\SM_DAC_Out[1] ), .F0(n24), 
    .F1(n2108));
  SLICE_93 SLICE_93( .D1(\SM_DAC_Out[2] ), .C1(n12), .B1(n2108), 
    .A1(reset_n_c), .D0(\SM_DAC_Out[3] ), .B0(\SM_DAC_Out[0] ), 
    .A0(\SM_DAC_Out[1] ), .F0(n12), .F1(n1834));
  dac_SLICE_94 \dac.SLICE_94 ( .D1(reset_n_c), .C1(\dac.n1477 ), 
    .B1(\SM_DAC_Out[3] ), .A1(\dac.n6 ), .C0(\SM_DAC_Out[2] ), 
    .A0(\SM_DAC_Out[1] ), .F0(\dac.n1477 ), .F1(\dac.n870 ));
  dac_SLICE_96 \dac.SLICE_96 ( .C1(reset_n_c), .D0(DAC_Send), .C0(\dac.n2058 ), 
    .B0(n24), .A0(reset_n_c), .F0(\dac.n2003 ), .F1(reset_n_N_91));
  dac_SLICE_98 \dac.SLICE_98 ( .D1(\SM_DAC_Out[1] ), .C1(\dac.n21 ), 
    .B1(\dac.n2100 ), .A1(\SM_DAC_Out[2] ), .C0(\SM_DAC_Out[0] ), 
    .A0(\SM_DAC_Out[3] ), .F0(\dac.n21 ), .F1(o_DAC_SCK_c));
  dac_SLICE_100 \dac.SLICE_100 ( .D1(Clock_Counter), .C1(\dac.n8_c ), 
    .B1(\dac.Current_Bit[0] ), .A1(\dac.Current_Bit[1] ), 
    .D0(\dac.Current_Bit[3] ), .C0(\dac.Current_Bit[4] ), 
    .B0(\dac.Current_Bit[2] ), .F0(\dac.n8_c ), .F1(\dac.n2100 ));
  dac_SLICE_102 \dac.SLICE_102 ( .D1(\dac.n2042 ), .C1(\dac.n2110 ), 
    .B1(\SM_DAC_Out[0] ), .A1(DAC_Send), .D0(\dac.Current_Bit[2] ), 
    .B0(\dac.Current_Bit[1] ), .F0(\dac.n2110 ), .F1(\dac.n827 ));
  dac_SLICE_104 \dac.SLICE_104 ( .D1(\dac.n855 ), .C1(\dac.n2048 ), 
    .B1(reset_n_c), .A1(n2108), .D0(n1900), .C0(DAC_Send), .B0(\dac.n1886 ), 
    .A0(\SM_DAC_Out[2] ), .F0(\dac.n2048 ), .F1(\dac.n12 ));
  dac_SLICE_105 \dac.SLICE_105 ( .DI1(\dac.n1989 ), .D1(\SM_DAC_Out[0] ), 
    .C1(\SM_DAC_Out[3] ), .B1(\SM_DAC_Out[1] ), .A1(\SM_DAC_Out[2] ), 
    .D0(\SM_DAC_Out[3] ), .C0(\SM_DAC_Out[0] ), .B0(\SM_DAC_Out[2] ), 
    .A0(\SM_DAC_Out[1] ), .CE(n1385), .LSR(reset_n_N_91), .CLK(Clock_48MHz), 
    .Q1(\SM_DAC_Out[3] ), .F0(\dac.n855 ), .F1(\dac.n1989 ));
  dac_SLICE_107 \dac.SLICE_107 ( .DI1(\dac.n1980 ), 
    .D1(\dac.o_SPI_Data_N_394 ), .C1(n1900), .B1(\SM_DAC_Out[2] ), 
    .A1(\SM_DAC_Out[0] ), .D0(\SM_DAC_Out[0] ), .B0(\SM_DAC_Out[1] ), 
    .A0(\SM_DAC_Out[3] ), .CE(n1834), .LSR(reset_n_N_91), .CLK(Clock_48MHz), 
    .Q1(o_DAC_MOSI_c), .F0(\dac.n1886 ), .F1(\dac.n1980 ));
  SLICE_108 SLICE_108( .D1(n16), .C1(n17_2), .B1(\counter[8] ), 
    .A1(\counter[4] ), .D0(\counter[7] ), .C0(\counter[0] ), .B0(DAC_Ready), 
    .A0(\counter[1] ), .F0(n17_2), .F1(DAC_Send_N_93));
  SLICE_109 SLICE_109( .C0(DAC_Send_N_93), .A0(reset_n_c), .F0(n872));
  adc_SLICE_110 \adc.SLICE_110 ( .D1(CS_Stable), .C1(\adc.n7 ), 
    .B1(\adc.o_Data_Received_N_282 ), .A1(SM_ADC_In), 
    .D0(\adc.Receive_Byte[2] ), .C0(\adc.Receive_Byte[3] ), 
    .B0(\adc.Receive_Byte[0] ), .A0(\adc.Receive_Byte[1] ), .F0(\adc.n7 ), 
    .F1(\adc.n1316 ));
  adc_SLICE_111 \adc.SLICE_111 ( .D1(CS_Stable), 
    .C1(\adc.o_Data_Received_N_282 ), .B1(SM_ADC_In), .A1(\adc.n7 ), 
    .D0(\adc.Receive_Bit[0] ), .C0(\adc.Receive_Bit[1] ), 
    .B0(\adc.Receive_Bit[3] ), .A0(\adc.Receive_Bit[2] ), 
    .F0(\adc.o_Data_Received_N_282 ), .F1(\adc.n1331 ));
  adc_SLICE_112 \adc.SLICE_112 ( .D1(\adc.Data_State ), 
    .C1(\adc.CS_State_N_291 ), .B1(i_ADC_Data_c), .A1(\adc.Clock_State_N_288 ), 
    .D0(\adc.CS_State ), .C0(\adc.i_ADC_CS_c ), .F0(\adc.CS_State_N_291 ), 
    .F1(\adc.n1322 ));
  adc_SLICE_113 \adc.SLICE_113 ( .D1(reset_n_c), .C1(\adc.n1155 ), 
    .B1(\adc.n1322 ), .D0(\adc.Count_Stable[1] ), .B0(\adc.Count_Stable[2] ), 
    .A0(\adc.Count_Stable[0] ), .F0(\adc.n1155 ), .F1(\adc.n2035 ));
  adc_SLICE_116 \adc.SLICE_116 ( .D1(reset_n_c), .B1(\adc.n1322 ), 
    .D0(reset_n_c), .C0(\adc.n1322 ), .A0(\adc.n1155 ), .F0(\adc.n1925 ), 
    .F1(\adc.n1333 ));
  dac_SLICE_119 \dac.SLICE_119 ( .DI1(\dac.o_Ready_N_396 ), 
    .D1(\SM_DAC_Out[2] ), .C1(\dac.n18 ), .B1(n24), .A1(Clock_Counter), 
    .D0(\SM_DAC_Out[3] ), .C0(DAC_Send), .B0(\SM_DAC_Out[0] ), 
    .A0(\SM_DAC_Out[1] ), .CE(\dac.n2003 ), .LSR(reset_n_N_91), 
    .CLK(Clock_48MHz), .Q1(DAC_Ready), .F0(\dac.n18 ), 
    .F1(\dac.o_Ready_N_396 ));
  adc_SLICE_120 \adc.SLICE_120 ( .DI1(n1343), .D1(ADC_Data_Received), 
    .C1(n1467), .B1(SM_ADC_In), .A1(CS_Stable), .D0(\adc.n7 ), 
    .B0(\adc.o_Data_Received_N_282 ), .CLK(\adc.Clock_Stable ), 
    .Q1(ADC_Data_Received), .F0(n1467), .F1(n1343));
  adc_SLICE_121 \adc.SLICE_121 ( .DI1(\adc.n2 ), 
    .C1(\adc.o_Data_Received_N_282 ), .B1(SM_ADC_In), .A1(\adc.n7 ), 
    .D0(\adc.o_Data_Received_N_282 ), .B0(CS_Stable), .A0(SM_ADC_In), 
    .LSR(CS_Stable), .CLK(\adc.Clock_Stable ), .Q1(SM_ADC_In), 
    .F0(\adc.n1260 ), .F1(\adc.n2 ));
  adc_SLICE_124 \adc.SLICE_124 ( .DI1(\i_ADC_Clock_c.sig_019.FeedThruLUT ), 
    .D1(i_ADC_Clock_c), .B0(\adc.Clock_State ), .A0(i_ADC_Clock_c), 
    .CE(\adc.n2035 ), .CLK(Clock_48MHz), .Q1(\adc.Clock_Stable ), 
    .F0(\adc.Clock_State_N_288 ), .F1(\i_ADC_Clock_c.sig_019.FeedThruLUT ));
  adc_SLICE_125 \adc.SLICE_125 ( .DI1(\i_ADC_Data_c.sig_018.FeedThruLUT ), 
    .C1(i_ADC_Data_c), .D0(i_ADC_Data_c), .C0(\adc.Data_State ), 
    .B0(reset_n_c), .CE(\adc.n1073 ), .CLK(Clock_48MHz), .Q1(\adc.Data_State ), 
    .F0(\adc.n1073 ), .F1(\i_ADC_Data_c.sig_018.FeedThruLUT ));
  SLICE_126 SLICE_126( .F0(VCC_net));
  dac_SLICE_128 \dac.SLICE_128 ( .DI1(n1346), .D1(Clock_Counter), 
    .C1(reset_n_c), .D0(DAC_Send), .C0(\SM_DAC_Out[0] ), .A0(Clock_Counter), 
    .CLK(Clock_48MHz), .Q1(Clock_Counter), .F0(\dac.n6 ), .F1(n1346));
  dac_SLICE_129 \dac.SLICE_129 ( .DI1(\n457$n0 ), .D1(DAC_Send_N_93), 
    .B1(reset_n_c), .D0(DAC_Send), .A0(\SM_DAC_Out[0] ), .CLK(Clock_48MHz), 
    .Q1(DAC_Send), .F0(\dac.n1902 ), .F1(\n457$n0 ));
  dac_SLICE_130 \dac.SLICE_130 ( .D0(\dac.n2289 ), .C0(\dac.n2301 ), 
    .B0(\dac.Current_Bit[2] ), .F0(\dac.n22 ));
  dac_SLICE_131 \dac.SLICE_131 ( .D1(\dac.Current_Bit[0] ), 
    .B1(\dac.Current_Bit[2] ), .D0(\dac.Current_Bit[2] ), 
    .C0(\dac.Current_Bit[1] ), .A0(\dac.Current_Bit[0] ), .F0(\dac.n1648 ), 
    .F1(\dac.n2208 ));
  dac_SLICE_132 \dac.SLICE_132 ( .D0(\dac.r_Data_To_Send[12] ), 
    .C0(\dac.r_Data_To_Send[13] ), .B0(\dac.Current_Bit[0] ), .F0(\dac.n2121 ));
  dac_SLICE_134 \dac.SLICE_134 ( .DI1(\dac.n25[4] ), .D1(\dac.Current_Bit[4] ), 
    .C1(\dac.n1648 ), .A1(\dac.Current_Bit[3] ), .D0(\dac.Current_Bit[0] ), 
    .B0(\dac.Current_Bit[3] ), .A0(\dac.Current_Bit[4] ), .CE(\dac.n1276 ), 
    .LSR(\dac.n1327 ), .CLK(Clock_48MHz), .Q1(\dac.Current_Bit[4] ), 
    .F0(\dac.n2042 ), .F1(\dac.n25[4] ));
  SLICE_139 SLICE_139( .D0(\counter[6] ), .C0(\counter[5] ), .B0(\counter[3] ), 
    .A0(\counter[2] ), .F0(n16));
  SLICE_140 SLICE_140( .F0(GND_net));
  adc_SLICE_141 \adc.SLICE_141 ( .DI1(\i_ADC_Clock_c.sig_021.FeedThruLUT ), 
    .D1(i_ADC_Clock_c), .C0(reset_n_c), .B0(\adc.Clock_State ), 
    .A0(i_ADC_Clock_c), .CE(\adc.n1067 ), .CLK(Clock_48MHz), 
    .Q1(\adc.Clock_State ), .F0(\adc.n1067 ), 
    .F1(\i_ADC_Clock_c.sig_021.FeedThruLUT ));
  adc_SLICE_142 \adc.SLICE_142 ( .C0(CS_Stable), .A0(SM_ADC_In), 
    .F0(\adc.n1485 ));
  adc_SLICE_143 \adc.SLICE_143 ( .DI1(\adc.i_ADC_CS_c.sig_017.FeedThruLUT ), 
    .B1(\adc.i_ADC_CS_c ), .D0(reset_n_c), .C0(\adc.i_ADC_CS_c ), 
    .A0(\adc.CS_State ), .CE(\adc.n1065 ), .CLK(Clock_48MHz), 
    .Q1(\adc.CS_State ), .F0(\adc.n1065 ), 
    .F1(\adc.i_ADC_CS_c.sig_017.FeedThruLUT ));
  adc_SLICE_144 \adc.SLICE_144 ( .DI1(\adc.i_ADC_CS_c.sig_020.FeedThruLUT ), 
    .C1(\adc.i_ADC_CS_c ), .B0(CS_Stable), .CE(\adc.n1925 ), 
    .LSR(reset_n_N_91), .CLK(Clock_48MHz), .Q1(CS_Stable), .F0(\adc.n883 ), 
    .F1(\adc.i_ADC_CS_c.sig_020.FeedThruLUT ));
  pll_48_lscc_pll_inst_u_PLL_B \pll_48.lscc_pll_inst.u_PLL_B ( 
    .REFERENCECLK(i_Clock_c), .FEEDBACK(\pll_48.lscc_pll_inst.feedback_w ), 
    .RESET_N(reset_n_c), .INTFBOUT(\pll_48.lscc_pll_inst.feedback_w ), 
    .OUTCORE(Clock_48MHz));
  reset_n reset_n_I( .PADDI(reset_n_c), .reset_n(reset_n));
  i_ADC_CS i_ADC_CS_I( .PADDI(\adc.i_ADC_CS_c ), .i_ADC_CS(i_ADC_CS));
  ___lscc_rom_inst_u_rom_PRIM_MODE_xADDR_0__xDATA_7__mem_file_mem0_iCE40UP_sp4k 
    \__.lscc_rom_inst.u_rom.PRIM_MODE.xADDR[0].xDATA[7].mem_file.mem0.iCE40UP.sp4k 
    ( .RADDR10(\outcount[10] ), .RADDR9(\outcount[9] ), .RADDR8(\outcount[8] ), 
    .RADDR7(\outcount[7] ), .RADDR6(\outcount[6] ), .RADDR5(\outcount[5] ), 
    .RADDR4(\outcount[4] ), .RADDR3(\outcount[3] ), .RADDR2(\outcount[2] ), 
    .RADDR1(\outcount[1] ), .RADDR0(\outcount[0] ), .WADDR10(\outcount[10] ), 
    .WADDR9(\outcount[9] ), .WADDR8(\outcount[8] ), .WADDR7(\outcount[7] ), 
    .WADDR6(\outcount[6] ), .WADDR5(\outcount[5] ), .WADDR4(\outcount[4] ), 
    .WADDR3(\outcount[3] ), .WADDR2(\outcount[2] ), .WADDR1(\outcount[1] ), 
    .WADDR0(\outcount[0] ), .RCLKE(VCC_net), .RCLK(Clock_48MHz), .RE(VCC_net), 
    .WCLKE(VCC_net), .WCLK(Clock_48MHz), .RDATA11(\o_Sample_Value[15] ), 
    .RDATA3(\o_Sample_Value[14] ));
  ___lscc_rom_inst_u_rom_PRIM_MODE_xADDR_0__xDATA_6__mem_file_mem0_iCE40UP_sp4k 
    \__.lscc_rom_inst.u_rom.PRIM_MODE.xADDR[0].xDATA[6].mem_file.mem0.iCE40UP.sp4k 
    ( .RADDR10(\outcount[10] ), .RADDR9(\outcount[9] ), .RADDR8(\outcount[8] ), 
    .RADDR7(\outcount[7] ), .RADDR6(\outcount[6] ), .RADDR5(\outcount[5] ), 
    .RADDR4(\outcount[4] ), .RADDR3(\outcount[3] ), .RADDR2(\outcount[2] ), 
    .RADDR1(\outcount[1] ), .RADDR0(\outcount[0] ), .WADDR10(\outcount[10] ), 
    .WADDR9(\outcount[9] ), .WADDR8(\outcount[8] ), .WADDR7(\outcount[7] ), 
    .WADDR6(\outcount[6] ), .WADDR5(\outcount[5] ), .WADDR4(\outcount[4] ), 
    .WADDR3(\outcount[3] ), .WADDR2(\outcount[2] ), .WADDR1(\outcount[1] ), 
    .WADDR0(\outcount[0] ), .RCLKE(VCC_net), .RCLK(Clock_48MHz), .RE(VCC_net), 
    .WCLKE(VCC_net), .WCLK(Clock_48MHz), .RDATA11(\o_Sample_Value[13] ), 
    .RDATA3(\o_Sample_Value[12] ));
  ___lscc_rom_inst_u_rom_PRIM_MODE_xADDR_0__xDATA_5__mem_file_mem0_iCE40UP_sp4k 
    \__.lscc_rom_inst.u_rom.PRIM_MODE.xADDR[0].xDATA[5].mem_file.mem0.iCE40UP.sp4k 
    ( .RADDR10(\outcount[10] ), .RADDR9(\outcount[9] ), .RADDR8(\outcount[8] ), 
    .RADDR7(\outcount[7] ), .RADDR6(\outcount[6] ), .RADDR5(\outcount[5] ), 
    .RADDR4(\outcount[4] ), .RADDR3(\outcount[3] ), .RADDR2(\outcount[2] ), 
    .RADDR1(\outcount[1] ), .RADDR0(\outcount[0] ), .WADDR10(\outcount[10] ), 
    .WADDR9(\outcount[9] ), .WADDR8(\outcount[8] ), .WADDR7(\outcount[7] ), 
    .WADDR6(\outcount[6] ), .WADDR5(\outcount[5] ), .WADDR4(\outcount[4] ), 
    .WADDR3(\outcount[3] ), .WADDR2(\outcount[2] ), .WADDR1(\outcount[1] ), 
    .WADDR0(\outcount[0] ), .RCLKE(VCC_net), .RCLK(Clock_48MHz), .RE(VCC_net), 
    .WCLKE(VCC_net), .WCLK(Clock_48MHz), .RDATA11(\o_Sample_Value[11] ), 
    .RDATA3(\o_Sample_Value[10] ));
  ___lscc_rom_inst_u_rom_PRIM_MODE_xADDR_0__xDATA_4__mem_file_mem0_iCE40UP_sp4k 
    \__.lscc_rom_inst.u_rom.PRIM_MODE.xADDR[0].xDATA[4].mem_file.mem0.iCE40UP.sp4k 
    ( .RADDR10(\outcount[10] ), .RADDR9(\outcount[9] ), .RADDR8(\outcount[8] ), 
    .RADDR7(\outcount[7] ), .RADDR6(\outcount[6] ), .RADDR5(\outcount[5] ), 
    .RADDR4(\outcount[4] ), .RADDR3(\outcount[3] ), .RADDR2(\outcount[2] ), 
    .RADDR1(\outcount[1] ), .RADDR0(\outcount[0] ), .WADDR10(\outcount[10] ), 
    .WADDR9(\outcount[9] ), .WADDR8(\outcount[8] ), .WADDR7(\outcount[7] ), 
    .WADDR6(\outcount[6] ), .WADDR5(\outcount[5] ), .WADDR4(\outcount[4] ), 
    .WADDR3(\outcount[3] ), .WADDR2(\outcount[2] ), .WADDR1(\outcount[1] ), 
    .WADDR0(\outcount[0] ), .RCLKE(VCC_net), .RCLK(Clock_48MHz), .RE(VCC_net), 
    .WCLKE(VCC_net), .WCLK(Clock_48MHz), .RDATA11(\o_Sample_Value[9] ), 
    .RDATA3(\o_Sample_Value[8] ));
  ___lscc_rom_inst_u_rom_PRIM_MODE_xADDR_0__xDATA_3__mem_file_mem0_iCE40UP_sp4k 
    \__.lscc_rom_inst.u_rom.PRIM_MODE.xADDR[0].xDATA[3].mem_file.mem0.iCE40UP.sp4k 
    ( .RADDR10(\outcount[10] ), .RADDR9(\outcount[9] ), .RADDR8(\outcount[8] ), 
    .RADDR7(\outcount[7] ), .RADDR6(\outcount[6] ), .RADDR5(\outcount[5] ), 
    .RADDR4(\outcount[4] ), .RADDR3(\outcount[3] ), .RADDR2(\outcount[2] ), 
    .RADDR1(\outcount[1] ), .RADDR0(\outcount[0] ), .WADDR10(\outcount[10] ), 
    .WADDR9(\outcount[9] ), .WADDR8(\outcount[8] ), .WADDR7(\outcount[7] ), 
    .WADDR6(\outcount[6] ), .WADDR5(\outcount[5] ), .WADDR4(\outcount[4] ), 
    .WADDR3(\outcount[3] ), .WADDR2(\outcount[2] ), .WADDR1(\outcount[1] ), 
    .WADDR0(\outcount[0] ), .RCLKE(VCC_net), .RCLK(Clock_48MHz), .RE(VCC_net), 
    .WCLKE(VCC_net), .WCLK(Clock_48MHz), .RDATA11(\o_Sample_Value[7] ), 
    .RDATA3(\o_Sample_Value[6] ));
  ___lscc_rom_inst_u_rom_PRIM_MODE_xADDR_0__xDATA_2__mem_file_mem0_iCE40UP_sp4k 
    \__.lscc_rom_inst.u_rom.PRIM_MODE.xADDR[0].xDATA[2].mem_file.mem0.iCE40UP.sp4k 
    ( .RADDR10(\outcount[10] ), .RADDR9(\outcount[9] ), .RADDR8(\outcount[8] ), 
    .RADDR7(\outcount[7] ), .RADDR6(\outcount[6] ), .RADDR5(\outcount[5] ), 
    .RADDR4(\outcount[4] ), .RADDR3(\outcount[3] ), .RADDR2(\outcount[2] ), 
    .RADDR1(\outcount[1] ), .RADDR0(\outcount[0] ), .WADDR10(\outcount[10] ), 
    .WADDR9(\outcount[9] ), .WADDR8(\outcount[8] ), .WADDR7(\outcount[7] ), 
    .WADDR6(\outcount[6] ), .WADDR5(\outcount[5] ), .WADDR4(\outcount[4] ), 
    .WADDR3(\outcount[3] ), .WADDR2(\outcount[2] ), .WADDR1(\outcount[1] ), 
    .WADDR0(\outcount[0] ), .RCLKE(VCC_net), .RCLK(Clock_48MHz), .RE(VCC_net), 
    .WCLKE(VCC_net), .WCLK(Clock_48MHz), .RDATA11(\o_Sample_Value[5] ), 
    .RDATA3(\o_Sample_Value[4] ));
  ___lscc_rom_inst_u_rom_PRIM_MODE_xADDR_0__xDATA_1__mem_file_mem0_iCE40UP_sp4k 
    \__.lscc_rom_inst.u_rom.PRIM_MODE.xADDR[0].xDATA[1].mem_file.mem0.iCE40UP.sp4k 
    ( .RADDR10(\outcount[10] ), .RADDR9(\outcount[9] ), .RADDR8(\outcount[8] ), 
    .RADDR7(\outcount[7] ), .RADDR6(\outcount[6] ), .RADDR5(\outcount[5] ), 
    .RADDR4(\outcount[4] ), .RADDR3(\outcount[3] ), .RADDR2(\outcount[2] ), 
    .RADDR1(\outcount[1] ), .RADDR0(\outcount[0] ), .WADDR10(\outcount[10] ), 
    .WADDR9(\outcount[9] ), .WADDR8(\outcount[8] ), .WADDR7(\outcount[7] ), 
    .WADDR6(\outcount[6] ), .WADDR5(\outcount[5] ), .WADDR4(\outcount[4] ), 
    .WADDR3(\outcount[3] ), .WADDR2(\outcount[2] ), .WADDR1(\outcount[1] ), 
    .WADDR0(\outcount[0] ), .RCLKE(VCC_net), .RCLK(Clock_48MHz), .RE(VCC_net), 
    .WCLKE(VCC_net), .WCLK(Clock_48MHz), .RDATA11(\o_Sample_Value[3] ), 
    .RDATA3(\o_Sample_Value[2] ));
  ___lscc_rom_inst_u_rom_PRIM_MODE_xADDR_0__xDATA_0__mem_file_mem0_iCE40UP_sp4k 
    \__.lscc_rom_inst.u_rom.PRIM_MODE.xADDR[0].xDATA[0].mem_file.mem0.iCE40UP.sp4k 
    ( .RADDR10(\outcount[10] ), .RADDR9(\outcount[9] ), .RADDR8(\outcount[8] ), 
    .RADDR7(\outcount[7] ), .RADDR6(\outcount[6] ), .RADDR5(\outcount[5] ), 
    .RADDR4(\outcount[4] ), .RADDR3(\outcount[3] ), .RADDR2(\outcount[2] ), 
    .RADDR1(\outcount[1] ), .RADDR0(\outcount[0] ), .WADDR10(\outcount[10] ), 
    .WADDR9(\outcount[9] ), .WADDR8(\outcount[8] ), .WADDR7(\outcount[7] ), 
    .WADDR6(\outcount[6] ), .WADDR5(\outcount[5] ), .WADDR4(\outcount[4] ), 
    .WADDR3(\outcount[3] ), .WADDR2(\outcount[2] ), .WADDR1(\outcount[1] ), 
    .WADDR0(\outcount[0] ), .RCLKE(VCC_net), .RCLK(Clock_48MHz), .RE(VCC_net), 
    .WCLKE(VCC_net), .WCLK(Clock_48MHz), .RDATA11(\o_Sample_Value[1] ), 
    .RDATA3(\o_Sample_Value[0] ));
  o_DAC_SCK o_DAC_SCK_I( .PADDO(o_DAC_SCK_c), .o_DAC_SCK(o_DAC_SCK));
  o_DAC_MOSI o_DAC_MOSI_I( .PADDO(o_DAC_MOSI_c), .o_DAC_MOSI(o_DAC_MOSI));
  test test_I( .PADDO(test_c), .test(test));
  led led_I( .PADDO(GND_net), .led(led));
  i_ADC_Clock i_ADC_Clock_I( .PADDI(i_ADC_Clock_c), .i_ADC_Clock(i_ADC_Clock));
  i_ADC_Data i_ADC_Data_I( .PADDI(i_ADC_Data_c), .i_ADC_Data(i_ADC_Data));
  i_Clock i_Clock_I( .PADDI(i_Clock_c), .i_Clock(i_Clock));
  o_DAC_CS o_DAC_CS_I( .PADDO(o_DAC_CS_c), .o_DAC_CS(o_DAC_CS));
endmodule

module SLICE_0 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, CIN1, output 
    Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 counter_239_add_4_7( .A0(GNDI), .B0(GNDI), .C0(C0), .D0(D0), .A1(GNDI), 
    .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), .S1(F1), 
    .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 counter_239__i5( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 counter_239__i6( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module fa2 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI0, CI1, output S0, S1, 
    CO0, CO1 );

  FA2 inst1( .A0(A0), .B0(B0), .C0(C0), .D0(D0), .CI0(CI0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .CI1(CI1), .CO0(CO0), .CO1(CO1), .S0(S0), .S1(S1));
  defparam inst1.INIT0 = "0xc33c";
  defparam inst1.INIT1 = "0xc33c";
endmodule

module gnd ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module ffsre2 ( input D0, SP, CK, LSR, output Q );

  FD1P3XZ INST01( .D(D0), .SP(SP), .CK(CK), .SR(LSR), .Q(Q));
  defparam INST01.REGSET = "RESET";
  defparam INST01.SRMODE = "CE_OVER_LSR";
endmodule

module vcc ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module SLICE_1 ( input DI1, DI0, D1, B1, D0, B0, CE, LSR, CLK, CIN0, CIN1, 
    output Q0, Q1, F0, F1, COUT0 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  fa2 add_14_add_5_11( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(D0), .A1(GNDI), 
    .B1(B1), .C1(GNDI), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), .S1(F1), 
    .CO0(COUT0), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 outcount__i9( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  ffsre2 outcount__i10( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module SLICE_2 ( input DI1, DI0, D1, B1, D0, B0, CE, LSR, CLK, CIN0, CIN1, 
    output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  fa2 add_14_add_5_9( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(D0), .A1(GNDI), 
    .B1(B1), .C1(GNDI), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), .S1(F1), 
    .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 outcount__i7( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  ffsre2 outcount__i8( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module SLICE_3 ( input DI1, DI0, D1, B1, D0, B0, CE, LSR, CLK, CIN0, CIN1, 
    output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  fa2 add_14_add_5_7( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(D0), .A1(GNDI), 
    .B1(B1), .C1(GNDI), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), .S1(F1), 
    .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 outcount__i5( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  ffsre2 outcount__i6( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module SLICE_4 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, CIN1, output 
    Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 counter_239_add_4_3( .A0(GNDI), .B0(GNDI), .C0(C0), .D0(D0), .A1(GNDI), 
    .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), .S1(F1), 
    .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 counter_239__i1( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 counter_239__i2( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module SLICE_5 ( input DI1, D1, C1, B1, CE, LSR, CLK, CIN1, output Q1, F1, 
    COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, CE_dly, LSR_dly;

  fa2 add_14_add_5_1( .A0(GNDI), .B0(GNDI), .C0(GNDI), .D0(VCCI), .A1(GNDI), 
    .B1(B1), .C1(C1), .D1(D1), .CI0(VCCI), .CI1(CIN1), .S0(), .S1(F1), 
    .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 outcount__i0( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => COUT1) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module SLICE_6 ( input DI1, DI0, D1, B1, D0, B0, CE, LSR, CLK, CIN0, CIN1, 
    output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  fa2 add_14_add_5_5( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(D0), .A1(GNDI), 
    .B1(B1), .C1(GNDI), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), .S1(F1), 
    .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 outcount__i3( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  ffsre2 outcount__i4( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module SLICE_7 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, CIN1, output 
    Q0, Q1, F0, F1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 counter_239_add_4_9( .A0(GNDI), .B0(GNDI), .C0(C0), .D0(D0), .A1(GNDI), 
    .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), .S1(F1), 
    .CO0(COUT0), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 counter_239__i7( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 counter_239__i8( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module SLICE_8 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, CIN1, output 
    Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 counter_239_add_4_5( .A0(GNDI), .B0(GNDI), .C0(C0), .D0(D0), .A1(GNDI), 
    .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), .S1(F1), 
    .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 counter_239__i3( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 counter_239__i4( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module SLICE_9 ( input DI1, D1, C1, B1, LSR, CLK, CIN1, output Q1, F1, COUT1, 
    COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, LSR_dly;

  fa2 counter_239_add_4_1( .A0(GNDI), .B0(GNDI), .C0(GNDI), .D0(VCCI), 
    .A1(GNDI), .B1(B1), .C1(C1), .D1(D1), .CI0(VCCI), .CI1(CIN1), .S0(), 
    .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 counter_239__i0( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => COUT1) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module SLICE_10 ( input DI1, DI0, D1, B1, D0, B0, CE, LSR, CLK, CIN0, CIN1, 
    output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  fa2 add_14_add_5_3( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(D0), .A1(GNDI), 
    .B1(B1), .C1(GNDI), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), .S1(F1), 
    .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 outcount__i1( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  ffsre2 outcount__i2( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module SLICE_11 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, B0, A0, CLK, output 
    Q0, Q1, F0, F1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut4 i688_3_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40001 i689_3_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 DAC_Data__i8( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 DAC_Data__i7( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut4 ( input A, B, C, D, output Z );

  LUT4 #("0xDF80") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40001 ( input A, B, C, D, output Z );

  LUT4 #("0xB8F0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_12 ( input DI0, A0, CLK, output Q0, F0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40002 test_I_1_1_lut( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 test_i0( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40002 ( input A, B, C, D, output Z );

  LUT4 #("0x5555") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_13 ( input DI1, DI0, A1, A0, CE, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40003 SLICE_13_K1( .A(A1), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40004 SLICE_13_K0( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  ffsre2 \dac/r_Data_To_Send__i13 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  ffsre2 \dac/r_Data_To_Send__i14 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40003 ( input A, B, C, D, output Z );

  LUT4 #("0xAAAA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40004 ( input A, B, C, D, output Z );

  LUT4 #("0xAAAA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_15 ( input DI1, DI0, A1, A0, CE, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40003 SLICE_15_K1( .A(A1), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40004 SLICE_15_K0( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  ffsre2 \dac/r_Data_To_Send__i11 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  ffsre2 \dac/r_Data_To_Send__i12 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module SLICE_17 ( input DI1, DI0, B1, A0, CE, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40005 SLICE_17_K1( .A(GNDI), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40004 SLICE_17_K0( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  ffsre2 \dac/r_Data_To_Send__i9 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  ffsre2 \dac/r_Data_To_Send__i10 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40005 ( input A, B, C, D, output Z );

  LUT4 #("0xCCCC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_19 ( input DI1, DI0, C1, D0, CE, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40006 SLICE_19_K1( .A(GNDI), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40007 SLICE_19_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \dac/r_Data_To_Send__i7 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  ffsre2 \dac/r_Data_To_Send__i8 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40006 ( input A, B, C, D, output Z );

  LUT4 #("0xF0F0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40007 ( input A, B, C, D, output Z );

  LUT4 #("0xFF00") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_21 ( input DI1, DI0, D1, A0, CE, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40008 SLICE_21_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40004 SLICE_21_K0( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  ffsre2 \dac/r_Data_To_Send__i5 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  ffsre2 \dac/r_Data_To_Send__i6 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40008 ( input A, B, C, D, output Z );

  LUT4 #("0xFF00") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_23 ( input DI1, DI0, A1, C0, CE, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40003 SLICE_23_K1( .A(A1), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40009 SLICE_23_K0( .A(GNDI), .B(GNDI), .C(C0), .D(GNDI), .Z(F0));
  ffsre2 \dac/r_Data_To_Send__i3 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  ffsre2 \dac/r_Data_To_Send__i4 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40009 ( input A, B, C, D, output Z );

  LUT4 #("0xF0F0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_25 ( input DI1, DI0, A1, C0, CE, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40003 SLICE_25_K1( .A(A1), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40009 SLICE_25_K0( .A(GNDI), .B(GNDI), .C(C0), .D(GNDI), .Z(F0));
  ffsre2 \dac/r_Data_To_Send__i1 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  ffsre2 \dac/r_Data_To_Send__i2 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module dac_SLICE_27 ( input DI1, DI0, C1, D0, A0, CE, LSR, CLK, output Q0, Q1, 
    F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40010 \dac/i953_1_lut ( .A(GNDI), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40011 \dac/i955_2_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \dac/Current_Bit_242__i0 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  ffsre2 \dac/Current_Bit_242__i1 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40010 ( input A, B, C, D, output Z );

  LUT4 #("0x0F0F") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40011 ( input A, B, C, D, output Z );

  LUT4 #("0x55AA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dac_SLICE_31 ( input DI1, DI0, D1, C1, B1, A1, C0, B0, A0, CE, LSR, CLK, 
    output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40012 \dac/i969_2_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40013 \dac/i962_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \dac/Current_Bit_242__i3 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  ffsre2 \dac/Current_Bit_242__i2 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40012 ( input A, B, C, D, output Z );

  LUT4 #("0x6AAA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40013 ( input A, B, C, D, output Z );

  LUT4 #("0x7878") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_34 ( input DI1, DI0, D1, D0, CE, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40008 SLICE_34_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40007 SLICE_34_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \dac/r_Data_To_Send__i15 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  ffsre2 \dac/r_Data_To_Send__i16 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module dac_SLICE_35 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, B0, A0, CE, LSR, 
    CLK, output Q0, Q1, F0, F1 );
  wire   DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40014 \dac/i1499_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40015 \dac/i1_2_lut_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 \dac/SM_DAC_Out_i2 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  ffsre2 \dac/SM_DAC_Out_i1 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40014 ( input A, B, C, D, output Z );

  LUT4 #("0x0100") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40015 ( input A, B, C, D, output Z );

  LUT4 #("0x2000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_39 ( input DI0, D0, CE, LSR, CLK, output Q0, F0 );
  wire   GNDI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40007 SLICE_39_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre20016 \dac/o_SPI_CS ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module ffsre20016 ( input D0, SP, CK, LSR, output Q );

  FD1P3XZ INST01( .D(D0), .SP(SP), .CK(CK), .SR(LSR), .Q(Q));
  defparam INST01.REGSET = "SET";
  defparam INST01.SRMODE = "CE_OVER_LSR";
endmodule

module SLICE_43 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, B0, A0, CLK, output 
    Q0, Q1, F0, F1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40017 i686_3_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40018 i687_3_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 DAC_Data__i10( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 DAC_Data__i9( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40017 ( input A, B, C, D, output Z );

  LUT4 #("0xEA2A") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40018 ( input A, B, C, D, output Z );

  LUT4 #("0xF870") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_45 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, B0, A0, CLK, output 
    Q0, Q1, F0, F1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40019 i684_3_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40020 i685_3_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 DAC_Data__i12( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 DAC_Data__i11( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40019 ( input A, B, C, D, output Z );

  LUT4 #("0xF870") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40020 ( input A, B, C, D, output Z );

  LUT4 #("0xEC4C") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_47 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, B0, A0, CLK, output 
    Q0, Q1, F0, F1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40021 i682_3_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40022 i683_3_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 DAC_Data__i14( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 DAC_Data__i13( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40021 ( input A, B, C, D, output Z );

  LUT4 #("0xBF80") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40022 ( input A, B, C, D, output Z );

  LUT4 #("0xD8F0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_49 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, B0, A0, CLK, output 
    Q0, Q1, F0, F1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40021 i680_3_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40023 i681_3_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 DAC_Data__i16( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 DAC_Data__i15( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40023 ( input A, B, C, D, output Z );

  LUT4 #("0xE4CC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_51 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, B0, A0, CLK, output 
    Q0, Q1, F0, F1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut4 i668_3_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40001 i679_3_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 DAC_Data__i3( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 DAC_Data__i4( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_52 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, B0, A0, CLK, output 
    Q0, Q1, F0, F1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40021 i676_3_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40024 i677_3_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 DAC_Data__i6( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 DAC_Data__i5( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40024 ( input A, B, C, D, output Z );

  LUT4 #("0xF870") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_54 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, B0, A0, CLK, output 
    Q0, Q1, F0, F1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40021 i671_3_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40022 i672_3_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 DAC_Data__i2( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 DAC_Data__i1( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module adc_SLICE_61 ( input DI1, DI0, D1, C1, B1, A1, D0, B0, A0, CE, LSR, CLK, 
    output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40025 \adc/i344_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40026 \adc/i337_2_lut_3_lut ( .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \adc/Receive_Byte_i0_i3 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  ffsre2 \adc/Receive_Byte_i0_i2 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40025 ( input A, B, C, D, output Z );

  LUT4 #("0x7F80") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40026 ( input A, B, C, D, output Z );

  LUT4 #("0x7788") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module adc_SLICE_62 ( input DI1, DI0, D1, C1, B0, CE, LSR, CLK, output Q0, Q1, 
    F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40027 \adc/i991_2_lut ( .A(GNDI), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40028 \adc/i989_1_lut ( .A(GNDI), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  ffsre2 \adc/Count_Stable_241__i1 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  ffsre2 \adc/Count_Stable_241__i0 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40027 ( input A, B, C, D, output Z );

  LUT4 #("0x0FF0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40028 ( input A, B, C, D, output Z );

  LUT4 #("0x3333") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module adc_SLICE_63 ( input DI1, DI0, D1, C1, B0, CE, LSR, CLK, output Q0, Q1, 
    F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40027 \adc/i330_2_lut ( .A(GNDI), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40028 \adc/i328_1_lut ( .A(GNDI), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  ffsre2 \adc/Receive_Byte_i0_i1 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  ffsre2 \adc/Receive_Byte_i0_i0 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module adc_SLICE_65 ( input DI0, C0, B0, A0, CE, LSR, CLK, output Q0, F0 );
  wire   GNDI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40029 \adc/i998_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \adc/Count_Stable_241__i2 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40029 ( input A, B, C, D, output Z );

  LUT4 #("0x6A6A") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module adc_SLICE_68 ( input DI0, A0, CE, LSR, CLK, output Q0, F0 );
  wire   GNDI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40002 \adc/i884_1_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre20016 \adc/Receive_Bit_i0_i0 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module adc_SLICE_69 ( input DI1, DI0, D1, A1, C0, B0, A0, CE, LSR, CLK, 
    output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40030 \adc/i301_2_lut ( .A(A1), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40013 \adc/i308_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  ffsre2 \adc/Receive_Bit_i0_i1 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  ffsre2 \adc/Receive_Bit_i0_i2 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40030 ( input A, B, C, D, output Z );

  LUT4 #("0x55AA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module adc_SLICE_71 ( input DI0, D0, C0, B0, A0, CE, LSR, CLK, output Q0, F0 );
  wire   DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40031 \adc/i315_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 \adc/Receive_Bit_i0_i3 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40031 ( input A, B, C, D, output Z );

  LUT4 #("0x6CCC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dac_SLICE_76 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40032 \dac/i1452_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40033 \dac/i8998_i1_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40032 ( input A, B, C, D, output Z );

  LUT4 #("0xE2F0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40033 ( input A, B, C, D, output Z );

  LUT4 #("0xE4F0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dac_SLICE_77 ( input D1, C1, B1, A1, D0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40034 \dac/i1379_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40035 \dac/i1378_3_lut ( .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40034 ( input A, B, C, D, output Z );

  LUT4 #("0xE2C0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40035 ( input A, B, C, D, output Z );

  LUT4 #("0xDD88") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dac_SLICE_78 ( input D0, C0, B0, A0, output F0 );

  lut40036 \dac/i1453_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40036 ( input A, B, C, D, output Z );

  LUT4 #("0x7430") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dac_SLICE_80 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40037 \dac/i4_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40038 \dac/i2_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40037 ( input A, B, C, D, output Z );

  LUT4 #("0x0020") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40038 ( input A, B, C, D, output Z );

  LUT4 #("0x20C0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dac_SLICE_81 ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40039 \dac/i661_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40040 \dac/i2_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40039 ( input A, B, C, D, output Z );

  LUT4 #("0xFD00") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40040 ( input A, B, C, D, output Z );

  LUT4 #("0xEEEE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dac_SLICE_82 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40041 \dac/n2286_bdd_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40042 \dac/Current_Bit[0]_bdd_4_lut_49 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40041 ( input A, B, C, D, output Z );

  LUT4 #("0xF2C2") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40042 ( input A, B, C, D, output Z );

  LUT4 #("0xF588") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dac_SLICE_84 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40041 \dac/n2292_bdd_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40043 \dac/Current_Bit[0]_bdd_4_lut_50 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40043 ( input A, B, C, D, output Z );

  LUT4 #("0xBBC0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dac_SLICE_86 ( input C1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40044 i1493_2_lut( .A(A1), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40045 \dac/i238_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40044 ( input A, B, C, D, output Z );

  LUT4 #("0x5F5F") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40045 ( input A, B, C, D, output Z );

  LUT4 #("0x7333") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dac_SLICE_87 ( input DI1, D1, C1, B1, A1, D0, C0, B0, A0, CLK, output 
    Q1, F0, F1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly;

  lut40046 i1490_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40047 \dac/i2_4_lut_adj_229 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 \dac/SM_DAC_Out_i0 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
  endspecify

endmodule

module lut40046 ( input A, B, C, D, output Z );

  LUT4 #("0x8BFF") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40047 ( input A, B, C, D, output Z );

  LUT4 #("0x0016") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dac_SLICE_88 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40048 \dac/i1_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40049 \dac/i1_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40048 ( input A, B, C, D, output Z );

  LUT4 #("0xBBFB") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40049 ( input A, B, C, D, output Z );

  LUT4 #("0x1212") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dac_SLICE_90 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40050 \dac/n2298_bdd_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40051 \dac/Current_Bit[0]_bdd_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40050 ( input A, B, C, D, output Z );

  LUT4 #("0xF0CA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40051 ( input A, B, C, D, output Z );

  LUT4 #("0xAFC0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_92 ( input C1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40052 i1361_2_lut( .A(A1), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40053 \dac/i1_4_lut_4_lut_adj_226 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40052 ( input A, B, C, D, output Z );

  LUT4 #("0xA0A0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40053 ( input A, B, C, D, output Z );

  LUT4 #("0x0116") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_93 ( input D1, C1, B1, A1, D0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40054 i1496_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40055 i1_2_lut_4_lut( .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40054 ( input A, B, C, D, output Z );

  LUT4 #("0xDD5D") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40055 ( input A, B, C, D, output Z );

  LUT4 #("0xFFDD") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dac_SLICE_94 ( input D1, C1, B1, A1, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40056 \dac/i4_4_lut_adj_231 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40057 \dac/i807_2_lut ( .A(A0), .B(GNDI), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40056 ( input A, B, C, D, output Z );

  LUT4 #("0x0200") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40057 ( input A, B, C, D, output Z );

  LUT4 #("0xFAFA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dac_SLICE_96 ( input C1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40010 reset_n_I_0_1_lut( .A(GNDI), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40058 \dac/i1_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40058 ( input A, B, C, D, output Z );

  LUT4 #("0xFF5D") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dac_SLICE_98 ( input D1, C1, B1, A1, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40059 \dac/i2_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40060 \dac/i44_2_lut ( .A(A0), .B(GNDI), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40059 ( input A, B, C, D, output Z );

  LUT4 #("0x3373") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40060 ( input A, B, C, D, output Z );

  LUT4 #("0x5A5A") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dac_SLICE_100 ( input D1, C1, B1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40061 \dac/i1353_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40062 \dac/i3_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40061 ( input A, B, C, D, output Z );

  LUT4 #("0xFE00") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40062 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dac_SLICE_102 ( input D1, C1, B1, A1, D0, B0, output F0, F1 );
  wire   GNDI;

  lut40063 \dac/i394_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40064 \dac/i1363_2_lut ( .A(GNDI), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40063 ( input A, B, C, D, output Z );

  LUT4 #("0x7747") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40064 ( input A, B, C, D, output Z );

  LUT4 #("0xCC00") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dac_SLICE_104 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40065 \dac/i1487_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40066 \dac/i1_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40065 ( input A, B, C, D, output Z );

  LUT4 #("0x333B") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40066 ( input A, B, C, D, output Z );

  LUT4 #("0x0455") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dac_SLICE_105 ( input DI1, D1, C1, B1, A1, D0, C0, B0, A0, CE, LSR, CLK, 
    output Q1, F0, F1 );
  wire   DI1_dly, CLK_dly, CE_dly, LSR_dly;

  lut40067 \dac/i2_3_lut_4_lut_adj_230 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40068 \dac.i228_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 \dac/SM_DAC_Out_i3 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40067 ( input A, B, C, D, output Z );

  LUT4 #("0x0002") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40068 ( input A, B, C, D, output Z );

  LUT4 #("0x0002") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dac_SLICE_107 ( input DI1, D1, C1, B1, A1, D0, B0, A0, CE, LSR, CLK, 
    output Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, CE_dly, LSR_dly;

  lut40069 \dac/i2_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40070 \dac/i1_2_lut_3_lut_adj_228 ( .A(A0), .B(B0), .C(GNDI), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \dac/o_SPI_Data ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40069 ( input A, B, C, D, output Z );

  LUT4 #("0x1000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40070 ( input A, B, C, D, output Z );

  LUT4 #("0x1100") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_108 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40071 i9_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40072 i7_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40071 ( input A, B, C, D, output Z );

  LUT4 #("0x1000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40072 ( input A, B, C, D, output Z );

  LUT4 #("0x0004") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_109 ( input C0, A0, output F0 );
  wire   GNDI;

  lut40073 i248_2_lut( .A(A0), .B(GNDI), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40073 ( input A, B, C, D, output Z );

  LUT4 #("0xF5F5") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module adc_SLICE_110 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40074 \adc/i1480_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40075 \adc/i3_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40074 ( input A, B, C, D, output Z );

  LUT4 #("0x00D5") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40075 ( input A, B, C, D, output Z );

  LUT4 #("0xFEFF") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module adc_SLICE_111 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40076 \adc.i664_3_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40077 \adc/i3_4_lut_adj_224 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40076 ( input A, B, C, D, output Z );

  LUT4 #("0x0073") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40077 ( input A, B, C, D, output Z );

  LUT4 #("0x8000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module adc_SLICE_112 ( input D1, C1, B1, A1, D0, C0, output F0, F1 );
  wire   GNDI;

  lut40078 \adc/i2_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40079 \adc/i_SPI_CS_I_0_2_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40078 ( input A, B, C, D, output Z );

  LUT4 #("0xFBFE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40079 ( input A, B, C, D, output Z );

  LUT4 #("0x0FF0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module adc_SLICE_113 ( input D1, C1, B1, D0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40080 \adc/i2_3_lut ( .A(GNDI), .B(B1), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40081 \adc/i2_3_lut_adj_225 ( .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40080 ( input A, B, C, D, output Z );

  LUT4 #("0x0300") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40081 ( input A, B, C, D, output Z );

  LUT4 #("0xEEFF") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module adc_SLICE_116 ( input D1, B1, D0, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40082 \adc/i665_2_lut ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40083 \adc/i1502_3_lut ( .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40082 ( input A, B, C, D, output Z );

  LUT4 #("0xCC00") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40083 ( input A, B, C, D, output Z );

  LUT4 #("0x05FF") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dac_SLICE_119 ( input DI1, D1, C1, B1, A1, D0, C0, B0, A0, CE, LSR, CLK, 
    output Q1, F0, F1 );
  wire   DI1_dly, CLK_dly, CE_dly, LSR_dly;

  lut40084 \dac/i3_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40085 \dac/i1_4_lut_adj_227 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre20016 \dac/o_Ready ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40084 ( input A, B, C, D, output Z );

  LUT4 #("0x0080") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40085 ( input A, B, C, D, output Z );

  LUT4 #("0xFF9D") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module adc_SLICE_120 ( input DI1, D1, C1, B1, A1, D0, B0, CLK, output Q1, F0, 
    F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly;

  lut40086 i675_4_lut_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40087 \adc/i797_2_lut ( .A(GNDI), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \adc/o_Data_Received ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
  endspecify

endmodule

module lut40086 ( input A, B, C, D, output Z );

  LUT4 #("0xEE04") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40087 ( input A, B, C, D, output Z );

  LUT4 #("0xFF33") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module adc_SLICE_121 ( input DI1, C1, B1, A1, D0, B0, A0, LSR, CLK, output Q1, 
    F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, LSR_dly;

  lut40088 \adc/i1504_2_lut_3_lut ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40089 \adc/i1_3_lut ( .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  ffsre20090 \adc/SM_ADC_In_c ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40088 ( input A, B, C, D, output Z );

  LUT4 #("0xBFBF") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40089 ( input A, B, C, D, output Z );

  LUT4 #("0x3311") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module ffsre20090 ( input D0, SP, CK, LSR, output Q );

  FD1P3XZ INST01( .D(D0), .SP(SP), .CK(CK), .SR(LSR), .Q(Q));
  defparam INST01.REGSET = "RESET";
  defparam INST01.SRMODE = "ASYNC";
endmodule

module adc_SLICE_124 ( input DI1, D1, B0, A0, CE, CLK, output Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, CE_dly;

  lut40008 \adc.SLICE_124_K1 ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40091 \adc/i_SPI_Clock_I_0_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  ffsre2 \adc/Clock_Stable_c ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40091 ( input A, B, C, D, output Z );

  LUT4 #("0x6666") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module adc_SLICE_125 ( input DI1, C1, D0, C0, B0, CE, CLK, output Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, CE_dly;

  lut40006 \adc.SLICE_125_K1 ( .A(GNDI), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40092 \adc/i411_2_lut_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 \adc/Data_State_c ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40092 ( input A, B, C, D, output Z );

  LUT4 #("0x0CC0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_126 ( output F0 );
  wire   GNDI;

  lut40093 i2( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module lut40093 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFF") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dac_SLICE_128 ( input DI1, D1, C1, D0, C0, A0, CLK, output Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly;

  lut40094 i678_2_lut( .A(GNDI), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40095 \dac/i1_2_lut_3_lut ( .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  ffsre2 \dac/Clock_Counter_c ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
  endspecify

endmodule

module lut40094 ( input A, B, C, D, output Z );

  LUT4 #("0x00F0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40095 ( input A, B, C, D, output Z );

  LUT4 #("0xA000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dac_SLICE_129 ( input DI1, D1, B1, D0, A0, CLK, output Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly;

  lut40082 \dac.SLICE_129_K1 ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40096 \dac/i196_2_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 DAC_Send_c( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
  endspecify

endmodule

module lut40096 ( input A, B, C, D, output Z );

  LUT4 #("0xAA00") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dac_SLICE_130 ( input D0, C0, B0, output F0 );
  wire   GNDI;

  lut40097 \dac/i8935_i1_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40097 ( input A, B, C, D, output Z );

  LUT4 #("0xF3C0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dac_SLICE_131 ( input D1, B1, D0, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40098 \dac/i1447_2_lut ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40099 \dac/i965_2_lut_3_lut ( .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40098 ( input A, B, C, D, output Z );

  LUT4 #("0xFF33") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40099 ( input A, B, C, D, output Z );

  LUT4 #("0xA000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dac_SLICE_132 ( input D0, C0, B0, output F0 );
  wire   GNDI;

  lut40097 \dac/i1377_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module dac_SLICE_134 ( input DI1, D1, C1, A1, D0, B0, A0, CE, LSR, CLK, 
    output Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, CE_dly, LSR_dly;

  lut40100 \dac/i976_3_lut ( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40101 \dac/i1_3_lut_3_lut ( .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \dac/Current_Bit_242__i4 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40100 ( input A, B, C, D, output Z );

  LUT4 #("0x5FA0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40101 ( input A, B, C, D, output Z );

  LUT4 #("0xDDFF") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_139 ( input D0, C0, B0, A0, output F0 );

  lut40102 i6_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40102 ( input A, B, C, D, output Z );

  LUT4 #("0x2000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_140 ( output F0 );
  wire   GNDI;

  lut40103 i1( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module lut40103 ( input A, B, C, D, output Z );

  LUT4 #("0x0000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module adc_SLICE_141 ( input DI1, D1, C0, B0, A0, CE, CLK, output Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, CE_dly;

  lut40008 \adc.SLICE_141_K1 ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40104 \adc/i405_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  ffsre2 \adc/Clock_State_c ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40104 ( input A, B, C, D, output Z );

  LUT4 #("0x6060") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module adc_SLICE_142 ( input C0, A0, output F0 );
  wire   GNDI;

  lut40105 \adc/i1484_2_lut ( .A(A0), .B(GNDI), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40105 ( input A, B, C, D, output Z );

  LUT4 #("0x0505") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module adc_SLICE_143 ( input DI1, B1, D0, C0, A0, CE, CLK, output Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, CE_dly;

  lut40005 \adc.SLICE_143_K1 ( .A(GNDI), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40106 \adc/i403_2_lut_3_lut ( .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  ffsre2 \adc/CS_State_c ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40106 ( input A, B, C, D, output Z );

  LUT4 #("0x5A00") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module adc_SLICE_144 ( input DI1, C1, B0, CE, LSR, CLK, output Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, CE_dly, LSR_dly;

  lut40006 \adc.SLICE_144_K1 ( .A(GNDI), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40028 \adc/i257_1_lut ( .A(GNDI), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  ffsre20016 \adc/CS_Stable_c ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module pll_48_lscc_pll_inst_u_PLL_B ( input REFERENCECLK, FEEDBACK, RESET_N, 
    output INTFBOUT, OUTCORE );
  wire   GNDI;

  PLL_B_B \pll_48/lscc_pll_inst/u_PLL_B ( .REFERENCECLK(REFERENCECLK), 
    .FEEDBACK(FEEDBACK), .DYNAMICDELAY7(GNDI), .DYNAMICDELAY6(GNDI), 
    .DYNAMICDELAY5(GNDI), .DYNAMICDELAY4(GNDI), .DYNAMICDELAY3(GNDI), 
    .DYNAMICDELAY2(GNDI), .DYNAMICDELAY1(GNDI), .DYNAMICDELAY0(GNDI), 
    .BYPASS(GNDI), .RESET_N(RESET_N), .SCLK(GNDI), .SDI(GNDI), .LATCH(GNDI), 
    .INTFBOUT(INTFBOUT), .OUTCORE(OUTCORE), .OUTGLOBAL(), .OUTCOREB(), 
    .OUTGLOBALB(), .SDO(), .LOCK());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (REFERENCECLK => OUTCORE) = (0:0:0,0:0:0);
  endspecify

endmodule

module PLL_B_B ( input REFERENCECLK, FEEDBACK, DYNAMICDELAY7, DYNAMICDELAY6, 
    DYNAMICDELAY5, DYNAMICDELAY4, DYNAMICDELAY3, DYNAMICDELAY2, DYNAMICDELAY1, 
    DYNAMICDELAY0, BYPASS, RESET_N, SCLK, SDI, LATCH, output INTFBOUT, OUTCORE, 
    OUTGLOBAL, OUTCOREB, OUTGLOBALB, SDO, LOCK );

  PLL_B INST10( .REFERENCECLK(REFERENCECLK), .FEEDBACK(FEEDBACK), 
    .DYNAMICDELAY7(DYNAMICDELAY7), .DYNAMICDELAY6(DYNAMICDELAY6), 
    .DYNAMICDELAY5(DYNAMICDELAY5), .DYNAMICDELAY4(DYNAMICDELAY4), 
    .DYNAMICDELAY3(DYNAMICDELAY3), .DYNAMICDELAY2(DYNAMICDELAY2), 
    .DYNAMICDELAY1(DYNAMICDELAY1), .DYNAMICDELAY0(DYNAMICDELAY0), 
    .BYPASS(BYPASS), .RESET_N(RESET_N), .SCLK(SCLK), .SDI(SDI), .LATCH(LATCH), 
    .INTFBOUT(INTFBOUT), .OUTCORE(OUTCORE), .OUTGLOBAL(OUTGLOBAL), 
    .OUTCOREB(OUTCOREB), .OUTGLOBALB(OUTGLOBALB), .SDO(SDO), .LOCK(LOCK));
  defparam INST10.DELAY_ADJUSTMENT_MODE_FEEDBACK = "FIXED";
  defparam INST10.DELAY_ADJUSTMENT_MODE_RELATIVE = "FIXED";
  defparam INST10.DIVF = "63";
  defparam INST10.DIVQ = "4";
  defparam INST10.DIVR = "0";
  defparam INST10.ENABLE_ICEGATE_PORTA = "0";
  defparam INST10.ENABLE_ICEGATE_PORTB = "0";
  defparam INST10.FDA_FEEDBACK = "0";
  defparam INST10.FDA_RELATIVE = "0";
  defparam INST10.FEEDBACK_PATH = "SIMPLE";
  defparam INST10.FILTER_RANGE = "1";
  defparam INST10.PLLOUT_SELECT_PORTA = "GENCLK";
  defparam INST10.PLLOUT_SELECT_PORTB = "GENCLK";
  defparam INST10.SHIFTREG_DIV_MODE = "0";
  defparam INST10.TEST_MODE = "0";
  defparam INST10.EXTERNAL_DIVIDE_FACTOR = "NONE";
  defparam INST10.FREQUENCY_PIN_REFERENCECLK = "12.000000";
endmodule

module reset_n ( output PADDI, input reset_n );
  wire   GNDI;

  BB_B_B \dac/reset_n_pad.bb_inst ( .T_N(GNDI), .I(GNDI), .O(PADDI), 
    .B(reset_n));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (reset_n => PADDI) = (0:0:0,0:0:0);
  endspecify

endmodule

module BB_B_B ( input T_N, I, output O, inout B );

  BB_B INST10( .T_N(T_N), .I(I), .O(O), .B(B));
endmodule

module i_ADC_CS ( output PADDI, input i_ADC_CS );
  wire   GNDI;

  BB_B_B \adc/i_ADC_CS_pad.bb_inst ( .T_N(GNDI), .I(GNDI), .O(PADDI), 
    .B(i_ADC_CS));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (i_ADC_CS => PADDI) = (0:0:0,0:0:0);
  endspecify

endmodule

module 
  ___lscc_rom_inst_u_rom_PRIM_MODE_xADDR_0__xDATA_7__mem_file_mem0_iCE40UP_sp4k
   ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, RADDR5, RADDR4, RADDR3, 
    RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, WADDR7, WADDR6, WADDR5, 
    WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, RCLKE, RCLK, RE, WCLKE, WCLK, 
    output RDATA11, RDATA3 );
  wire   GNDI, RADDR10_dly, RCLK_dly, RADDR9_dly, RADDR8_dly, RADDR7_dly, 
         RADDR6_dly, RADDR5_dly, RADDR4_dly, RADDR3_dly, RADDR2_dly, 
         RADDR1_dly, RADDR0_dly, WADDR10_dly, WCLK_dly, WADDR9_dly, WADDR8_dly, 
         WADDR7_dly, WADDR6_dly, WADDR5_dly, WADDR4_dly, WADDR3_dly, 
         WADDR2_dly, WADDR1_dly, WADDR0_dly, RCLKE_dly, RE_dly, WCLKE_dly;

  EBR_B_B 
    \__/lscc_rom_inst/u_rom/PRIM_MODE.xADDR[0].xDATA[7].mem_file.mem0/iCE40UP.sp4k 
    ( .RADDR10(RADDR10_dly), .RADDR9(RADDR9_dly), .RADDR8(RADDR8_dly), 
    .RADDR7(RADDR7_dly), .RADDR6(RADDR6_dly), .RADDR5(RADDR5_dly), 
    .RADDR4(RADDR4_dly), .RADDR3(RADDR3_dly), .RADDR2(RADDR2_dly), 
    .RADDR1(RADDR1_dly), .RADDR0(RADDR0_dly), .WADDR10(WADDR10_dly), 
    .WADDR9(WADDR9_dly), .WADDR8(WADDR8_dly), .WADDR7(WADDR7_dly), 
    .WADDR6(WADDR6_dly), .WADDR5(WADDR5_dly), .WADDR4(WADDR4_dly), 
    .WADDR3(WADDR3_dly), .WADDR2(WADDR2_dly), .WADDR1(WADDR1_dly), 
    .WADDR0(WADDR0_dly), .MASK_N15(GNDI), .MASK_N14(GNDI), .MASK_N13(GNDI), 
    .MASK_N12(GNDI), .MASK_N11(GNDI), .MASK_N10(GNDI), .MASK_N9(GNDI), 
    .MASK_N8(GNDI), .MASK_N7(GNDI), .MASK_N6(GNDI), .MASK_N5(GNDI), 
    .MASK_N4(GNDI), .MASK_N3(GNDI), .MASK_N2(GNDI), .MASK_N1(GNDI), 
    .MASK_N0(GNDI), .WDATA15(GNDI), .WDATA14(GNDI), .WDATA13(GNDI), 
    .WDATA12(GNDI), .WDATA11(GNDI), .WDATA10(GNDI), .WDATA9(GNDI), 
    .WDATA8(GNDI), .WDATA7(GNDI), .WDATA6(GNDI), .WDATA5(GNDI), .WDATA4(GNDI), 
    .WDATA3(GNDI), .WDATA2(GNDI), .WDATA1(GNDI), .WDATA0(GNDI), 
    .RCLKE(RCLKE_dly), .RCLK(RCLK_dly), .RE(RE_dly), .WCLKE(WCLKE_dly), 
    .WCLK(WCLK_dly), .WE(GNDI), .RDATA15(), .RDATA14(), .RDATA13(), .RDATA12(), 
    .RDATA11(RDATA11), .RDATA10(), .RDATA9(), .RDATA8(), .RDATA7(), .RDATA6(), 
    .RDATA5(), .RDATA4(), .RDATA3(RDATA3), .RDATA2(), .RDATA1(), .RDATA0());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (RCLK => RDATA11) = (0:0:0,0:0:0);
    (RCLK => RDATA3) = (0:0:0,0:0:0);
    $setuphold 
      (posedge RCLK, RADDR10, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR10_dly);
    $setuphold (posedge RCLK, RADDR9, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR9_dly);
    $setuphold (posedge RCLK, RADDR8, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR8_dly);
    $setuphold (posedge RCLK, RADDR7, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR7_dly);
    $setuphold (posedge RCLK, RADDR6, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR6_dly);
    $setuphold (posedge RCLK, RADDR5, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR5_dly);
    $setuphold (posedge RCLK, RADDR4, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR4_dly);
    $setuphold (posedge RCLK, RADDR3, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR3_dly);
    $setuphold (posedge RCLK, RADDR2, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR2_dly);
    $setuphold (posedge RCLK, RADDR1, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR1_dly);
    $setuphold (posedge RCLK, RADDR0, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR0_dly);
    $setuphold 
      (posedge WCLK, WADDR10, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR10_dly);
    $setuphold (posedge WCLK, WADDR9, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR9_dly);
    $setuphold (posedge WCLK, WADDR8, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR8_dly);
    $setuphold (posedge WCLK, WADDR7, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR7_dly);
    $setuphold (posedge WCLK, WADDR6, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR6_dly);
    $setuphold (posedge WCLK, WADDR5, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR5_dly);
    $setuphold (posedge WCLK, WADDR4, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR4_dly);
    $setuphold (posedge WCLK, WADDR3, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR3_dly);
    $setuphold (posedge WCLK, WADDR2, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR2_dly);
    $setuphold (posedge WCLK, WADDR1, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR1_dly);
    $setuphold (posedge WCLK, WADDR0, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR0_dly);
    $setuphold (posedge RCLK, RCLKE, 0:0:0, 0:0:0,,,, RCLK_dly, RCLKE_dly);
    $setuphold (posedge RCLK, RE, 0:0:0, 0:0:0,,,, RCLK_dly, RE_dly);
    $setuphold (posedge WCLK, WCLKE, 0:0:0, 0:0:0,,,, WCLK_dly, WCLKE_dly);
    $width (posedge RCLK, 0:0:0);
    $width (negedge RCLK, 0:0:0);
    $width (posedge WCLK, 0:0:0);
    $width (negedge WCLK, 0:0:0);
  endspecify

endmodule

module EBR_B_B ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, RADDR5, RADDR4, 
    RADDR3, RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, WADDR7, WADDR6, 
    WADDR5, WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, MASK_N15, MASK_N14, 
    MASK_N13, MASK_N12, MASK_N11, MASK_N10, MASK_N9, MASK_N8, MASK_N7, MASK_N6, 
    MASK_N5, MASK_N4, MASK_N3, MASK_N2, MASK_N1, MASK_N0, WDATA15, WDATA14, 
    WDATA13, WDATA12, WDATA11, WDATA10, WDATA9, WDATA8, WDATA7, WDATA6, WDATA5, 
    WDATA4, WDATA3, WDATA2, WDATA1, WDATA0, RCLKE, RCLK, RE, WCLKE, WCLK, WE, 
    output RDATA15, RDATA14, RDATA13, RDATA12, RDATA11, RDATA10, RDATA9, 
    RDATA8, RDATA7, RDATA6, RDATA5, RDATA4, RDATA3, RDATA2, RDATA1, RDATA0 );

  EBR_B INST10( .RADDR10(RADDR10), .RADDR9(RADDR9), .RADDR8(RADDR8), 
    .RADDR7(RADDR7), .RADDR6(RADDR6), .RADDR5(RADDR5), .RADDR4(RADDR4), 
    .RADDR3(RADDR3), .RADDR2(RADDR2), .RADDR1(RADDR1), .RADDR0(RADDR0), 
    .WADDR10(WADDR10), .WADDR9(WADDR9), .WADDR8(WADDR8), .WADDR7(WADDR7), 
    .WADDR6(WADDR6), .WADDR5(WADDR5), .WADDR4(WADDR4), .WADDR3(WADDR3), 
    .WADDR2(WADDR2), .WADDR1(WADDR1), .WADDR0(WADDR0), .MASK_N15(MASK_N15), 
    .MASK_N14(MASK_N14), .MASK_N13(MASK_N13), .MASK_N12(MASK_N12), 
    .MASK_N11(MASK_N11), .MASK_N10(MASK_N10), .MASK_N9(MASK_N9), 
    .MASK_N8(MASK_N8), .MASK_N7(MASK_N7), .MASK_N6(MASK_N6), .MASK_N5(MASK_N5), 
    .MASK_N4(MASK_N4), .MASK_N3(MASK_N3), .MASK_N2(MASK_N2), .MASK_N1(MASK_N1), 
    .MASK_N0(MASK_N0), .WDATA15(WDATA15), .WDATA14(WDATA14), .WDATA13(WDATA13), 
    .WDATA12(WDATA12), .WDATA11(WDATA11), .WDATA10(WDATA10), .WDATA9(WDATA9), 
    .WDATA8(WDATA8), .WDATA7(WDATA7), .WDATA6(WDATA6), .WDATA5(WDATA5), 
    .WDATA4(WDATA4), .WDATA3(WDATA3), .WDATA2(WDATA2), .WDATA1(WDATA1), 
    .WDATA0(WDATA0), .RCLKE(RCLKE), .RCLK(RCLK), .RE(RE), .WCLKE(WCLKE), 
    .WCLK(WCLK), .WE(WE), .RDATA15(RDATA15), .RDATA14(RDATA14), 
    .RDATA13(RDATA13), .RDATA12(RDATA12), .RDATA11(RDATA11), .RDATA10(RDATA10), 
    .RDATA9(RDATA9), .RDATA8(RDATA8), .RDATA7(RDATA7), .RDATA6(RDATA6), 
    .RDATA5(RDATA5), .RDATA4(RDATA4), .RDATA3(RDATA3), .RDATA2(RDATA2), 
    .RDATA1(RDATA1), .RDATA0(RDATA0));
  defparam INST10.DATA_WIDTH_R = "2";
  defparam INST10.DATA_WIDTH_W = "2";

    defparam INST10.INIT_0 = "0xF01EF01EF01EF01EF01EF01EF01EF01EF01EF01EF01EF01EF01EF01EF01EE00E";

    defparam INST10.INIT_1 = "0xF01EF01EF01EF01EF01EF01EF01EF01EF01EF01EF01EF01EF01EF01EF01EF01E";

    defparam INST10.INIT_2 = "0xF01EF01EF01EF01EF01EF01EF01EF01EF01EF01EF01EF01EF01EF01EF01EF01E";

    defparam INST10.INIT_3 = "0xF01EF01EF01EF01EF01EF01EF01EF01EF01EF01EF01EF01EF01EF01EF01EF01E";

    defparam INST10.INIT_4 = "0xF01EF01EF01EF01EF01EF01EF01EF01EF01EF01EF01EF01EF01EF01EF01EF01E";

    defparam INST10.INIT_5 = "0xF096F096F096F096F096F096F096F096F096F096F01EF01EF01EF01EF01EF01E";

    defparam INST10.INIT_6 = "0xF096F096F096F096F096F096F096F096F096F096F096F096F096F096F096F096";

    defparam INST10.INIT_7 = "0xF096F096F096F096F096F096F096F096F096F096F096F096F096F096F096F096";

    defparam INST10.INIT_8 = "0xF096F096F096F096F096F096F096F096F096F096F096F096F096F096F096F096";

    defparam INST10.INIT_9 = "0xF096F096F096F096F096F096F096F096F096F096F096F096F096F096F096F096";

    defparam INST10.INIT_A = "0xF087F087F087F087F087F096F096F096F096F096F096F096F096F096F096F096";

    defparam INST10.INIT_B = "0xF087F087F087F087F087F087F087F087F087F087F087F087F087F087F087F087";

    defparam INST10.INIT_C = "0xF087F087F087F087F087F087F087F087F087F087F087F087F087F087F087F087";

    defparam INST10.INIT_D = "0xF087F087F087F087F087F087F087F087F087F087F087F087F087F087F087F087";

    defparam INST10.INIT_E = "0xF087F087F087F087F087F087F087F087F087F087F087F087F087F087F087F087";

    defparam INST10.INIT_F = "0xF087F087F087F087F087F087F087F087F087F087F087F087F087F087F087F087";
endmodule

module 
  ___lscc_rom_inst_u_rom_PRIM_MODE_xADDR_0__xDATA_6__mem_file_mem0_iCE40UP_sp4k
   ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, RADDR5, RADDR4, RADDR3, 
    RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, WADDR7, WADDR6, WADDR5, 
    WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, RCLKE, RCLK, RE, WCLKE, WCLK, 
    output RDATA11, RDATA3 );
  wire   GNDI, RADDR10_dly, RCLK_dly, RADDR9_dly, RADDR8_dly, RADDR7_dly, 
         RADDR6_dly, RADDR5_dly, RADDR4_dly, RADDR3_dly, RADDR2_dly, 
         RADDR1_dly, RADDR0_dly, WADDR10_dly, WCLK_dly, WADDR9_dly, WADDR8_dly, 
         WADDR7_dly, WADDR6_dly, WADDR5_dly, WADDR4_dly, WADDR3_dly, 
         WADDR2_dly, WADDR1_dly, WADDR0_dly, RCLKE_dly, RE_dly, WCLKE_dly;

  EBR_B0107 
    \__/lscc_rom_inst/u_rom/PRIM_MODE.xADDR[0].xDATA[6].mem_file.mem0/iCE40UP.sp4k 
    ( .RADDR10(RADDR10_dly), .RADDR9(RADDR9_dly), .RADDR8(RADDR8_dly), 
    .RADDR7(RADDR7_dly), .RADDR6(RADDR6_dly), .RADDR5(RADDR5_dly), 
    .RADDR4(RADDR4_dly), .RADDR3(RADDR3_dly), .RADDR2(RADDR2_dly), 
    .RADDR1(RADDR1_dly), .RADDR0(RADDR0_dly), .WADDR10(WADDR10_dly), 
    .WADDR9(WADDR9_dly), .WADDR8(WADDR8_dly), .WADDR7(WADDR7_dly), 
    .WADDR6(WADDR6_dly), .WADDR5(WADDR5_dly), .WADDR4(WADDR4_dly), 
    .WADDR3(WADDR3_dly), .WADDR2(WADDR2_dly), .WADDR1(WADDR1_dly), 
    .WADDR0(WADDR0_dly), .MASK_N15(GNDI), .MASK_N14(GNDI), .MASK_N13(GNDI), 
    .MASK_N12(GNDI), .MASK_N11(GNDI), .MASK_N10(GNDI), .MASK_N9(GNDI), 
    .MASK_N8(GNDI), .MASK_N7(GNDI), .MASK_N6(GNDI), .MASK_N5(GNDI), 
    .MASK_N4(GNDI), .MASK_N3(GNDI), .MASK_N2(GNDI), .MASK_N1(GNDI), 
    .MASK_N0(GNDI), .WDATA15(GNDI), .WDATA14(GNDI), .WDATA13(GNDI), 
    .WDATA12(GNDI), .WDATA11(GNDI), .WDATA10(GNDI), .WDATA9(GNDI), 
    .WDATA8(GNDI), .WDATA7(GNDI), .WDATA6(GNDI), .WDATA5(GNDI), .WDATA4(GNDI), 
    .WDATA3(GNDI), .WDATA2(GNDI), .WDATA1(GNDI), .WDATA0(GNDI), 
    .RCLKE(RCLKE_dly), .RCLK(RCLK_dly), .RE(RE_dly), .WCLKE(WCLKE_dly), 
    .WCLK(WCLK_dly), .WE(GNDI), .RDATA15(), .RDATA14(), .RDATA13(), .RDATA12(), 
    .RDATA11(RDATA11), .RDATA10(), .RDATA9(), .RDATA8(), .RDATA7(), .RDATA6(), 
    .RDATA5(), .RDATA4(), .RDATA3(RDATA3), .RDATA2(), .RDATA1(), .RDATA0());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (RCLK => RDATA11) = (0:0:0,0:0:0);
    (RCLK => RDATA3) = (0:0:0,0:0:0);
    $setuphold 
      (posedge RCLK, RADDR10, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR10_dly);
    $setuphold (posedge RCLK, RADDR9, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR9_dly);
    $setuphold (posedge RCLK, RADDR8, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR8_dly);
    $setuphold (posedge RCLK, RADDR7, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR7_dly);
    $setuphold (posedge RCLK, RADDR6, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR6_dly);
    $setuphold (posedge RCLK, RADDR5, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR5_dly);
    $setuphold (posedge RCLK, RADDR4, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR4_dly);
    $setuphold (posedge RCLK, RADDR3, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR3_dly);
    $setuphold (posedge RCLK, RADDR2, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR2_dly);
    $setuphold (posedge RCLK, RADDR1, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR1_dly);
    $setuphold (posedge RCLK, RADDR0, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR0_dly);
    $setuphold 
      (posedge WCLK, WADDR10, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR10_dly);
    $setuphold (posedge WCLK, WADDR9, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR9_dly);
    $setuphold (posedge WCLK, WADDR8, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR8_dly);
    $setuphold (posedge WCLK, WADDR7, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR7_dly);
    $setuphold (posedge WCLK, WADDR6, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR6_dly);
    $setuphold (posedge WCLK, WADDR5, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR5_dly);
    $setuphold (posedge WCLK, WADDR4, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR4_dly);
    $setuphold (posedge WCLK, WADDR3, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR3_dly);
    $setuphold (posedge WCLK, WADDR2, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR2_dly);
    $setuphold (posedge WCLK, WADDR1, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR1_dly);
    $setuphold (posedge WCLK, WADDR0, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR0_dly);
    $setuphold (posedge RCLK, RCLKE, 0:0:0, 0:0:0,,,, RCLK_dly, RCLKE_dly);
    $setuphold (posedge RCLK, RE, 0:0:0, 0:0:0,,,, RCLK_dly, RE_dly);
    $setuphold (posedge WCLK, WCLKE, 0:0:0, 0:0:0,,,, WCLK_dly, WCLKE_dly);
    $width (posedge RCLK, 0:0:0);
    $width (negedge RCLK, 0:0:0);
    $width (posedge WCLK, 0:0:0);
    $width (negedge WCLK, 0:0:0);
  endspecify

endmodule

module EBR_B0107 ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, RADDR5, 
    RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, WADDR7, 
    WADDR6, WADDR5, WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, MASK_N15, MASK_N14, 
    MASK_N13, MASK_N12, MASK_N11, MASK_N10, MASK_N9, MASK_N8, MASK_N7, MASK_N6, 
    MASK_N5, MASK_N4, MASK_N3, MASK_N2, MASK_N1, MASK_N0, WDATA15, WDATA14, 
    WDATA13, WDATA12, WDATA11, WDATA10, WDATA9, WDATA8, WDATA7, WDATA6, WDATA5, 
    WDATA4, WDATA3, WDATA2, WDATA1, WDATA0, RCLKE, RCLK, RE, WCLKE, WCLK, WE, 
    output RDATA15, RDATA14, RDATA13, RDATA12, RDATA11, RDATA10, RDATA9, 
    RDATA8, RDATA7, RDATA6, RDATA5, RDATA4, RDATA3, RDATA2, RDATA1, RDATA0 );

  EBR_B INST10( .RADDR10(RADDR10), .RADDR9(RADDR9), .RADDR8(RADDR8), 
    .RADDR7(RADDR7), .RADDR6(RADDR6), .RADDR5(RADDR5), .RADDR4(RADDR4), 
    .RADDR3(RADDR3), .RADDR2(RADDR2), .RADDR1(RADDR1), .RADDR0(RADDR0), 
    .WADDR10(WADDR10), .WADDR9(WADDR9), .WADDR8(WADDR8), .WADDR7(WADDR7), 
    .WADDR6(WADDR6), .WADDR5(WADDR5), .WADDR4(WADDR4), .WADDR3(WADDR3), 
    .WADDR2(WADDR2), .WADDR1(WADDR1), .WADDR0(WADDR0), .MASK_N15(MASK_N15), 
    .MASK_N14(MASK_N14), .MASK_N13(MASK_N13), .MASK_N12(MASK_N12), 
    .MASK_N11(MASK_N11), .MASK_N10(MASK_N10), .MASK_N9(MASK_N9), 
    .MASK_N8(MASK_N8), .MASK_N7(MASK_N7), .MASK_N6(MASK_N6), .MASK_N5(MASK_N5), 
    .MASK_N4(MASK_N4), .MASK_N3(MASK_N3), .MASK_N2(MASK_N2), .MASK_N1(MASK_N1), 
    .MASK_N0(MASK_N0), .WDATA15(WDATA15), .WDATA14(WDATA14), .WDATA13(WDATA13), 
    .WDATA12(WDATA12), .WDATA11(WDATA11), .WDATA10(WDATA10), .WDATA9(WDATA9), 
    .WDATA8(WDATA8), .WDATA7(WDATA7), .WDATA6(WDATA6), .WDATA5(WDATA5), 
    .WDATA4(WDATA4), .WDATA3(WDATA3), .WDATA2(WDATA2), .WDATA1(WDATA1), 
    .WDATA0(WDATA0), .RCLKE(RCLKE), .RCLK(RCLK), .RE(RE), .WCLKE(WCLKE), 
    .WCLK(WCLK), .WE(WE), .RDATA15(RDATA15), .RDATA14(RDATA14), 
    .RDATA13(RDATA13), .RDATA12(RDATA12), .RDATA11(RDATA11), .RDATA10(RDATA10), 
    .RDATA9(RDATA9), .RDATA8(RDATA8), .RDATA7(RDATA7), .RDATA6(RDATA6), 
    .RDATA5(RDATA5), .RDATA4(RDATA4), .RDATA3(RDATA3), .RDATA2(RDATA2), 
    .RDATA1(RDATA1), .RDATA0(RDATA0));
  defparam INST10.DATA_WIDTH_R = "2";
  defparam INST10.DATA_WIDTH_W = "2";

    defparam INST10.INIT_0 = "0xB41EB41EB41EB41EB41EB41EB41EB41EB41EB41EB41EB41EB41EB41EB41EA40E";

    defparam INST10.INIT_1 = "0x963C963C963C963C963C963C963C963C963C963C963CB41EB41EB41EB41EB41E";

    defparam INST10.INIT_2 = "0x96A596A596A596A596A596A596A596B496B496B496B496B4963C963C963C963C";

    defparam INST10.INIT_3 = "0x96A596A596A596A596A596A596A596A596A596A596A596A596A596A596A596A5";

    defparam INST10.INIT_4 = "0x96A596A596A596A596A596A596A596A596A596A596A596A596A596A596A596A5";

    defparam INST10.INIT_5 = "0x0F1E0F1E0F1E0F1E0F3C0F3C0F3C0F3C0F3C0F3C87B487B487B496A596A596A5";

    defparam INST10.INIT_6 = "0x0F1E0F1E0F1E0F1E0F1E0F1E0F1E0F1E0F1E0F1E0F1E0F1E0F1E0F1E0F1E0F1E";

    defparam INST10.INIT_7 = "0x0F0F0F0F0F1E0F1E0F1E0F1E0F1E0F1E0F1E0F1E0F1E0F1E0F1E0F1E0F1E0F1E";

    defparam INST10.INIT_8 = "0x0F870F870F870F870F870F870F870F870F870F870F870F870F870F0F0F0F0F0F";

    defparam INST10.INIT_9 = "0x0F870F870F870F870F870F870F870F870F870F870F870F870F870F870F870F87";

    defparam INST10.INIT_A = "0x965A965A1ED21ED21ED20FC30FC30FC30FC30FC30FC30F870F870F870F870F87";

    defparam INST10.INIT_B = "0x965A965A965A965A965A965A965A965A965A965A965A965A965A965A965A965A";

    defparam INST10.INIT_C = "0x965A965A965A965A965A965A965A965A965A965A965A965A965A965A965A965A";

    defparam INST10.INIT_D = "0x96C396C396C396D296D296D296D296D2965A965A965A965A965A965A965A965A";

    defparam INST10.INIT_E = "0xD287D287D287D28796C396C396C396C396C396C396C396C396C396C396C396C3";

    defparam INST10.INIT_F = "0xD287D287D287D287D287D287D287D287D287D287D287D287D287D287D287D287";
endmodule

module 
  ___lscc_rom_inst_u_rom_PRIM_MODE_xADDR_0__xDATA_5__mem_file_mem0_iCE40UP_sp4k
   ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, RADDR5, RADDR4, RADDR3, 
    RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, WADDR7, WADDR6, WADDR5, 
    WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, RCLKE, RCLK, RE, WCLKE, WCLK, 
    output RDATA11, RDATA3 );
  wire   GNDI, RADDR10_dly, RCLK_dly, RADDR9_dly, RADDR8_dly, RADDR7_dly, 
         RADDR6_dly, RADDR5_dly, RADDR4_dly, RADDR3_dly, RADDR2_dly, 
         RADDR1_dly, RADDR0_dly, WADDR10_dly, WCLK_dly, WADDR9_dly, WADDR8_dly, 
         WADDR7_dly, WADDR6_dly, WADDR5_dly, WADDR4_dly, WADDR3_dly, 
         WADDR2_dly, WADDR1_dly, WADDR0_dly, RCLKE_dly, RE_dly, WCLKE_dly;

  EBR_B0108 
    \__/lscc_rom_inst/u_rom/PRIM_MODE.xADDR[0].xDATA[5].mem_file.mem0/iCE40UP.sp4k 
    ( .RADDR10(RADDR10_dly), .RADDR9(RADDR9_dly), .RADDR8(RADDR8_dly), 
    .RADDR7(RADDR7_dly), .RADDR6(RADDR6_dly), .RADDR5(RADDR5_dly), 
    .RADDR4(RADDR4_dly), .RADDR3(RADDR3_dly), .RADDR2(RADDR2_dly), 
    .RADDR1(RADDR1_dly), .RADDR0(RADDR0_dly), .WADDR10(WADDR10_dly), 
    .WADDR9(WADDR9_dly), .WADDR8(WADDR8_dly), .WADDR7(WADDR7_dly), 
    .WADDR6(WADDR6_dly), .WADDR5(WADDR5_dly), .WADDR4(WADDR4_dly), 
    .WADDR3(WADDR3_dly), .WADDR2(WADDR2_dly), .WADDR1(WADDR1_dly), 
    .WADDR0(WADDR0_dly), .MASK_N15(GNDI), .MASK_N14(GNDI), .MASK_N13(GNDI), 
    .MASK_N12(GNDI), .MASK_N11(GNDI), .MASK_N10(GNDI), .MASK_N9(GNDI), 
    .MASK_N8(GNDI), .MASK_N7(GNDI), .MASK_N6(GNDI), .MASK_N5(GNDI), 
    .MASK_N4(GNDI), .MASK_N3(GNDI), .MASK_N2(GNDI), .MASK_N1(GNDI), 
    .MASK_N0(GNDI), .WDATA15(GNDI), .WDATA14(GNDI), .WDATA13(GNDI), 
    .WDATA12(GNDI), .WDATA11(GNDI), .WDATA10(GNDI), .WDATA9(GNDI), 
    .WDATA8(GNDI), .WDATA7(GNDI), .WDATA6(GNDI), .WDATA5(GNDI), .WDATA4(GNDI), 
    .WDATA3(GNDI), .WDATA2(GNDI), .WDATA1(GNDI), .WDATA0(GNDI), 
    .RCLKE(RCLKE_dly), .RCLK(RCLK_dly), .RE(RE_dly), .WCLKE(WCLKE_dly), 
    .WCLK(WCLK_dly), .WE(GNDI), .RDATA15(), .RDATA14(), .RDATA13(), .RDATA12(), 
    .RDATA11(RDATA11), .RDATA10(), .RDATA9(), .RDATA8(), .RDATA7(), .RDATA6(), 
    .RDATA5(), .RDATA4(), .RDATA3(RDATA3), .RDATA2(), .RDATA1(), .RDATA0());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (RCLK => RDATA11) = (0:0:0,0:0:0);
    (RCLK => RDATA3) = (0:0:0,0:0:0);
    $setuphold 
      (posedge RCLK, RADDR10, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR10_dly);
    $setuphold (posedge RCLK, RADDR9, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR9_dly);
    $setuphold (posedge RCLK, RADDR8, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR8_dly);
    $setuphold (posedge RCLK, RADDR7, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR7_dly);
    $setuphold (posedge RCLK, RADDR6, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR6_dly);
    $setuphold (posedge RCLK, RADDR5, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR5_dly);
    $setuphold (posedge RCLK, RADDR4, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR4_dly);
    $setuphold (posedge RCLK, RADDR3, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR3_dly);
    $setuphold (posedge RCLK, RADDR2, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR2_dly);
    $setuphold (posedge RCLK, RADDR1, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR1_dly);
    $setuphold (posedge RCLK, RADDR0, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR0_dly);
    $setuphold 
      (posedge WCLK, WADDR10, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR10_dly);
    $setuphold (posedge WCLK, WADDR9, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR9_dly);
    $setuphold (posedge WCLK, WADDR8, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR8_dly);
    $setuphold (posedge WCLK, WADDR7, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR7_dly);
    $setuphold (posedge WCLK, WADDR6, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR6_dly);
    $setuphold (posedge WCLK, WADDR5, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR5_dly);
    $setuphold (posedge WCLK, WADDR4, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR4_dly);
    $setuphold (posedge WCLK, WADDR3, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR3_dly);
    $setuphold (posedge WCLK, WADDR2, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR2_dly);
    $setuphold (posedge WCLK, WADDR1, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR1_dly);
    $setuphold (posedge WCLK, WADDR0, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR0_dly);
    $setuphold (posedge RCLK, RCLKE, 0:0:0, 0:0:0,,,, RCLK_dly, RCLKE_dly);
    $setuphold (posedge RCLK, RE, 0:0:0, 0:0:0,,,, RCLK_dly, RE_dly);
    $setuphold (posedge WCLK, WCLKE, 0:0:0, 0:0:0,,,, WCLK_dly, WCLKE_dly);
    $width (posedge RCLK, 0:0:0);
    $width (negedge RCLK, 0:0:0);
    $width (posedge WCLK, 0:0:0);
    $width (negedge WCLK, 0:0:0);
  endspecify

endmodule

module EBR_B0108 ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, RADDR5, 
    RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, WADDR7, 
    WADDR6, WADDR5, WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, MASK_N15, MASK_N14, 
    MASK_N13, MASK_N12, MASK_N11, MASK_N10, MASK_N9, MASK_N8, MASK_N7, MASK_N6, 
    MASK_N5, MASK_N4, MASK_N3, MASK_N2, MASK_N1, MASK_N0, WDATA15, WDATA14, 
    WDATA13, WDATA12, WDATA11, WDATA10, WDATA9, WDATA8, WDATA7, WDATA6, WDATA5, 
    WDATA4, WDATA3, WDATA2, WDATA1, WDATA0, RCLKE, RCLK, RE, WCLKE, WCLK, WE, 
    output RDATA15, RDATA14, RDATA13, RDATA12, RDATA11, RDATA10, RDATA9, 
    RDATA8, RDATA7, RDATA6, RDATA5, RDATA4, RDATA3, RDATA2, RDATA1, RDATA0 );

  EBR_B INST10( .RADDR10(RADDR10), .RADDR9(RADDR9), .RADDR8(RADDR8), 
    .RADDR7(RADDR7), .RADDR6(RADDR6), .RADDR5(RADDR5), .RADDR4(RADDR4), 
    .RADDR3(RADDR3), .RADDR2(RADDR2), .RADDR1(RADDR1), .RADDR0(RADDR0), 
    .WADDR10(WADDR10), .WADDR9(WADDR9), .WADDR8(WADDR8), .WADDR7(WADDR7), 
    .WADDR6(WADDR6), .WADDR5(WADDR5), .WADDR4(WADDR4), .WADDR3(WADDR3), 
    .WADDR2(WADDR2), .WADDR1(WADDR1), .WADDR0(WADDR0), .MASK_N15(MASK_N15), 
    .MASK_N14(MASK_N14), .MASK_N13(MASK_N13), .MASK_N12(MASK_N12), 
    .MASK_N11(MASK_N11), .MASK_N10(MASK_N10), .MASK_N9(MASK_N9), 
    .MASK_N8(MASK_N8), .MASK_N7(MASK_N7), .MASK_N6(MASK_N6), .MASK_N5(MASK_N5), 
    .MASK_N4(MASK_N4), .MASK_N3(MASK_N3), .MASK_N2(MASK_N2), .MASK_N1(MASK_N1), 
    .MASK_N0(MASK_N0), .WDATA15(WDATA15), .WDATA14(WDATA14), .WDATA13(WDATA13), 
    .WDATA12(WDATA12), .WDATA11(WDATA11), .WDATA10(WDATA10), .WDATA9(WDATA9), 
    .WDATA8(WDATA8), .WDATA7(WDATA7), .WDATA6(WDATA6), .WDATA5(WDATA5), 
    .WDATA4(WDATA4), .WDATA3(WDATA3), .WDATA2(WDATA2), .WDATA1(WDATA1), 
    .WDATA0(WDATA0), .RCLKE(RCLKE), .RCLK(RCLK), .RE(RE), .WCLKE(WCLKE), 
    .WCLK(WCLK), .WE(WE), .RDATA15(RDATA15), .RDATA14(RDATA14), 
    .RDATA13(RDATA13), .RDATA12(RDATA12), .RDATA11(RDATA11), .RDATA10(RDATA10), 
    .RDATA9(RDATA9), .RDATA8(RDATA8), .RDATA7(RDATA7), .RDATA6(RDATA6), 
    .RDATA5(RDATA5), .RDATA4(RDATA4), .RDATA3(RDATA3), .RDATA2(RDATA2), 
    .RDATA1(RDATA1), .RDATA0(RDATA0));
  defparam INST10.DATA_WIDTH_R = "2";
  defparam INST10.DATA_WIDTH_W = "2";

    defparam INST10.INIT_0 = "0x960F960F960F960F960F961E961E1E961E961E961EB41EB41EB41EB41EB40EA4";

    defparam INST10.INIT_1 = "0xA5A5A5B4A5B4A5B4A5B4A5B4A5B4A5B4A5B4A53CA53C960F960F960F960F960F";

    defparam INST10.INIT_2 = "0x3C1E3C1E3C1E3C1E3C1E3C1E3C1E2D0F2D0F2D0F2D0F2D2DA5A5A5A5A5A5A5A5";

    defparam INST10.INIT_3 = "0x873C873C1EA51EA51EA51EA51EA51EA51EA51EA53C873C873C963C963C963C1E";

    defparam INST10.INIT_4 = "0x878787878787878787878787870F870F873C873C873C873C873C873C873C873C";

    defparam INST10.INIT_5 = "0x3C693C693C693C781E5A1E5A1E5A1E5A1E5A1E5A96D296D296D287C387878787";

    defparam INST10.INIT_6 = "0xA578A578A5782DF02DF02DF02DF02DF03CE13CE13CE13CE13CE13CE13CE13C69";

    defparam INST10.INIT_7 = "0xF096F096E187E187E187E187E187E187E10FE10FE10FE10FA54BA55AA578A578";

    defparam INST10.INIT_8 = "0x5AE15AA55A2D780F780F780F780F781E781E781E781E781E781EF096F096F096";

    defparam INST10.INIT_9 = "0xC378C378C378C378C378C378C3784BF04BF04BF04BF04BF05AE15AE15AE15AE1";

    defparam INST10.INIT_A = "0x1E1E1E3C96B496B496B487A587A587A587A587A587A5C3E1C369C369C369C369";

    defparam INST10.INIT_B = "0x1EC31EC31EC31EC31EC31EC31EC31E0F1E0F1E1E1E1E1E1E1E1E1E1E1E1E1E1E";

    defparam INST10.INIT_C = "0xC396C396C396C31EC31E875A875A875A875A875A875A875A875A1EC31EC31EC3";

    defparam INST10.INIT_D = "0x5A5A5A5A5A5A4B4B4B0F4B0F4B0F4B0FC387C387C387C387C387C387C387C387";

    defparam INST10.INIT_E = "0x960F960F960F960F5AC35AC35AD25AD25AD25AD25AD25AD25AD25AD25A5A5A5A";

    defparam INST10.INIT_F = "0x87D287D287D287D287D287968796879696879687960F960F960F960F960F960F";
endmodule

module 
  ___lscc_rom_inst_u_rom_PRIM_MODE_xADDR_0__xDATA_4__mem_file_mem0_iCE40UP_sp4k
   ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, RADDR5, RADDR4, RADDR3, 
    RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, WADDR7, WADDR6, WADDR5, 
    WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, RCLKE, RCLK, RE, WCLKE, WCLK, 
    output RDATA11, RDATA3 );
  wire   GNDI, RADDR10_dly, RCLK_dly, RADDR9_dly, RADDR8_dly, RADDR7_dly, 
         RADDR6_dly, RADDR5_dly, RADDR4_dly, RADDR3_dly, RADDR2_dly, 
         RADDR1_dly, RADDR0_dly, WADDR10_dly, WCLK_dly, WADDR9_dly, WADDR8_dly, 
         WADDR7_dly, WADDR6_dly, WADDR5_dly, WADDR4_dly, WADDR3_dly, 
         WADDR2_dly, WADDR1_dly, WADDR0_dly, RCLKE_dly, RE_dly, WCLKE_dly;

  EBR_B0109 
    \__/lscc_rom_inst/u_rom/PRIM_MODE.xADDR[0].xDATA[4].mem_file.mem0/iCE40UP.sp4k 
    ( .RADDR10(RADDR10_dly), .RADDR9(RADDR9_dly), .RADDR8(RADDR8_dly), 
    .RADDR7(RADDR7_dly), .RADDR6(RADDR6_dly), .RADDR5(RADDR5_dly), 
    .RADDR4(RADDR4_dly), .RADDR3(RADDR3_dly), .RADDR2(RADDR2_dly), 
    .RADDR1(RADDR1_dly), .RADDR0(RADDR0_dly), .WADDR10(WADDR10_dly), 
    .WADDR9(WADDR9_dly), .WADDR8(WADDR8_dly), .WADDR7(WADDR7_dly), 
    .WADDR6(WADDR6_dly), .WADDR5(WADDR5_dly), .WADDR4(WADDR4_dly), 
    .WADDR3(WADDR3_dly), .WADDR2(WADDR2_dly), .WADDR1(WADDR1_dly), 
    .WADDR0(WADDR0_dly), .MASK_N15(GNDI), .MASK_N14(GNDI), .MASK_N13(GNDI), 
    .MASK_N12(GNDI), .MASK_N11(GNDI), .MASK_N10(GNDI), .MASK_N9(GNDI), 
    .MASK_N8(GNDI), .MASK_N7(GNDI), .MASK_N6(GNDI), .MASK_N5(GNDI), 
    .MASK_N4(GNDI), .MASK_N3(GNDI), .MASK_N2(GNDI), .MASK_N1(GNDI), 
    .MASK_N0(GNDI), .WDATA15(GNDI), .WDATA14(GNDI), .WDATA13(GNDI), 
    .WDATA12(GNDI), .WDATA11(GNDI), .WDATA10(GNDI), .WDATA9(GNDI), 
    .WDATA8(GNDI), .WDATA7(GNDI), .WDATA6(GNDI), .WDATA5(GNDI), .WDATA4(GNDI), 
    .WDATA3(GNDI), .WDATA2(GNDI), .WDATA1(GNDI), .WDATA0(GNDI), 
    .RCLKE(RCLKE_dly), .RCLK(RCLK_dly), .RE(RE_dly), .WCLKE(WCLKE_dly), 
    .WCLK(WCLK_dly), .WE(GNDI), .RDATA15(), .RDATA14(), .RDATA13(), .RDATA12(), 
    .RDATA11(RDATA11), .RDATA10(), .RDATA9(), .RDATA8(), .RDATA7(), .RDATA6(), 
    .RDATA5(), .RDATA4(), .RDATA3(RDATA3), .RDATA2(), .RDATA1(), .RDATA0());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (RCLK => RDATA11) = (0:0:0,0:0:0);
    (RCLK => RDATA3) = (0:0:0,0:0:0);
    $setuphold 
      (posedge RCLK, RADDR10, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR10_dly);
    $setuphold (posedge RCLK, RADDR9, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR9_dly);
    $setuphold (posedge RCLK, RADDR8, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR8_dly);
    $setuphold (posedge RCLK, RADDR7, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR7_dly);
    $setuphold (posedge RCLK, RADDR6, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR6_dly);
    $setuphold (posedge RCLK, RADDR5, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR5_dly);
    $setuphold (posedge RCLK, RADDR4, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR4_dly);
    $setuphold (posedge RCLK, RADDR3, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR3_dly);
    $setuphold (posedge RCLK, RADDR2, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR2_dly);
    $setuphold (posedge RCLK, RADDR1, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR1_dly);
    $setuphold (posedge RCLK, RADDR0, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR0_dly);
    $setuphold 
      (posedge WCLK, WADDR10, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR10_dly);
    $setuphold (posedge WCLK, WADDR9, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR9_dly);
    $setuphold (posedge WCLK, WADDR8, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR8_dly);
    $setuphold (posedge WCLK, WADDR7, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR7_dly);
    $setuphold (posedge WCLK, WADDR6, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR6_dly);
    $setuphold (posedge WCLK, WADDR5, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR5_dly);
    $setuphold (posedge WCLK, WADDR4, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR4_dly);
    $setuphold (posedge WCLK, WADDR3, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR3_dly);
    $setuphold (posedge WCLK, WADDR2, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR2_dly);
    $setuphold (posedge WCLK, WADDR1, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR1_dly);
    $setuphold (posedge WCLK, WADDR0, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR0_dly);
    $setuphold (posedge RCLK, RCLKE, 0:0:0, 0:0:0,,,, RCLK_dly, RCLKE_dly);
    $setuphold (posedge RCLK, RE, 0:0:0, 0:0:0,,,, RCLK_dly, RE_dly);
    $setuphold (posedge WCLK, WCLKE, 0:0:0, 0:0:0,,,, WCLK_dly, WCLKE_dly);
    $width (posedge RCLK, 0:0:0);
    $width (negedge RCLK, 0:0:0);
    $width (posedge WCLK, 0:0:0);
    $width (negedge WCLK, 0:0:0);
  endspecify

endmodule

module EBR_B0109 ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, RADDR5, 
    RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, WADDR7, 
    WADDR6, WADDR5, WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, MASK_N15, MASK_N14, 
    MASK_N13, MASK_N12, MASK_N11, MASK_N10, MASK_N9, MASK_N8, MASK_N7, MASK_N6, 
    MASK_N5, MASK_N4, MASK_N3, MASK_N2, MASK_N1, MASK_N0, WDATA15, WDATA14, 
    WDATA13, WDATA12, WDATA11, WDATA10, WDATA9, WDATA8, WDATA7, WDATA6, WDATA5, 
    WDATA4, WDATA3, WDATA2, WDATA1, WDATA0, RCLKE, RCLK, RE, WCLKE, WCLK, WE, 
    output RDATA15, RDATA14, RDATA13, RDATA12, RDATA11, RDATA10, RDATA9, 
    RDATA8, RDATA7, RDATA6, RDATA5, RDATA4, RDATA3, RDATA2, RDATA1, RDATA0 );

  EBR_B INST10( .RADDR10(RADDR10), .RADDR9(RADDR9), .RADDR8(RADDR8), 
    .RADDR7(RADDR7), .RADDR6(RADDR6), .RADDR5(RADDR5), .RADDR4(RADDR4), 
    .RADDR3(RADDR3), .RADDR2(RADDR2), .RADDR1(RADDR1), .RADDR0(RADDR0), 
    .WADDR10(WADDR10), .WADDR9(WADDR9), .WADDR8(WADDR8), .WADDR7(WADDR7), 
    .WADDR6(WADDR6), .WADDR5(WADDR5), .WADDR4(WADDR4), .WADDR3(WADDR3), 
    .WADDR2(WADDR2), .WADDR1(WADDR1), .WADDR0(WADDR0), .MASK_N15(MASK_N15), 
    .MASK_N14(MASK_N14), .MASK_N13(MASK_N13), .MASK_N12(MASK_N12), 
    .MASK_N11(MASK_N11), .MASK_N10(MASK_N10), .MASK_N9(MASK_N9), 
    .MASK_N8(MASK_N8), .MASK_N7(MASK_N7), .MASK_N6(MASK_N6), .MASK_N5(MASK_N5), 
    .MASK_N4(MASK_N4), .MASK_N3(MASK_N3), .MASK_N2(MASK_N2), .MASK_N1(MASK_N1), 
    .MASK_N0(MASK_N0), .WDATA15(WDATA15), .WDATA14(WDATA14), .WDATA13(WDATA13), 
    .WDATA12(WDATA12), .WDATA11(WDATA11), .WDATA10(WDATA10), .WDATA9(WDATA9), 
    .WDATA8(WDATA8), .WDATA7(WDATA7), .WDATA6(WDATA6), .WDATA5(WDATA5), 
    .WDATA4(WDATA4), .WDATA3(WDATA3), .WDATA2(WDATA2), .WDATA1(WDATA1), 
    .WDATA0(WDATA0), .RCLKE(RCLKE), .RCLK(RCLK), .RE(RE), .WCLKE(WCLKE), 
    .WCLK(WCLK), .WE(WE), .RDATA15(RDATA15), .RDATA14(RDATA14), 
    .RDATA13(RDATA13), .RDATA12(RDATA12), .RDATA11(RDATA11), .RDATA10(RDATA10), 
    .RDATA9(RDATA9), .RDATA8(RDATA8), .RDATA7(RDATA7), .RDATA6(RDATA6), 
    .RDATA5(RDATA5), .RDATA4(RDATA4), .RDATA3(RDATA3), .RDATA2(RDATA2), 
    .RDATA1(RDATA1), .RDATA0(RDATA0));
  defparam INST10.DATA_WIDTH_R = "2";
  defparam INST10.DATA_WIDTH_W = "2";

    defparam INST10.INIT_0 = "0x1EA51EA51EA53C1E3C1E2D0F2D2DA5A5A5B4A5B4960F960F960F961E1EB40EA4";

    defparam INST10.INIT_1 = "0x963C872D0FA52D962D962D1E3C0F3C2D3C2DB4B4B4B48787870F870F871E873C";

    defparam INST10.INIT_2 = "0x87F087F09669B44BB45A3CD23CD22DA52D2D2D3C2D3C0F1E968796879696963C";

    defparam INST10.INIT_3 = "0x5A3C781EE187E187E187E11EA578B4693CE13CE11ED21ED20F4B0F4B0F4B87F0";

    defparam INST10.INIT_4 = "0x69D269D278C3786978697878F0F0F0F0C3C3C30FC31EC31E4B965AA55AA55A3C";

    defparam INST10.INIT_5 = "0xB4F0B478B478A5690F870F960F960F1E1E0F1E2D96B596B496B4872DE14BE14B";

    defparam INST10.INIT_6 = "0x4B5A4B5A4B5AD287D2A5D2B4D23CD23CC32D698769872DD22D5A3C4B3C4BB4E1";

    defparam INST10.INIT_7 = "0x9678B45A2DC32DC32DC32D1E2D1E2D1EB4A5B4A5B4B4B43CF07869E14BC34BC3";

    defparam INST10.INIT_8 = "0x2D3C6978F0E1D2C3D2D2D25AD25A4B874B874B874B3C4B3C4B3CD2A596E196F0";

    defparam INST10.INIT_9 = "0xC32DC32D4BA54BB4691E691E3C4BB4C3B4C3B4D2B45AB41E2DA52DA52DA52D3C";

    defparam INST10.INIT_A = "0x782D1E4B96D296D296DA874B870F0F870F960F960F1E5A69D2E1D2E1D2F0D278";

    defparam INST10.INIT_B = "0xA55AA55A2D963C873C873C0F3C3CF0F0F0F0E1E1E169E169E13C69B469B4782D";

    defparam INST10.INIT_C = "0x0F2D0F2D0F2D87B487B4C378C378D2695AE17887781E781E781EE187A5C3A5C3";

    defparam INST10.INIT_D = "0x9696961E961E0F874BC34BC34B4B4B5AC3B4C3B4D2A5D22D96691EF01EF01EF0";

    defparam INST10.INIT_E = "0x1E871E0F1E0F1E1ED2D2D2D2C34BC34BC30F4B874B964B960F5A1E4B96C396C3";

    defparam INST10.INIT_F = "0x87D29687960F960F960F5AD25AD25A5A4B4B4B0FC387C387875A875A875A1EC3";
endmodule

module 
  ___lscc_rom_inst_u_rom_PRIM_MODE_xADDR_0__xDATA_3__mem_file_mem0_iCE40UP_sp4k
   ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, RADDR5, RADDR4, RADDR3, 
    RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, WADDR7, WADDR6, WADDR5, 
    WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, RCLKE, RCLK, RE, WCLKE, WCLK, 
    output RDATA11, RDATA3 );
  wire   GNDI, RADDR10_dly, RCLK_dly, RADDR9_dly, RADDR8_dly, RADDR7_dly, 
         RADDR6_dly, RADDR5_dly, RADDR4_dly, RADDR3_dly, RADDR2_dly, 
         RADDR1_dly, RADDR0_dly, WADDR10_dly, WCLK_dly, WADDR9_dly, WADDR8_dly, 
         WADDR7_dly, WADDR6_dly, WADDR5_dly, WADDR4_dly, WADDR3_dly, 
         WADDR2_dly, WADDR1_dly, WADDR0_dly, RCLKE_dly, RE_dly, WCLKE_dly;

  EBR_B0110 
    \__/lscc_rom_inst/u_rom/PRIM_MODE.xADDR[0].xDATA[3].mem_file.mem0/iCE40UP.sp4k 
    ( .RADDR10(RADDR10_dly), .RADDR9(RADDR9_dly), .RADDR8(RADDR8_dly), 
    .RADDR7(RADDR7_dly), .RADDR6(RADDR6_dly), .RADDR5(RADDR5_dly), 
    .RADDR4(RADDR4_dly), .RADDR3(RADDR3_dly), .RADDR2(RADDR2_dly), 
    .RADDR1(RADDR1_dly), .RADDR0(RADDR0_dly), .WADDR10(WADDR10_dly), 
    .WADDR9(WADDR9_dly), .WADDR8(WADDR8_dly), .WADDR7(WADDR7_dly), 
    .WADDR6(WADDR6_dly), .WADDR5(WADDR5_dly), .WADDR4(WADDR4_dly), 
    .WADDR3(WADDR3_dly), .WADDR2(WADDR2_dly), .WADDR1(WADDR1_dly), 
    .WADDR0(WADDR0_dly), .MASK_N15(GNDI), .MASK_N14(GNDI), .MASK_N13(GNDI), 
    .MASK_N12(GNDI), .MASK_N11(GNDI), .MASK_N10(GNDI), .MASK_N9(GNDI), 
    .MASK_N8(GNDI), .MASK_N7(GNDI), .MASK_N6(GNDI), .MASK_N5(GNDI), 
    .MASK_N4(GNDI), .MASK_N3(GNDI), .MASK_N2(GNDI), .MASK_N1(GNDI), 
    .MASK_N0(GNDI), .WDATA15(GNDI), .WDATA14(GNDI), .WDATA13(GNDI), 
    .WDATA12(GNDI), .WDATA11(GNDI), .WDATA10(GNDI), .WDATA9(GNDI), 
    .WDATA8(GNDI), .WDATA7(GNDI), .WDATA6(GNDI), .WDATA5(GNDI), .WDATA4(GNDI), 
    .WDATA3(GNDI), .WDATA2(GNDI), .WDATA1(GNDI), .WDATA0(GNDI), 
    .RCLKE(RCLKE_dly), .RCLK(RCLK_dly), .RE(RE_dly), .WCLKE(WCLKE_dly), 
    .WCLK(WCLK_dly), .WE(GNDI), .RDATA15(), .RDATA14(), .RDATA13(), .RDATA12(), 
    .RDATA11(RDATA11), .RDATA10(), .RDATA9(), .RDATA8(), .RDATA7(), .RDATA6(), 
    .RDATA5(), .RDATA4(), .RDATA3(RDATA3), .RDATA2(), .RDATA1(), .RDATA0());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (RCLK => RDATA11) = (0:0:0,0:0:0);
    (RCLK => RDATA3) = (0:0:0,0:0:0);
    $setuphold 
      (posedge RCLK, RADDR10, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR10_dly);
    $setuphold (posedge RCLK, RADDR9, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR9_dly);
    $setuphold (posedge RCLK, RADDR8, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR8_dly);
    $setuphold (posedge RCLK, RADDR7, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR7_dly);
    $setuphold (posedge RCLK, RADDR6, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR6_dly);
    $setuphold (posedge RCLK, RADDR5, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR5_dly);
    $setuphold (posedge RCLK, RADDR4, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR4_dly);
    $setuphold (posedge RCLK, RADDR3, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR3_dly);
    $setuphold (posedge RCLK, RADDR2, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR2_dly);
    $setuphold (posedge RCLK, RADDR1, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR1_dly);
    $setuphold (posedge RCLK, RADDR0, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR0_dly);
    $setuphold 
      (posedge WCLK, WADDR10, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR10_dly);
    $setuphold (posedge WCLK, WADDR9, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR9_dly);
    $setuphold (posedge WCLK, WADDR8, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR8_dly);
    $setuphold (posedge WCLK, WADDR7, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR7_dly);
    $setuphold (posedge WCLK, WADDR6, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR6_dly);
    $setuphold (posedge WCLK, WADDR5, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR5_dly);
    $setuphold (posedge WCLK, WADDR4, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR4_dly);
    $setuphold (posedge WCLK, WADDR3, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR3_dly);
    $setuphold (posedge WCLK, WADDR2, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR2_dly);
    $setuphold (posedge WCLK, WADDR1, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR1_dly);
    $setuphold (posedge WCLK, WADDR0, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR0_dly);
    $setuphold (posedge RCLK, RCLKE, 0:0:0, 0:0:0,,,, RCLK_dly, RCLKE_dly);
    $setuphold (posedge RCLK, RE, 0:0:0, 0:0:0,,,, RCLK_dly, RE_dly);
    $setuphold (posedge WCLK, WCLKE, 0:0:0, 0:0:0,,,, WCLK_dly, WCLKE_dly);
    $width (posedge RCLK, 0:0:0);
    $width (negedge RCLK, 0:0:0);
    $width (posedge WCLK, 0:0:0);
    $width (negedge WCLK, 0:0:0);
  endspecify

endmodule

module EBR_B0110 ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, RADDR5, 
    RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, WADDR7, 
    WADDR6, WADDR5, WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, MASK_N15, MASK_N14, 
    MASK_N13, MASK_N12, MASK_N11, MASK_N10, MASK_N9, MASK_N8, MASK_N7, MASK_N6, 
    MASK_N5, MASK_N4, MASK_N3, MASK_N2, MASK_N1, MASK_N0, WDATA15, WDATA14, 
    WDATA13, WDATA12, WDATA11, WDATA10, WDATA9, WDATA8, WDATA7, WDATA6, WDATA5, 
    WDATA4, WDATA3, WDATA2, WDATA1, WDATA0, RCLKE, RCLK, RE, WCLKE, WCLK, WE, 
    output RDATA15, RDATA14, RDATA13, RDATA12, RDATA11, RDATA10, RDATA9, 
    RDATA8, RDATA7, RDATA6, RDATA5, RDATA4, RDATA3, RDATA2, RDATA1, RDATA0 );

  EBR_B INST10( .RADDR10(RADDR10), .RADDR9(RADDR9), .RADDR8(RADDR8), 
    .RADDR7(RADDR7), .RADDR6(RADDR6), .RADDR5(RADDR5), .RADDR4(RADDR4), 
    .RADDR3(RADDR3), .RADDR2(RADDR2), .RADDR1(RADDR1), .RADDR0(RADDR0), 
    .WADDR10(WADDR10), .WADDR9(WADDR9), .WADDR8(WADDR8), .WADDR7(WADDR7), 
    .WADDR6(WADDR6), .WADDR5(WADDR5), .WADDR4(WADDR4), .WADDR3(WADDR3), 
    .WADDR2(WADDR2), .WADDR1(WADDR1), .WADDR0(WADDR0), .MASK_N15(MASK_N15), 
    .MASK_N14(MASK_N14), .MASK_N13(MASK_N13), .MASK_N12(MASK_N12), 
    .MASK_N11(MASK_N11), .MASK_N10(MASK_N10), .MASK_N9(MASK_N9), 
    .MASK_N8(MASK_N8), .MASK_N7(MASK_N7), .MASK_N6(MASK_N6), .MASK_N5(MASK_N5), 
    .MASK_N4(MASK_N4), .MASK_N3(MASK_N3), .MASK_N2(MASK_N2), .MASK_N1(MASK_N1), 
    .MASK_N0(MASK_N0), .WDATA15(WDATA15), .WDATA14(WDATA14), .WDATA13(WDATA13), 
    .WDATA12(WDATA12), .WDATA11(WDATA11), .WDATA10(WDATA10), .WDATA9(WDATA9), 
    .WDATA8(WDATA8), .WDATA7(WDATA7), .WDATA6(WDATA6), .WDATA5(WDATA5), 
    .WDATA4(WDATA4), .WDATA3(WDATA3), .WDATA2(WDATA2), .WDATA1(WDATA1), 
    .WDATA0(WDATA0), .RCLKE(RCLKE), .RCLK(RCLK), .RE(RE), .WCLKE(WCLKE), 
    .WCLK(WCLK), .WE(WE), .RDATA15(RDATA15), .RDATA14(RDATA14), 
    .RDATA13(RDATA13), .RDATA12(RDATA12), .RDATA11(RDATA11), .RDATA10(RDATA10), 
    .RDATA9(RDATA9), .RDATA8(RDATA8), .RDATA7(RDATA7), .RDATA6(RDATA6), 
    .RDATA5(RDATA5), .RDATA4(RDATA4), .RDATA3(RDATA3), .RDATA2(RDATA2), 
    .RDATA1(RDATA1), .RDATA0(RDATA0));
  defparam INST10.DATA_WIDTH_R = "2";
  defparam INST10.DATA_WIDTH_W = "2";

    defparam INST10.INIT_0 = "0x87A53C873C3C8796962D2DA50F1E963C2D973C2D8787873C3C962D2D96870EA4";

    defparam INST10.INIT_1 = "0x5AB4690FF0A5874B0FF0B4D2A5691EC31E78A5D2B4780F0F96A5B41E2DB41E0F";

    defparam INST10.INIT_2 = "0x1EE13C5AA5B41E960F2DB487B43C4BD2D2E1E14B79E05A5AC33C7887692DC396";

    defparam INST10.INIT_3 = "0xA5781E5A8787962D3C96A5B4D24B4BE1F0C3F0784B965A2DC32D69963C7887C3";

    defparam INST10.INIT_4 = "0xC3B4F00F692D87D2965A0F69B487B43C0F1ED2E1C369695AF0B4C31E5A2DA5C3";

    defparam INST10.INIT_5 = "0x0FE196E1B41E2DB4D2C3C34B4BB4F096E12D1E4B86C2873C3C1EA5A5D24B5A5A";

    defparam INST10.INIT_6 = "0x87F1B40F3C3CE1F0D24B4B2DC3B43CD22D69968F1E964B78F04B69A7693CD21E";

    defparam INST10.INIT_7 = "0xE13C1EC387C3873C3C1EE1C378A5783C87D21EE10F2DA51E78F0E1E1D20F1EF0";

    defparam INST10.INIT_8 = "0xB40F7878E1F05A870F4B87781EB4E1C3E15A783CC3871EC31E3C873C78C3690F";

    defparam INST10.INIT_9 = "0x69C3695EF02D2DE18796961F4B69C3B43CD22D4BB42D78F0C3C3D20F1EF887F0";

    defparam INST10.INIT_A = "0xB42D5A5AC3871EC31634872D784BF0962DD23C2DB43C4BD2D28796780F78B487";

    defparam INST10.INIT_B = "0xA54B3C87F0D269A53C69B4780F87D2C3D21E0F6996A51EB4694BF00F3CD2A5A5";

    defparam INST10.INIT_C = "0xC3E169963C4BA54B2D96F0E1F03C2D78B42D5AD2C396964B1E1E87A55AE15A3C";

    defparam INST10.INIT_D = "0x694BE11E3CC3A5A5E970782DB4782DB4D2C3D21E0F4B87965AD2C3A587781E3C";

    defparam INST10.INIT_E = "0x4BD2D287965A0F0FD2E15AB487E1873C5A69D2B40FF01E2DF05A690FA5D23C96";

    defparam INST10.INIT_F = "0x961E4B4BC3961EC31E1EC34B4B9E96C30F874B5A964B1E96C3C3C31E1E5A870F";
endmodule

module 
  ___lscc_rom_inst_u_rom_PRIM_MODE_xADDR_0__xDATA_2__mem_file_mem0_iCE40UP_sp4k
   ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, RADDR5, RADDR4, RADDR3, 
    RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, WADDR7, WADDR6, WADDR5, 
    WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, RCLKE, RCLK, RE, WCLKE, WCLK, 
    output RDATA11, RDATA3 );
  wire   GNDI, RADDR10_dly, RCLK_dly, RADDR9_dly, RADDR8_dly, RADDR7_dly, 
         RADDR6_dly, RADDR5_dly, RADDR4_dly, RADDR3_dly, RADDR2_dly, 
         RADDR1_dly, RADDR0_dly, WADDR10_dly, WCLK_dly, WADDR9_dly, WADDR8_dly, 
         WADDR7_dly, WADDR6_dly, WADDR5_dly, WADDR4_dly, WADDR3_dly, 
         WADDR2_dly, WADDR1_dly, WADDR0_dly, RCLKE_dly, RE_dly, WCLKE_dly;

  EBR_B0111 
    \__/lscc_rom_inst/u_rom/PRIM_MODE.xADDR[0].xDATA[2].mem_file.mem0/iCE40UP.sp4k 
    ( .RADDR10(RADDR10_dly), .RADDR9(RADDR9_dly), .RADDR8(RADDR8_dly), 
    .RADDR7(RADDR7_dly), .RADDR6(RADDR6_dly), .RADDR5(RADDR5_dly), 
    .RADDR4(RADDR4_dly), .RADDR3(RADDR3_dly), .RADDR2(RADDR2_dly), 
    .RADDR1(RADDR1_dly), .RADDR0(RADDR0_dly), .WADDR10(WADDR10_dly), 
    .WADDR9(WADDR9_dly), .WADDR8(WADDR8_dly), .WADDR7(WADDR7_dly), 
    .WADDR6(WADDR6_dly), .WADDR5(WADDR5_dly), .WADDR4(WADDR4_dly), 
    .WADDR3(WADDR3_dly), .WADDR2(WADDR2_dly), .WADDR1(WADDR1_dly), 
    .WADDR0(WADDR0_dly), .MASK_N15(GNDI), .MASK_N14(GNDI), .MASK_N13(GNDI), 
    .MASK_N12(GNDI), .MASK_N11(GNDI), .MASK_N10(GNDI), .MASK_N9(GNDI), 
    .MASK_N8(GNDI), .MASK_N7(GNDI), .MASK_N6(GNDI), .MASK_N5(GNDI), 
    .MASK_N4(GNDI), .MASK_N3(GNDI), .MASK_N2(GNDI), .MASK_N1(GNDI), 
    .MASK_N0(GNDI), .WDATA15(GNDI), .WDATA14(GNDI), .WDATA13(GNDI), 
    .WDATA12(GNDI), .WDATA11(GNDI), .WDATA10(GNDI), .WDATA9(GNDI), 
    .WDATA8(GNDI), .WDATA7(GNDI), .WDATA6(GNDI), .WDATA5(GNDI), .WDATA4(GNDI), 
    .WDATA3(GNDI), .WDATA2(GNDI), .WDATA1(GNDI), .WDATA0(GNDI), 
    .RCLKE(RCLKE_dly), .RCLK(RCLK_dly), .RE(RE_dly), .WCLKE(WCLKE_dly), 
    .WCLK(WCLK_dly), .WE(GNDI), .RDATA15(), .RDATA14(), .RDATA13(), .RDATA12(), 
    .RDATA11(RDATA11), .RDATA10(), .RDATA9(), .RDATA8(), .RDATA7(), .RDATA6(), 
    .RDATA5(), .RDATA4(), .RDATA3(RDATA3), .RDATA2(), .RDATA1(), .RDATA0());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (RCLK => RDATA11) = (0:0:0,0:0:0);
    (RCLK => RDATA3) = (0:0:0,0:0:0);
    $setuphold 
      (posedge RCLK, RADDR10, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR10_dly);
    $setuphold (posedge RCLK, RADDR9, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR9_dly);
    $setuphold (posedge RCLK, RADDR8, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR8_dly);
    $setuphold (posedge RCLK, RADDR7, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR7_dly);
    $setuphold (posedge RCLK, RADDR6, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR6_dly);
    $setuphold (posedge RCLK, RADDR5, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR5_dly);
    $setuphold (posedge RCLK, RADDR4, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR4_dly);
    $setuphold (posedge RCLK, RADDR3, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR3_dly);
    $setuphold (posedge RCLK, RADDR2, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR2_dly);
    $setuphold (posedge RCLK, RADDR1, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR1_dly);
    $setuphold (posedge RCLK, RADDR0, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR0_dly);
    $setuphold 
      (posedge WCLK, WADDR10, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR10_dly);
    $setuphold (posedge WCLK, WADDR9, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR9_dly);
    $setuphold (posedge WCLK, WADDR8, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR8_dly);
    $setuphold (posedge WCLK, WADDR7, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR7_dly);
    $setuphold (posedge WCLK, WADDR6, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR6_dly);
    $setuphold (posedge WCLK, WADDR5, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR5_dly);
    $setuphold (posedge WCLK, WADDR4, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR4_dly);
    $setuphold (posedge WCLK, WADDR3, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR3_dly);
    $setuphold (posedge WCLK, WADDR2, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR2_dly);
    $setuphold (posedge WCLK, WADDR1, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR1_dly);
    $setuphold (posedge WCLK, WADDR0, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR0_dly);
    $setuphold (posedge RCLK, RCLKE, 0:0:0, 0:0:0,,,, RCLK_dly, RCLKE_dly);
    $setuphold (posedge RCLK, RE, 0:0:0, 0:0:0,,,, RCLK_dly, RE_dly);
    $setuphold (posedge WCLK, WCLKE, 0:0:0, 0:0:0,,,, WCLK_dly, WCLKE_dly);
    $width (posedge RCLK, 0:0:0);
    $width (negedge RCLK, 0:0:0);
    $width (posedge WCLK, 0:0:0);
    $width (negedge WCLK, 0:0:0);
  endspecify

endmodule

module EBR_B0111 ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, RADDR5, 
    RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, WADDR7, 
    WADDR6, WADDR5, WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, MASK_N15, MASK_N14, 
    MASK_N13, MASK_N12, MASK_N11, MASK_N10, MASK_N9, MASK_N8, MASK_N7, MASK_N6, 
    MASK_N5, MASK_N4, MASK_N3, MASK_N2, MASK_N1, MASK_N0, WDATA15, WDATA14, 
    WDATA13, WDATA12, WDATA11, WDATA10, WDATA9, WDATA8, WDATA7, WDATA6, WDATA5, 
    WDATA4, WDATA3, WDATA2, WDATA1, WDATA0, RCLKE, RCLK, RE, WCLKE, WCLK, WE, 
    output RDATA15, RDATA14, RDATA13, RDATA12, RDATA11, RDATA10, RDATA9, 
    RDATA8, RDATA7, RDATA6, RDATA5, RDATA4, RDATA3, RDATA2, RDATA1, RDATA0 );

  EBR_B INST10( .RADDR10(RADDR10), .RADDR9(RADDR9), .RADDR8(RADDR8), 
    .RADDR7(RADDR7), .RADDR6(RADDR6), .RADDR5(RADDR5), .RADDR4(RADDR4), 
    .RADDR3(RADDR3), .RADDR2(RADDR2), .RADDR1(RADDR1), .RADDR0(RADDR0), 
    .WADDR10(WADDR10), .WADDR9(WADDR9), .WADDR8(WADDR8), .WADDR7(WADDR7), 
    .WADDR6(WADDR6), .WADDR5(WADDR5), .WADDR4(WADDR4), .WADDR3(WADDR3), 
    .WADDR2(WADDR2), .WADDR1(WADDR1), .WADDR0(WADDR0), .MASK_N15(MASK_N15), 
    .MASK_N14(MASK_N14), .MASK_N13(MASK_N13), .MASK_N12(MASK_N12), 
    .MASK_N11(MASK_N11), .MASK_N10(MASK_N10), .MASK_N9(MASK_N9), 
    .MASK_N8(MASK_N8), .MASK_N7(MASK_N7), .MASK_N6(MASK_N6), .MASK_N5(MASK_N5), 
    .MASK_N4(MASK_N4), .MASK_N3(MASK_N3), .MASK_N2(MASK_N2), .MASK_N1(MASK_N1), 
    .MASK_N0(MASK_N0), .WDATA15(WDATA15), .WDATA14(WDATA14), .WDATA13(WDATA13), 
    .WDATA12(WDATA12), .WDATA11(WDATA11), .WDATA10(WDATA10), .WDATA9(WDATA9), 
    .WDATA8(WDATA8), .WDATA7(WDATA7), .WDATA6(WDATA6), .WDATA5(WDATA5), 
    .WDATA4(WDATA4), .WDATA3(WDATA3), .WDATA2(WDATA2), .WDATA1(WDATA1), 
    .WDATA0(WDATA0), .RCLKE(RCLKE), .RCLK(RCLK), .RE(RE), .WCLKE(WCLKE), 
    .WCLK(WCLK), .WE(WE), .RDATA15(RDATA15), .RDATA14(RDATA14), 
    .RDATA13(RDATA13), .RDATA12(RDATA12), .RDATA11(RDATA11), .RDATA10(RDATA10), 
    .RDATA9(RDATA9), .RDATA8(RDATA8), .RDATA7(RDATA7), .RDATA6(RDATA6), 
    .RDATA5(RDATA5), .RDATA4(RDATA4), .RDATA3(RDATA3), .RDATA2(RDATA2), 
    .RDATA1(RDATA1), .RDATA0(RDATA0));
  defparam INST10.DATA_WIDTH_R = "2";
  defparam INST10.DATA_WIDTH_W = "2";

    defparam INST10.INIT_0 = "0x691EA5E1B469A5693CE10FDE1E1E879686A4962D872D3C872D963C3C2D3CA4A4";

    defparam INST10.INIT_1 = "0x87D29696960F4BE35A69C3A5D2B487781EF00F3C0F2DD2E1E349F8436996781E";

    defparam INST10.INIT_2 = "0xA5DABC16784BE187B6498F611EBC4B78D2B487780EE01E2DC3E1D26B4B971E5A";

    defparam INST10.INIT_3 = "0x5A8F87C7F07969B43C5AA5967AD04B3C87E1960F4BC35A0FA5E1B43C69F0783C";

    defparam INST10.INIT_4 = "0x69C35A2D87AD5AC3692DB4BC69D21E7887B45AD22D78B4B479C22D4B96A5C369";

    defparam INST10.INIT_5 = "0x5A96A5B4F8160F78D2DA2DF0787AE11E1EB4C396A468784BC3A51EA74B4FB4E1";

    defparam INST10.INIT_6 = "0xA46869D296D269F03C5AC3783C78E1D21EF04352B478695A96F049D0781E873C";

    defparam INST10.INIT_7 = "0xB44B5A5AA53C5AB487963CD2C3F0B469694B960F692DB4874B87B4A5A7495A4B";

    defparam INST10.INIT_8 = "0x5E29D25A2D1ED21E694B960F692DD2693CF0C3B41E96A5D25AC3A5A5D22D6969";

    defparam INST10.INIT_9 = "0xE18729B096F069A5D2E12CA487F078B4C3E13CE1C3A569F096B469B45261A52D";

    defparam INST10.INIT_A = "0x2D2F875E3C5AE12D52613C9687D27887E1E54BF0B4B50FE1F1865AD2A5961EC3";

    defparam INST10.INIT_B = "0x965A4B2DE934D2D24BE1A5B41ED287E169B4D2D3694BA53C1E5BA54B693CD278";

    defparam INST10.INIT_C = "0x69F0D2C35A78A50F2D3C960F1E782DC3E5B05A96C3A569D2F0E91E3EA51F3C69";

    defparam INST10.INIT_D = "0x2D9EB46D3C78874B07701EE1B4D22DE187D31F68D629781EE12DD3865AB5E1C3";

    defparam INST10.INIT_E = "0x6996F12C7C29B4780F4B0FC387F01EE1B4D23C5AA5692D7C960F96961EB487A5";

    defparam INST10.INIT_F = "0x4BC3C3C34B96C31E1E4B964B16521E9687870FB7C3785A69D2695A786987E187";
endmodule

module 
  ___lscc_rom_inst_u_rom_PRIM_MODE_xADDR_0__xDATA_1__mem_file_mem0_iCE40UP_sp4k
   ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, RADDR5, RADDR4, RADDR3, 
    RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, WADDR7, WADDR6, WADDR5, 
    WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, RCLKE, RCLK, RE, WCLKE, WCLK, 
    output RDATA11, RDATA3 );
  wire   GNDI, RADDR10_dly, RCLK_dly, RADDR9_dly, RADDR8_dly, RADDR7_dly, 
         RADDR6_dly, RADDR5_dly, RADDR4_dly, RADDR3_dly, RADDR2_dly, 
         RADDR1_dly, RADDR0_dly, WADDR10_dly, WCLK_dly, WADDR9_dly, WADDR8_dly, 
         WADDR7_dly, WADDR6_dly, WADDR5_dly, WADDR4_dly, WADDR3_dly, 
         WADDR2_dly, WADDR1_dly, WADDR0_dly, RCLKE_dly, RE_dly, WCLKE_dly;

  EBR_B0112 
    \__/lscc_rom_inst/u_rom/PRIM_MODE.xADDR[0].xDATA[1].mem_file.mem0/iCE40UP.sp4k 
    ( .RADDR10(RADDR10_dly), .RADDR9(RADDR9_dly), .RADDR8(RADDR8_dly), 
    .RADDR7(RADDR7_dly), .RADDR6(RADDR6_dly), .RADDR5(RADDR5_dly), 
    .RADDR4(RADDR4_dly), .RADDR3(RADDR3_dly), .RADDR2(RADDR2_dly), 
    .RADDR1(RADDR1_dly), .RADDR0(RADDR0_dly), .WADDR10(WADDR10_dly), 
    .WADDR9(WADDR9_dly), .WADDR8(WADDR8_dly), .WADDR7(WADDR7_dly), 
    .WADDR6(WADDR6_dly), .WADDR5(WADDR5_dly), .WADDR4(WADDR4_dly), 
    .WADDR3(WADDR3_dly), .WADDR2(WADDR2_dly), .WADDR1(WADDR1_dly), 
    .WADDR0(WADDR0_dly), .MASK_N15(GNDI), .MASK_N14(GNDI), .MASK_N13(GNDI), 
    .MASK_N12(GNDI), .MASK_N11(GNDI), .MASK_N10(GNDI), .MASK_N9(GNDI), 
    .MASK_N8(GNDI), .MASK_N7(GNDI), .MASK_N6(GNDI), .MASK_N5(GNDI), 
    .MASK_N4(GNDI), .MASK_N3(GNDI), .MASK_N2(GNDI), .MASK_N1(GNDI), 
    .MASK_N0(GNDI), .WDATA15(GNDI), .WDATA14(GNDI), .WDATA13(GNDI), 
    .WDATA12(GNDI), .WDATA11(GNDI), .WDATA10(GNDI), .WDATA9(GNDI), 
    .WDATA8(GNDI), .WDATA7(GNDI), .WDATA6(GNDI), .WDATA5(GNDI), .WDATA4(GNDI), 
    .WDATA3(GNDI), .WDATA2(GNDI), .WDATA1(GNDI), .WDATA0(GNDI), 
    .RCLKE(RCLKE_dly), .RCLK(RCLK_dly), .RE(RE_dly), .WCLKE(WCLKE_dly), 
    .WCLK(WCLK_dly), .WE(GNDI), .RDATA15(), .RDATA14(), .RDATA13(), .RDATA12(), 
    .RDATA11(RDATA11), .RDATA10(), .RDATA9(), .RDATA8(), .RDATA7(), .RDATA6(), 
    .RDATA5(), .RDATA4(), .RDATA3(RDATA3), .RDATA2(), .RDATA1(), .RDATA0());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (RCLK => RDATA11) = (0:0:0,0:0:0);
    (RCLK => RDATA3) = (0:0:0,0:0:0);
    $setuphold 
      (posedge RCLK, RADDR10, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR10_dly);
    $setuphold (posedge RCLK, RADDR9, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR9_dly);
    $setuphold (posedge RCLK, RADDR8, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR8_dly);
    $setuphold (posedge RCLK, RADDR7, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR7_dly);
    $setuphold (posedge RCLK, RADDR6, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR6_dly);
    $setuphold (posedge RCLK, RADDR5, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR5_dly);
    $setuphold (posedge RCLK, RADDR4, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR4_dly);
    $setuphold (posedge RCLK, RADDR3, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR3_dly);
    $setuphold (posedge RCLK, RADDR2, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR2_dly);
    $setuphold (posedge RCLK, RADDR1, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR1_dly);
    $setuphold (posedge RCLK, RADDR0, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR0_dly);
    $setuphold 
      (posedge WCLK, WADDR10, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR10_dly);
    $setuphold (posedge WCLK, WADDR9, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR9_dly);
    $setuphold (posedge WCLK, WADDR8, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR8_dly);
    $setuphold (posedge WCLK, WADDR7, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR7_dly);
    $setuphold (posedge WCLK, WADDR6, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR6_dly);
    $setuphold (posedge WCLK, WADDR5, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR5_dly);
    $setuphold (posedge WCLK, WADDR4, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR4_dly);
    $setuphold (posedge WCLK, WADDR3, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR3_dly);
    $setuphold (posedge WCLK, WADDR2, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR2_dly);
    $setuphold (posedge WCLK, WADDR1, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR1_dly);
    $setuphold (posedge WCLK, WADDR0, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR0_dly);
    $setuphold (posedge RCLK, RCLKE, 0:0:0, 0:0:0,,,, RCLK_dly, RCLKE_dly);
    $setuphold (posedge RCLK, RE, 0:0:0, 0:0:0,,,, RCLK_dly, RE_dly);
    $setuphold (posedge WCLK, WCLKE, 0:0:0, 0:0:0,,,, WCLK_dly, WCLKE_dly);
    $width (posedge RCLK, 0:0:0);
    $width (negedge RCLK, 0:0:0);
    $width (posedge WCLK, 0:0:0);
    $width (negedge WCLK, 0:0:0);
  endspecify

endmodule

module EBR_B0112 ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, RADDR5, 
    RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, WADDR7, 
    WADDR6, WADDR5, WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, MASK_N15, MASK_N14, 
    MASK_N13, MASK_N12, MASK_N11, MASK_N10, MASK_N9, MASK_N8, MASK_N7, MASK_N6, 
    MASK_N5, MASK_N4, MASK_N3, MASK_N2, MASK_N1, MASK_N0, WDATA15, WDATA14, 
    WDATA13, WDATA12, WDATA11, WDATA10, WDATA9, WDATA8, WDATA7, WDATA6, WDATA5, 
    WDATA4, WDATA3, WDATA2, WDATA1, WDATA0, RCLKE, RCLK, RE, WCLKE, WCLK, WE, 
    output RDATA15, RDATA14, RDATA13, RDATA12, RDATA11, RDATA10, RDATA9, 
    RDATA8, RDATA7, RDATA6, RDATA5, RDATA4, RDATA3, RDATA2, RDATA1, RDATA0 );

  EBR_B INST10( .RADDR10(RADDR10), .RADDR9(RADDR9), .RADDR8(RADDR8), 
    .RADDR7(RADDR7), .RADDR6(RADDR6), .RADDR5(RADDR5), .RADDR4(RADDR4), 
    .RADDR3(RADDR3), .RADDR2(RADDR2), .RADDR1(RADDR1), .RADDR0(RADDR0), 
    .WADDR10(WADDR10), .WADDR9(WADDR9), .WADDR8(WADDR8), .WADDR7(WADDR7), 
    .WADDR6(WADDR6), .WADDR5(WADDR5), .WADDR4(WADDR4), .WADDR3(WADDR3), 
    .WADDR2(WADDR2), .WADDR1(WADDR1), .WADDR0(WADDR0), .MASK_N15(MASK_N15), 
    .MASK_N14(MASK_N14), .MASK_N13(MASK_N13), .MASK_N12(MASK_N12), 
    .MASK_N11(MASK_N11), .MASK_N10(MASK_N10), .MASK_N9(MASK_N9), 
    .MASK_N8(MASK_N8), .MASK_N7(MASK_N7), .MASK_N6(MASK_N6), .MASK_N5(MASK_N5), 
    .MASK_N4(MASK_N4), .MASK_N3(MASK_N3), .MASK_N2(MASK_N2), .MASK_N1(MASK_N1), 
    .MASK_N0(MASK_N0), .WDATA15(WDATA15), .WDATA14(WDATA14), .WDATA13(WDATA13), 
    .WDATA12(WDATA12), .WDATA11(WDATA11), .WDATA10(WDATA10), .WDATA9(WDATA9), 
    .WDATA8(WDATA8), .WDATA7(WDATA7), .WDATA6(WDATA6), .WDATA5(WDATA5), 
    .WDATA4(WDATA4), .WDATA3(WDATA3), .WDATA2(WDATA2), .WDATA1(WDATA1), 
    .WDATA0(WDATA0), .RCLKE(RCLKE), .RCLK(RCLK), .RE(RE), .WCLKE(WCLKE), 
    .WCLK(WCLK), .WE(WE), .RDATA15(RDATA15), .RDATA14(RDATA14), 
    .RDATA13(RDATA13), .RDATA12(RDATA12), .RDATA11(RDATA11), .RDATA10(RDATA10), 
    .RDATA9(RDATA9), .RDATA8(RDATA8), .RDATA7(RDATA7), .RDATA6(RDATA6), 
    .RDATA5(RDATA5), .RDATA4(RDATA4), .RDATA3(RDATA3), .RDATA2(RDATA2), 
    .RDATA1(RDATA1), .RDATA0(RDATA0));
  defparam INST10.DATA_WIDTH_R = "2";
  defparam INST10.DATA_WIDTH_W = "2";

    defparam INST10.INIT_0 = "0x3C7C4BC3C3B43C4BB47C03034BF0F0B54A86A7D03CE996BE2D8F87961EA5A4A4";

    defparam INST10.INIT_1 = "0xB5E0787D2DA5C914960FD2960F0F4BB4962DF2D42D4B69F0D00D16164BF1F50A";

    defparam INST10.INIT_2 = "0x34713452C3A5C396D0C1343425472F585A2D5A7A0ECE4B975BC2941DE02CE1F1";

    defparam INST10.INIT_3 = "0x34079292E06A4BA56DB81F6894C1B49E872FAD352D961EA73CBC2D0F0F3C1F4E";

    defparam INST10.INIT_4 = "0xF1CA3CE15243F6183CB44307872D69F00F5AB48FF8651E78A4A4C36B69B60FDA";

    defparam INST10.INIT_5 = "0x3D68F02D7061BC253461F8255859965E5A3ED2782E48E1872DA5C581831A0F78";

    defparam INST10.INIT_6 = "0xC22C5A1E7CB0B4DA1E791EC3B4E13CEBB44B56215BA4D3865BCAD1483D2CB56C";

    defparam INST10.INIT_7 = "0xCB25B43CD2F37C0B0F96E15BC3873C7A1EB4F069F2850F5AAD1687BD494969C7";

    defparam INST10.INIT_8 = "0x29291EDB5B860FA5F41AF06987D2C3E53C1E78AD0F96E30DB4FCD2C33D4A69F0";

    defparam INST10.INIT_9 = "0xCB43B821AD35BC16AD52A648D22DC37DD278873C87E9D2B5E3D0A5873443693E";

    defparam INST10.INIT_A = "0x1C853A184B5A781E4721B4E1A5C796A7A1A9F14AC268D34AE068F04BCB61DA63";

    defparam INST10.INIT_B = "0x69D63C6D525287E1F16AD21F0FA569F01E4B2C0EC3D2F681A42CC378F8350FE1";

    defparam INST10.INIT_C = "0x0FC34B0FC3D3875E4B965BCA1E4FD29792388F616BD12D5A70659494C20E0FB5";

    defparam INST10.INIT_D = "0x7043928BAD342D9E0737A5E5A54B4FA14A2EC2C2B0383C963C5AC2A4C2E88F27";

    defparam INST10.INIT_E = "0x2DF88686B00B69F04B2DF4B2964B2DD20F0FB496960F39824B5AE1EBDA7078F8";

    defparam INST10.INIT_F = "0x875A1E964B1F96D7C3795EB02516F0DA2DF00C0CD2E3C32D3CD22D3CC3E3FA05";
endmodule

module 
  ___lscc_rom_inst_u_rom_PRIM_MODE_xADDR_0__xDATA_0__mem_file_mem0_iCE40UP_sp4k
   ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, RADDR5, RADDR4, RADDR3, 
    RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, WADDR7, WADDR6, WADDR5, 
    WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, RCLKE, RCLK, RE, WCLKE, WCLK, 
    output RDATA11, RDATA3 );
  wire   GNDI, RADDR10_dly, RCLK_dly, RADDR9_dly, RADDR8_dly, RADDR7_dly, 
         RADDR6_dly, RADDR5_dly, RADDR4_dly, RADDR3_dly, RADDR2_dly, 
         RADDR1_dly, RADDR0_dly, WADDR10_dly, WCLK_dly, WADDR9_dly, WADDR8_dly, 
         WADDR7_dly, WADDR6_dly, WADDR5_dly, WADDR4_dly, WADDR3_dly, 
         WADDR2_dly, WADDR1_dly, WADDR0_dly, RCLKE_dly, RE_dly, WCLKE_dly;

  EBR_B0113 
    \__/lscc_rom_inst/u_rom/PRIM_MODE.xADDR[0].xDATA[0].mem_file.mem0/iCE40UP.sp4k 
    ( .RADDR10(RADDR10_dly), .RADDR9(RADDR9_dly), .RADDR8(RADDR8_dly), 
    .RADDR7(RADDR7_dly), .RADDR6(RADDR6_dly), .RADDR5(RADDR5_dly), 
    .RADDR4(RADDR4_dly), .RADDR3(RADDR3_dly), .RADDR2(RADDR2_dly), 
    .RADDR1(RADDR1_dly), .RADDR0(RADDR0_dly), .WADDR10(WADDR10_dly), 
    .WADDR9(WADDR9_dly), .WADDR8(WADDR8_dly), .WADDR7(WADDR7_dly), 
    .WADDR6(WADDR6_dly), .WADDR5(WADDR5_dly), .WADDR4(WADDR4_dly), 
    .WADDR3(WADDR3_dly), .WADDR2(WADDR2_dly), .WADDR1(WADDR1_dly), 
    .WADDR0(WADDR0_dly), .MASK_N15(GNDI), .MASK_N14(GNDI), .MASK_N13(GNDI), 
    .MASK_N12(GNDI), .MASK_N11(GNDI), .MASK_N10(GNDI), .MASK_N9(GNDI), 
    .MASK_N8(GNDI), .MASK_N7(GNDI), .MASK_N6(GNDI), .MASK_N5(GNDI), 
    .MASK_N4(GNDI), .MASK_N3(GNDI), .MASK_N2(GNDI), .MASK_N1(GNDI), 
    .MASK_N0(GNDI), .WDATA15(GNDI), .WDATA14(GNDI), .WDATA13(GNDI), 
    .WDATA12(GNDI), .WDATA11(GNDI), .WDATA10(GNDI), .WDATA9(GNDI), 
    .WDATA8(GNDI), .WDATA7(GNDI), .WDATA6(GNDI), .WDATA5(GNDI), .WDATA4(GNDI), 
    .WDATA3(GNDI), .WDATA2(GNDI), .WDATA1(GNDI), .WDATA0(GNDI), 
    .RCLKE(RCLKE_dly), .RCLK(RCLK_dly), .RE(RE_dly), .WCLKE(WCLKE_dly), 
    .WCLK(WCLK_dly), .WE(GNDI), .RDATA15(), .RDATA14(), .RDATA13(), .RDATA12(), 
    .RDATA11(RDATA11), .RDATA10(), .RDATA9(), .RDATA8(), .RDATA7(), .RDATA6(), 
    .RDATA5(), .RDATA4(), .RDATA3(RDATA3), .RDATA2(), .RDATA1(), .RDATA0());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (RCLK => RDATA11) = (0:0:0,0:0:0);
    (RCLK => RDATA3) = (0:0:0,0:0:0);
    $setuphold 
      (posedge RCLK, RADDR10, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR10_dly);
    $setuphold (posedge RCLK, RADDR9, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR9_dly);
    $setuphold (posedge RCLK, RADDR8, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR8_dly);
    $setuphold (posedge RCLK, RADDR7, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR7_dly);
    $setuphold (posedge RCLK, RADDR6, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR6_dly);
    $setuphold (posedge RCLK, RADDR5, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR5_dly);
    $setuphold (posedge RCLK, RADDR4, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR4_dly);
    $setuphold (posedge RCLK, RADDR3, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR3_dly);
    $setuphold (posedge RCLK, RADDR2, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR2_dly);
    $setuphold (posedge RCLK, RADDR1, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR1_dly);
    $setuphold (posedge RCLK, RADDR0, 0:0:0, 0:0:0,,,, RCLK_dly, RADDR0_dly);
    $setuphold 
      (posedge WCLK, WADDR10, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR10_dly);
    $setuphold (posedge WCLK, WADDR9, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR9_dly);
    $setuphold (posedge WCLK, WADDR8, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR8_dly);
    $setuphold (posedge WCLK, WADDR7, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR7_dly);
    $setuphold (posedge WCLK, WADDR6, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR6_dly);
    $setuphold (posedge WCLK, WADDR5, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR5_dly);
    $setuphold (posedge WCLK, WADDR4, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR4_dly);
    $setuphold (posedge WCLK, WADDR3, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR3_dly);
    $setuphold (posedge WCLK, WADDR2, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR2_dly);
    $setuphold (posedge WCLK, WADDR1, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR1_dly);
    $setuphold (posedge WCLK, WADDR0, 0:0:0, 0:0:0,,,, WCLK_dly, WADDR0_dly);
    $setuphold (posedge RCLK, RCLKE, 0:0:0, 0:0:0,,,, RCLK_dly, RCLKE_dly);
    $setuphold (posedge RCLK, RE, 0:0:0, 0:0:0,,,, RCLK_dly, RE_dly);
    $setuphold (posedge WCLK, WCLKE, 0:0:0, 0:0:0,,,, WCLK_dly, WCLKE_dly);
    $width (posedge RCLK, 0:0:0);
    $width (negedge RCLK, 0:0:0);
    $width (posedge WCLK, 0:0:0);
    $width (negedge WCLK, 0:0:0);
  endspecify

endmodule

module EBR_B0113 ( input RADDR10, RADDR9, RADDR8, RADDR7, RADDR6, RADDR5, 
    RADDR4, RADDR3, RADDR2, RADDR1, RADDR0, WADDR10, WADDR9, WADDR8, WADDR7, 
    WADDR6, WADDR5, WADDR4, WADDR3, WADDR2, WADDR1, WADDR0, MASK_N15, MASK_N14, 
    MASK_N13, MASK_N12, MASK_N11, MASK_N10, MASK_N9, MASK_N8, MASK_N7, MASK_N6, 
    MASK_N5, MASK_N4, MASK_N3, MASK_N2, MASK_N1, MASK_N0, WDATA15, WDATA14, 
    WDATA13, WDATA12, WDATA11, WDATA10, WDATA9, WDATA8, WDATA7, WDATA6, WDATA5, 
    WDATA4, WDATA3, WDATA2, WDATA1, WDATA0, RCLKE, RCLK, RE, WCLKE, WCLK, WE, 
    output RDATA15, RDATA14, RDATA13, RDATA12, RDATA11, RDATA10, RDATA9, 
    RDATA8, RDATA7, RDATA6, RDATA5, RDATA4, RDATA3, RDATA2, RDATA1, RDATA0 );

  EBR_B INST10( .RADDR10(RADDR10), .RADDR9(RADDR9), .RADDR8(RADDR8), 
    .RADDR7(RADDR7), .RADDR6(RADDR6), .RADDR5(RADDR5), .RADDR4(RADDR4), 
    .RADDR3(RADDR3), .RADDR2(RADDR2), .RADDR1(RADDR1), .RADDR0(RADDR0), 
    .WADDR10(WADDR10), .WADDR9(WADDR9), .WADDR8(WADDR8), .WADDR7(WADDR7), 
    .WADDR6(WADDR6), .WADDR5(WADDR5), .WADDR4(WADDR4), .WADDR3(WADDR3), 
    .WADDR2(WADDR2), .WADDR1(WADDR1), .WADDR0(WADDR0), .MASK_N15(MASK_N15), 
    .MASK_N14(MASK_N14), .MASK_N13(MASK_N13), .MASK_N12(MASK_N12), 
    .MASK_N11(MASK_N11), .MASK_N10(MASK_N10), .MASK_N9(MASK_N9), 
    .MASK_N8(MASK_N8), .MASK_N7(MASK_N7), .MASK_N6(MASK_N6), .MASK_N5(MASK_N5), 
    .MASK_N4(MASK_N4), .MASK_N3(MASK_N3), .MASK_N2(MASK_N2), .MASK_N1(MASK_N1), 
    .MASK_N0(MASK_N0), .WDATA15(WDATA15), .WDATA14(WDATA14), .WDATA13(WDATA13), 
    .WDATA12(WDATA12), .WDATA11(WDATA11), .WDATA10(WDATA10), .WDATA9(WDATA9), 
    .WDATA8(WDATA8), .WDATA7(WDATA7), .WDATA6(WDATA6), .WDATA5(WDATA5), 
    .WDATA4(WDATA4), .WDATA3(WDATA3), .WDATA2(WDATA2), .WDATA1(WDATA1), 
    .WDATA0(WDATA0), .RCLKE(RCLKE), .RCLK(RCLK), .RE(RE), .WCLKE(WCLKE), 
    .WCLK(WCLK), .WE(WE), .RDATA15(RDATA15), .RDATA14(RDATA14), 
    .RDATA13(RDATA13), .RDATA12(RDATA12), .RDATA11(RDATA11), .RDATA10(RDATA10), 
    .RDATA9(RDATA9), .RDATA8(RDATA8), .RDATA7(RDATA7), .RDATA6(RDATA6), 
    .RDATA5(RDATA5), .RDATA4(RDATA4), .RDATA3(RDATA3), .RDATA2(RDATA2), 
    .RDATA1(RDATA1), .RDATA0(RDATA0));
  defparam INST10.DATA_WIDTH_R = "2";
  defparam INST10.DATA_WIDTH_W = "2";

    defparam INST10.INIT_0 = "0x0BBBCB774BFFD3EE3B883211B4FFCA662ECC49DD2755514477005EBB3CFFAE44";

    defparam INST10.INIT_1 = "0xA4EEA82269FF451187FFAF55AD775FAA7BCC9900BD66D2FF94DD7077EE0082AA";

    defparam INST10.INIT_2 = "0x06667255B6DDF1EED5881766213349DDEB55C1DD20222ECCC6AA48CCA4EE68EE";

    defparam INST10.INIT_3 = "0x716629BB8C44D3EE23116CAA94DD7344CD11660096FF1CDD3566E799EB550AAA";

    defparam INST10.INIT_4 = "0x6066E977707781991EFF6711F0FF8F7778FF47333033F3CCC2EED588C5997077";

    defparam INST10.INIT_5 = "0x6ACC4FBB473377007700743348CC2B999D44D2FF84CC6BDDDF22909929BBF966";

    defparam INST10.INIT_6 = "0xE2CC3EDD9B224377CA66F6997DAA5144CB772133C6AAE8660666C0CCAC66AA00";

    defparam INST10.INIT_7 = "0x3744D2FF84CCA933FD22EC223DEE1CDD8F77BE558D55D6BB716626445C99A933";

    defparam INST10.INIT_8 = "0xA3994622E866B6DD1BAAD7AA1FEE83BBCB777344FB4459CC1233B4FFCE2269FF";

    defparam INST10.INIT_9 = "0x5366303306667166365548CC3DEEA822EB55F69935662CEE9D44C7BB743359CC";

    defparam INST10.INIT_A = "0x49DD9099BF446DBB1233B4FF9B224D992133E2CCEE00EE002ECC2FDD65335500";

    defparam INST10.INIT_B = "0x3A99BA113477FC33C0CC2ECCE1FF1FEEF0FF6E8887FF1899E0EE79EE6066F966";

    defparam INST10.INIT_C = "0x7DAA7E99CA6683BB96FF66003B88EC2292BB63554C88BC77132249DDE866E0EE";

    defparam INST10.INIT_D = "0x5277213336554733404438BB7DAA29BB48CC8E66BA11F877D6BBE4AA06660555";

    defparam INST10.INIT_E = "0x7700E0EE92BBB4FFDB669900ED33AF555BEE5FAA1EFF2A8869FF514452776177";

    defparam INST10.INIT_F = "0xC3FFA7DDEE00A8224EAA29BB47333566D2FFC488CD11BC772DFF3DEE0DDD1455";
endmodule

module o_DAC_SCK ( input PADDO, output o_DAC_SCK );
  wire   VCCI;

  BB_B_B \o_DAC_SCK_pad.bb_inst ( .T_N(VCCI), .I(PADDO), .O(), .B(o_DAC_SCK));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => o_DAC_SCK) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_DAC_MOSI ( input PADDO, output o_DAC_MOSI );
  wire   VCCI;

  BB_B_B \o_DAC_MOSI_pad.bb_inst ( .T_N(VCCI), .I(PADDO), .O(), .B(o_DAC_MOSI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => o_DAC_MOSI) = (0:0:0,0:0:0);
  endspecify

endmodule

module test ( input PADDO, output test );
  wire   VCCI;

  BB_B_B \test_pad.bb_inst ( .T_N(VCCI), .I(PADDO), .O(), .B(test));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => test) = (0:0:0,0:0:0);
  endspecify

endmodule

module led ( input PADDO, output led );
  wire   VCCI;

  BB_B_B \led_pad.bb_inst ( .T_N(VCCI), .I(PADDO), .O(), .B(led));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => led) = (0:0:0,0:0:0);
  endspecify

endmodule

module i_ADC_Clock ( output PADDI, input i_ADC_Clock );
  wire   GNDI;

  BB_B_B \i_ADC_Clock_pad.bb_inst ( .T_N(GNDI), .I(GNDI), .O(PADDI), 
    .B(i_ADC_Clock));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (i_ADC_Clock => PADDI) = (0:0:0,0:0:0);
  endspecify

endmodule

module i_ADC_Data ( output PADDI, input i_ADC_Data );
  wire   GNDI;

  BB_B_B \i_ADC_Data_pad.bb_inst ( .T_N(GNDI), .I(GNDI), .O(PADDI), 
    .B(i_ADC_Data));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (i_ADC_Data => PADDI) = (0:0:0,0:0:0);
  endspecify

endmodule

module i_Clock ( output PADDI, input i_Clock );
  wire   GNDI;

  BB_B_B \i_Clock_pad.bb_inst ( .T_N(GNDI), .I(GNDI), .O(PADDI), .B(i_Clock));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (i_Clock => PADDI) = (0:0:0,0:0:0);
  endspecify

endmodule

module o_DAC_CS ( input PADDO, output o_DAC_CS );
  wire   VCCI;

  BB_B_B \o_DAC_CS_pad.bb_inst ( .T_N(VCCI), .I(PADDO), .O(), .B(o_DAC_CS));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => o_DAC_CS) = (0:0:0,0:0:0);
  endspecify

endmodule
