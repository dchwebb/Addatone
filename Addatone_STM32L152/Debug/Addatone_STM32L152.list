
Addatone_STM32L152.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002304  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08002440  08002440  00012440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002484  08002484  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002484  08002484  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002484  08002484  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002484  08002484  00012484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002488  08002488  00012488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800248c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  20000070  080024fc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  080024fc  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000391d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b0a  00000000  00000000  000239b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000150  00000000  00000000  000244c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000118  00000000  00000000  00024610  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000ffc7  00000000  00000000  00024728  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002307  00000000  00000000  000346ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004dfa4  00000000  00000000  000369f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008499a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000844  00000000  00000000  00084a18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	08002428 	.word	0x08002428

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	08002428 	.word	0x08002428

0800017c <__aeabi_drsub>:
 800017c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__adddf3>
 8000182:	bf00      	nop

08000184 <__aeabi_dsub>:
 8000184:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000188 <__adddf3>:
 8000188:	b530      	push	{r4, r5, lr}
 800018a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800018e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000192:	ea94 0f05 	teq	r4, r5
 8000196:	bf08      	it	eq
 8000198:	ea90 0f02 	teqeq	r0, r2
 800019c:	bf1f      	itttt	ne
 800019e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ae:	f000 80e2 	beq.w	8000376 <__adddf3+0x1ee>
 80001b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ba:	bfb8      	it	lt
 80001bc:	426d      	neglt	r5, r5
 80001be:	dd0c      	ble.n	80001da <__adddf3+0x52>
 80001c0:	442c      	add	r4, r5
 80001c2:	ea80 0202 	eor.w	r2, r0, r2
 80001c6:	ea81 0303 	eor.w	r3, r1, r3
 80001ca:	ea82 0000 	eor.w	r0, r2, r0
 80001ce:	ea83 0101 	eor.w	r1, r3, r1
 80001d2:	ea80 0202 	eor.w	r2, r0, r2
 80001d6:	ea81 0303 	eor.w	r3, r1, r3
 80001da:	2d36      	cmp	r5, #54	; 0x36
 80001dc:	bf88      	it	hi
 80001de:	bd30      	pophi	{r4, r5, pc}
 80001e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f0:	d002      	beq.n	80001f8 <__adddf3+0x70>
 80001f2:	4240      	negs	r0, r0
 80001f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000200:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x84>
 8000206:	4252      	negs	r2, r2
 8000208:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800020c:	ea94 0f05 	teq	r4, r5
 8000210:	f000 80a7 	beq.w	8000362 <__adddf3+0x1da>
 8000214:	f1a4 0401 	sub.w	r4, r4, #1
 8000218:	f1d5 0e20 	rsbs	lr, r5, #32
 800021c:	db0d      	blt.n	800023a <__adddf3+0xb2>
 800021e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000222:	fa22 f205 	lsr.w	r2, r2, r5
 8000226:	1880      	adds	r0, r0, r2
 8000228:	f141 0100 	adc.w	r1, r1, #0
 800022c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000230:	1880      	adds	r0, r0, r2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	4159      	adcs	r1, r3
 8000238:	e00e      	b.n	8000258 <__adddf3+0xd0>
 800023a:	f1a5 0520 	sub.w	r5, r5, #32
 800023e:	f10e 0e20 	add.w	lr, lr, #32
 8000242:	2a01      	cmp	r2, #1
 8000244:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000248:	bf28      	it	cs
 800024a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800024e:	fa43 f305 	asr.w	r3, r3, r5
 8000252:	18c0      	adds	r0, r0, r3
 8000254:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000258:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800025c:	d507      	bpl.n	800026e <__adddf3+0xe6>
 800025e:	f04f 0e00 	mov.w	lr, #0
 8000262:	f1dc 0c00 	rsbs	ip, ip, #0
 8000266:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026a:	eb6e 0101 	sbc.w	r1, lr, r1
 800026e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000272:	d31b      	bcc.n	80002ac <__adddf3+0x124>
 8000274:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000278:	d30c      	bcc.n	8000294 <__adddf3+0x10c>
 800027a:	0849      	lsrs	r1, r1, #1
 800027c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000280:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000284:	f104 0401 	add.w	r4, r4, #1
 8000288:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800028c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000290:	f080 809a 	bcs.w	80003c8 <__adddf3+0x240>
 8000294:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000298:	bf08      	it	eq
 800029a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800029e:	f150 0000 	adcs.w	r0, r0, #0
 80002a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a6:	ea41 0105 	orr.w	r1, r1, r5
 80002aa:	bd30      	pop	{r4, r5, pc}
 80002ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b0:	4140      	adcs	r0, r0
 80002b2:	eb41 0101 	adc.w	r1, r1, r1
 80002b6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ba:	f1a4 0401 	sub.w	r4, r4, #1
 80002be:	d1e9      	bne.n	8000294 <__adddf3+0x10c>
 80002c0:	f091 0f00 	teq	r1, #0
 80002c4:	bf04      	itt	eq
 80002c6:	4601      	moveq	r1, r0
 80002c8:	2000      	moveq	r0, #0
 80002ca:	fab1 f381 	clz	r3, r1
 80002ce:	bf08      	it	eq
 80002d0:	3320      	addeq	r3, #32
 80002d2:	f1a3 030b 	sub.w	r3, r3, #11
 80002d6:	f1b3 0220 	subs.w	r2, r3, #32
 80002da:	da0c      	bge.n	80002f6 <__adddf3+0x16e>
 80002dc:	320c      	adds	r2, #12
 80002de:	dd08      	ble.n	80002f2 <__adddf3+0x16a>
 80002e0:	f102 0c14 	add.w	ip, r2, #20
 80002e4:	f1c2 020c 	rsb	r2, r2, #12
 80002e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002ec:	fa21 f102 	lsr.w	r1, r1, r2
 80002f0:	e00c      	b.n	800030c <__adddf3+0x184>
 80002f2:	f102 0214 	add.w	r2, r2, #20
 80002f6:	bfd8      	it	le
 80002f8:	f1c2 0c20 	rsble	ip, r2, #32
 80002fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000300:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000304:	bfdc      	itt	le
 8000306:	ea41 010c 	orrle.w	r1, r1, ip
 800030a:	4090      	lslle	r0, r2
 800030c:	1ae4      	subs	r4, r4, r3
 800030e:	bfa2      	ittt	ge
 8000310:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000314:	4329      	orrge	r1, r5
 8000316:	bd30      	popge	{r4, r5, pc}
 8000318:	ea6f 0404 	mvn.w	r4, r4
 800031c:	3c1f      	subs	r4, #31
 800031e:	da1c      	bge.n	800035a <__adddf3+0x1d2>
 8000320:	340c      	adds	r4, #12
 8000322:	dc0e      	bgt.n	8000342 <__adddf3+0x1ba>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0220 	rsb	r2, r4, #32
 800032c:	fa20 f004 	lsr.w	r0, r0, r4
 8000330:	fa01 f302 	lsl.w	r3, r1, r2
 8000334:	ea40 0003 	orr.w	r0, r0, r3
 8000338:	fa21 f304 	lsr.w	r3, r1, r4
 800033c:	ea45 0103 	orr.w	r1, r5, r3
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f1c4 040c 	rsb	r4, r4, #12
 8000346:	f1c4 0220 	rsb	r2, r4, #32
 800034a:	fa20 f002 	lsr.w	r0, r0, r2
 800034e:	fa01 f304 	lsl.w	r3, r1, r4
 8000352:	ea40 0003 	orr.w	r0, r0, r3
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	fa21 f004 	lsr.w	r0, r1, r4
 800035e:	4629      	mov	r1, r5
 8000360:	bd30      	pop	{r4, r5, pc}
 8000362:	f094 0f00 	teq	r4, #0
 8000366:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036a:	bf06      	itte	eq
 800036c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000370:	3401      	addeq	r4, #1
 8000372:	3d01      	subne	r5, #1
 8000374:	e74e      	b.n	8000214 <__adddf3+0x8c>
 8000376:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037a:	bf18      	it	ne
 800037c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000380:	d029      	beq.n	80003d6 <__adddf3+0x24e>
 8000382:	ea94 0f05 	teq	r4, r5
 8000386:	bf08      	it	eq
 8000388:	ea90 0f02 	teqeq	r0, r2
 800038c:	d005      	beq.n	800039a <__adddf3+0x212>
 800038e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000392:	bf04      	itt	eq
 8000394:	4619      	moveq	r1, r3
 8000396:	4610      	moveq	r0, r2
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	ea91 0f03 	teq	r1, r3
 800039e:	bf1e      	ittt	ne
 80003a0:	2100      	movne	r1, #0
 80003a2:	2000      	movne	r0, #0
 80003a4:	bd30      	popne	{r4, r5, pc}
 80003a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003aa:	d105      	bne.n	80003b8 <__adddf3+0x230>
 80003ac:	0040      	lsls	r0, r0, #1
 80003ae:	4149      	adcs	r1, r1
 80003b0:	bf28      	it	cs
 80003b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003bc:	bf3c      	itt	cc
 80003be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c2:	bd30      	popcc	{r4, r5, pc}
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf1a      	itte	ne
 80003dc:	4619      	movne	r1, r3
 80003de:	4610      	movne	r0, r2
 80003e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e4:	bf1c      	itt	ne
 80003e6:	460b      	movne	r3, r1
 80003e8:	4602      	movne	r2, r0
 80003ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ee:	bf06      	itte	eq
 80003f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f4:	ea91 0f03 	teqeq	r1, r3
 80003f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	bf00      	nop

08000400 <__aeabi_ui2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f04f 0500 	mov.w	r5, #0
 8000418:	f04f 0100 	mov.w	r1, #0
 800041c:	e750      	b.n	80002c0 <__adddf3+0x138>
 800041e:	bf00      	nop

08000420 <__aeabi_i2d>:
 8000420:	f090 0f00 	teq	r0, #0
 8000424:	bf04      	itt	eq
 8000426:	2100      	moveq	r1, #0
 8000428:	4770      	bxeq	lr
 800042a:	b530      	push	{r4, r5, lr}
 800042c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000430:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000434:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000438:	bf48      	it	mi
 800043a:	4240      	negmi	r0, r0
 800043c:	f04f 0100 	mov.w	r1, #0
 8000440:	e73e      	b.n	80002c0 <__adddf3+0x138>
 8000442:	bf00      	nop

08000444 <__aeabi_f2d>:
 8000444:	0042      	lsls	r2, r0, #1
 8000446:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044a:	ea4f 0131 	mov.w	r1, r1, rrx
 800044e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000452:	bf1f      	itttt	ne
 8000454:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000458:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800045c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000460:	4770      	bxne	lr
 8000462:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000466:	bf08      	it	eq
 8000468:	4770      	bxeq	lr
 800046a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800046e:	bf04      	itt	eq
 8000470:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 7460 	mov.w	r4, #896	; 0x380
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000484:	e71c      	b.n	80002c0 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_ul2d>:
 8000488:	ea50 0201 	orrs.w	r2, r0, r1
 800048c:	bf08      	it	eq
 800048e:	4770      	bxeq	lr
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	f04f 0500 	mov.w	r5, #0
 8000496:	e00a      	b.n	80004ae <__aeabi_l2d+0x16>

08000498 <__aeabi_l2d>:
 8000498:	ea50 0201 	orrs.w	r2, r0, r1
 800049c:	bf08      	it	eq
 800049e:	4770      	bxeq	lr
 80004a0:	b530      	push	{r4, r5, lr}
 80004a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a6:	d502      	bpl.n	80004ae <__aeabi_l2d+0x16>
 80004a8:	4240      	negs	r0, r0
 80004aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ba:	f43f aed8 	beq.w	800026e <__adddf3+0xe6>
 80004be:	f04f 0203 	mov.w	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ce:	bf18      	it	ne
 80004d0:	3203      	addne	r2, #3
 80004d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d6:	f1c2 0320 	rsb	r3, r2, #32
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e6:	ea40 000e 	orr.w	r0, r0, lr
 80004ea:	fa21 f102 	lsr.w	r1, r1, r2
 80004ee:	4414      	add	r4, r2
 80004f0:	e6bd      	b.n	800026e <__adddf3+0xe6>
 80004f2:	bf00      	nop

080004f4 <__aeabi_d2f>:
 80004f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80004fc:	bf24      	itt	cs
 80004fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000502:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000506:	d90d      	bls.n	8000524 <__aeabi_d2f+0x30>
 8000508:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800050c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000510:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000514:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000518:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800051c:	bf08      	it	eq
 800051e:	f020 0001 	biceq.w	r0, r0, #1
 8000522:	4770      	bx	lr
 8000524:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000528:	d121      	bne.n	800056e <__aeabi_d2f+0x7a>
 800052a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800052e:	bfbc      	itt	lt
 8000530:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000534:	4770      	bxlt	lr
 8000536:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800053e:	f1c2 0218 	rsb	r2, r2, #24
 8000542:	f1c2 0c20 	rsb	ip, r2, #32
 8000546:	fa10 f30c 	lsls.w	r3, r0, ip
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	bf18      	it	ne
 8000550:	f040 0001 	orrne.w	r0, r0, #1
 8000554:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000558:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800055c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000560:	ea40 000c 	orr.w	r0, r0, ip
 8000564:	fa23 f302 	lsr.w	r3, r3, r2
 8000568:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800056c:	e7cc      	b.n	8000508 <__aeabi_d2f+0x14>
 800056e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000572:	d107      	bne.n	8000584 <__aeabi_d2f+0x90>
 8000574:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000578:	bf1e      	ittt	ne
 800057a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800057e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000582:	4770      	bxne	lr
 8000584:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000588:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800058c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <__aeabi_frsub>:
 8000594:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000598:	e002      	b.n	80005a0 <__addsf3>
 800059a:	bf00      	nop

0800059c <__aeabi_fsub>:
 800059c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080005a0 <__addsf3>:
 80005a0:	0042      	lsls	r2, r0, #1
 80005a2:	bf1f      	itttt	ne
 80005a4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80005a8:	ea92 0f03 	teqne	r2, r3
 80005ac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80005b0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005b4:	d06a      	beq.n	800068c <__addsf3+0xec>
 80005b6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80005ba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80005be:	bfc1      	itttt	gt
 80005c0:	18d2      	addgt	r2, r2, r3
 80005c2:	4041      	eorgt	r1, r0
 80005c4:	4048      	eorgt	r0, r1
 80005c6:	4041      	eorgt	r1, r0
 80005c8:	bfb8      	it	lt
 80005ca:	425b      	neglt	r3, r3
 80005cc:	2b19      	cmp	r3, #25
 80005ce:	bf88      	it	hi
 80005d0:	4770      	bxhi	lr
 80005d2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80005d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80005de:	bf18      	it	ne
 80005e0:	4240      	negne	r0, r0
 80005e2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005e6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80005ea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80005ee:	bf18      	it	ne
 80005f0:	4249      	negne	r1, r1
 80005f2:	ea92 0f03 	teq	r2, r3
 80005f6:	d03f      	beq.n	8000678 <__addsf3+0xd8>
 80005f8:	f1a2 0201 	sub.w	r2, r2, #1
 80005fc:	fa41 fc03 	asr.w	ip, r1, r3
 8000600:	eb10 000c 	adds.w	r0, r0, ip
 8000604:	f1c3 0320 	rsb	r3, r3, #32
 8000608:	fa01 f103 	lsl.w	r1, r1, r3
 800060c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000610:	d502      	bpl.n	8000618 <__addsf3+0x78>
 8000612:	4249      	negs	r1, r1
 8000614:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000618:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800061c:	d313      	bcc.n	8000646 <__addsf3+0xa6>
 800061e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000622:	d306      	bcc.n	8000632 <__addsf3+0x92>
 8000624:	0840      	lsrs	r0, r0, #1
 8000626:	ea4f 0131 	mov.w	r1, r1, rrx
 800062a:	f102 0201 	add.w	r2, r2, #1
 800062e:	2afe      	cmp	r2, #254	; 0xfe
 8000630:	d251      	bcs.n	80006d6 <__addsf3+0x136>
 8000632:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000636:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800063a:	bf08      	it	eq
 800063c:	f020 0001 	biceq.w	r0, r0, #1
 8000640:	ea40 0003 	orr.w	r0, r0, r3
 8000644:	4770      	bx	lr
 8000646:	0049      	lsls	r1, r1, #1
 8000648:	eb40 0000 	adc.w	r0, r0, r0
 800064c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000650:	f1a2 0201 	sub.w	r2, r2, #1
 8000654:	d1ed      	bne.n	8000632 <__addsf3+0x92>
 8000656:	fab0 fc80 	clz	ip, r0
 800065a:	f1ac 0c08 	sub.w	ip, ip, #8
 800065e:	ebb2 020c 	subs.w	r2, r2, ip
 8000662:	fa00 f00c 	lsl.w	r0, r0, ip
 8000666:	bfaa      	itet	ge
 8000668:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800066c:	4252      	neglt	r2, r2
 800066e:	4318      	orrge	r0, r3
 8000670:	bfbc      	itt	lt
 8000672:	40d0      	lsrlt	r0, r2
 8000674:	4318      	orrlt	r0, r3
 8000676:	4770      	bx	lr
 8000678:	f092 0f00 	teq	r2, #0
 800067c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000680:	bf06      	itte	eq
 8000682:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000686:	3201      	addeq	r2, #1
 8000688:	3b01      	subne	r3, #1
 800068a:	e7b5      	b.n	80005f8 <__addsf3+0x58>
 800068c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000690:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000694:	bf18      	it	ne
 8000696:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800069a:	d021      	beq.n	80006e0 <__addsf3+0x140>
 800069c:	ea92 0f03 	teq	r2, r3
 80006a0:	d004      	beq.n	80006ac <__addsf3+0x10c>
 80006a2:	f092 0f00 	teq	r2, #0
 80006a6:	bf08      	it	eq
 80006a8:	4608      	moveq	r0, r1
 80006aa:	4770      	bx	lr
 80006ac:	ea90 0f01 	teq	r0, r1
 80006b0:	bf1c      	itt	ne
 80006b2:	2000      	movne	r0, #0
 80006b4:	4770      	bxne	lr
 80006b6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80006ba:	d104      	bne.n	80006c6 <__addsf3+0x126>
 80006bc:	0040      	lsls	r0, r0, #1
 80006be:	bf28      	it	cs
 80006c0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80006c4:	4770      	bx	lr
 80006c6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80006ca:	bf3c      	itt	cc
 80006cc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80006d0:	4770      	bxcc	lr
 80006d2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006d6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80006da:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006de:	4770      	bx	lr
 80006e0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006e4:	bf16      	itet	ne
 80006e6:	4608      	movne	r0, r1
 80006e8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006ec:	4601      	movne	r1, r0
 80006ee:	0242      	lsls	r2, r0, #9
 80006f0:	bf06      	itte	eq
 80006f2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006f6:	ea90 0f01 	teqeq	r0, r1
 80006fa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80006fe:	4770      	bx	lr

08000700 <__aeabi_ui2f>:
 8000700:	f04f 0300 	mov.w	r3, #0
 8000704:	e004      	b.n	8000710 <__aeabi_i2f+0x8>
 8000706:	bf00      	nop

08000708 <__aeabi_i2f>:
 8000708:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800070c:	bf48      	it	mi
 800070e:	4240      	negmi	r0, r0
 8000710:	ea5f 0c00 	movs.w	ip, r0
 8000714:	bf08      	it	eq
 8000716:	4770      	bxeq	lr
 8000718:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800071c:	4601      	mov	r1, r0
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	e01c      	b.n	800075e <__aeabi_l2f+0x2a>

08000724 <__aeabi_ul2f>:
 8000724:	ea50 0201 	orrs.w	r2, r0, r1
 8000728:	bf08      	it	eq
 800072a:	4770      	bxeq	lr
 800072c:	f04f 0300 	mov.w	r3, #0
 8000730:	e00a      	b.n	8000748 <__aeabi_l2f+0x14>
 8000732:	bf00      	nop

08000734 <__aeabi_l2f>:
 8000734:	ea50 0201 	orrs.w	r2, r0, r1
 8000738:	bf08      	it	eq
 800073a:	4770      	bxeq	lr
 800073c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000740:	d502      	bpl.n	8000748 <__aeabi_l2f+0x14>
 8000742:	4240      	negs	r0, r0
 8000744:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000748:	ea5f 0c01 	movs.w	ip, r1
 800074c:	bf02      	ittt	eq
 800074e:	4684      	moveq	ip, r0
 8000750:	4601      	moveq	r1, r0
 8000752:	2000      	moveq	r0, #0
 8000754:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000758:	bf08      	it	eq
 800075a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800075e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000762:	fabc f28c 	clz	r2, ip
 8000766:	3a08      	subs	r2, #8
 8000768:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800076c:	db10      	blt.n	8000790 <__aeabi_l2f+0x5c>
 800076e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000772:	4463      	add	r3, ip
 8000774:	fa00 fc02 	lsl.w	ip, r0, r2
 8000778:	f1c2 0220 	rsb	r2, r2, #32
 800077c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000780:	fa20 f202 	lsr.w	r2, r0, r2
 8000784:	eb43 0002 	adc.w	r0, r3, r2
 8000788:	bf08      	it	eq
 800078a:	f020 0001 	biceq.w	r0, r0, #1
 800078e:	4770      	bx	lr
 8000790:	f102 0220 	add.w	r2, r2, #32
 8000794:	fa01 fc02 	lsl.w	ip, r1, r2
 8000798:	f1c2 0220 	rsb	r2, r2, #32
 800079c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80007a0:	fa21 f202 	lsr.w	r2, r1, r2
 80007a4:	eb43 0002 	adc.w	r0, r3, r2
 80007a8:	bf08      	it	eq
 80007aa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007ae:	4770      	bx	lr

080007b0 <__aeabi_fmul>:
 80007b0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80007b8:	bf1e      	ittt	ne
 80007ba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80007be:	ea92 0f0c 	teqne	r2, ip
 80007c2:	ea93 0f0c 	teqne	r3, ip
 80007c6:	d06f      	beq.n	80008a8 <__aeabi_fmul+0xf8>
 80007c8:	441a      	add	r2, r3
 80007ca:	ea80 0c01 	eor.w	ip, r0, r1
 80007ce:	0240      	lsls	r0, r0, #9
 80007d0:	bf18      	it	ne
 80007d2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80007d6:	d01e      	beq.n	8000816 <__aeabi_fmul+0x66>
 80007d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80007dc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007e0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007e4:	fba0 3101 	umull	r3, r1, r0, r1
 80007e8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80007ec:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80007f0:	bf3e      	ittt	cc
 80007f2:	0049      	lslcc	r1, r1, #1
 80007f4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80007f8:	005b      	lslcc	r3, r3, #1
 80007fa:	ea40 0001 	orr.w	r0, r0, r1
 80007fe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000802:	2afd      	cmp	r2, #253	; 0xfd
 8000804:	d81d      	bhi.n	8000842 <__aeabi_fmul+0x92>
 8000806:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800080a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800080e:	bf08      	it	eq
 8000810:	f020 0001 	biceq.w	r0, r0, #1
 8000814:	4770      	bx	lr
 8000816:	f090 0f00 	teq	r0, #0
 800081a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800081e:	bf08      	it	eq
 8000820:	0249      	lsleq	r1, r1, #9
 8000822:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000826:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800082a:	3a7f      	subs	r2, #127	; 0x7f
 800082c:	bfc2      	ittt	gt
 800082e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000832:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000836:	4770      	bxgt	lr
 8000838:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800083c:	f04f 0300 	mov.w	r3, #0
 8000840:	3a01      	subs	r2, #1
 8000842:	dc5d      	bgt.n	8000900 <__aeabi_fmul+0x150>
 8000844:	f112 0f19 	cmn.w	r2, #25
 8000848:	bfdc      	itt	le
 800084a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800084e:	4770      	bxle	lr
 8000850:	f1c2 0200 	rsb	r2, r2, #0
 8000854:	0041      	lsls	r1, r0, #1
 8000856:	fa21 f102 	lsr.w	r1, r1, r2
 800085a:	f1c2 0220 	rsb	r2, r2, #32
 800085e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000862:	ea5f 0031 	movs.w	r0, r1, rrx
 8000866:	f140 0000 	adc.w	r0, r0, #0
 800086a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800086e:	bf08      	it	eq
 8000870:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000874:	4770      	bx	lr
 8000876:	f092 0f00 	teq	r2, #0
 800087a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800087e:	bf02      	ittt	eq
 8000880:	0040      	lsleq	r0, r0, #1
 8000882:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000886:	3a01      	subeq	r2, #1
 8000888:	d0f9      	beq.n	800087e <__aeabi_fmul+0xce>
 800088a:	ea40 000c 	orr.w	r0, r0, ip
 800088e:	f093 0f00 	teq	r3, #0
 8000892:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000896:	bf02      	ittt	eq
 8000898:	0049      	lsleq	r1, r1, #1
 800089a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800089e:	3b01      	subeq	r3, #1
 80008a0:	d0f9      	beq.n	8000896 <__aeabi_fmul+0xe6>
 80008a2:	ea41 010c 	orr.w	r1, r1, ip
 80008a6:	e78f      	b.n	80007c8 <__aeabi_fmul+0x18>
 80008a8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80008ac:	ea92 0f0c 	teq	r2, ip
 80008b0:	bf18      	it	ne
 80008b2:	ea93 0f0c 	teqne	r3, ip
 80008b6:	d00a      	beq.n	80008ce <__aeabi_fmul+0x11e>
 80008b8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80008bc:	bf18      	it	ne
 80008be:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80008c2:	d1d8      	bne.n	8000876 <__aeabi_fmul+0xc6>
 80008c4:	ea80 0001 	eor.w	r0, r0, r1
 80008c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008cc:	4770      	bx	lr
 80008ce:	f090 0f00 	teq	r0, #0
 80008d2:	bf17      	itett	ne
 80008d4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80008d8:	4608      	moveq	r0, r1
 80008da:	f091 0f00 	teqne	r1, #0
 80008de:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80008e2:	d014      	beq.n	800090e <__aeabi_fmul+0x15e>
 80008e4:	ea92 0f0c 	teq	r2, ip
 80008e8:	d101      	bne.n	80008ee <__aeabi_fmul+0x13e>
 80008ea:	0242      	lsls	r2, r0, #9
 80008ec:	d10f      	bne.n	800090e <__aeabi_fmul+0x15e>
 80008ee:	ea93 0f0c 	teq	r3, ip
 80008f2:	d103      	bne.n	80008fc <__aeabi_fmul+0x14c>
 80008f4:	024b      	lsls	r3, r1, #9
 80008f6:	bf18      	it	ne
 80008f8:	4608      	movne	r0, r1
 80008fa:	d108      	bne.n	800090e <__aeabi_fmul+0x15e>
 80008fc:	ea80 0001 	eor.w	r0, r0, r1
 8000900:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000904:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000908:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800090c:	4770      	bx	lr
 800090e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000912:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000916:	4770      	bx	lr

08000918 <__aeabi_fdiv>:
 8000918:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800091c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000920:	bf1e      	ittt	ne
 8000922:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000926:	ea92 0f0c 	teqne	r2, ip
 800092a:	ea93 0f0c 	teqne	r3, ip
 800092e:	d069      	beq.n	8000a04 <__aeabi_fdiv+0xec>
 8000930:	eba2 0203 	sub.w	r2, r2, r3
 8000934:	ea80 0c01 	eor.w	ip, r0, r1
 8000938:	0249      	lsls	r1, r1, #9
 800093a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800093e:	d037      	beq.n	80009b0 <__aeabi_fdiv+0x98>
 8000940:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000944:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000948:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800094c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000950:	428b      	cmp	r3, r1
 8000952:	bf38      	it	cc
 8000954:	005b      	lslcc	r3, r3, #1
 8000956:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800095a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800095e:	428b      	cmp	r3, r1
 8000960:	bf24      	itt	cs
 8000962:	1a5b      	subcs	r3, r3, r1
 8000964:	ea40 000c 	orrcs.w	r0, r0, ip
 8000968:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800096c:	bf24      	itt	cs
 800096e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000972:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000976:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800097a:	bf24      	itt	cs
 800097c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000980:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000984:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000988:	bf24      	itt	cs
 800098a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800098e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000992:	011b      	lsls	r3, r3, #4
 8000994:	bf18      	it	ne
 8000996:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800099a:	d1e0      	bne.n	800095e <__aeabi_fdiv+0x46>
 800099c:	2afd      	cmp	r2, #253	; 0xfd
 800099e:	f63f af50 	bhi.w	8000842 <__aeabi_fmul+0x92>
 80009a2:	428b      	cmp	r3, r1
 80009a4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009a8:	bf08      	it	eq
 80009aa:	f020 0001 	biceq.w	r0, r0, #1
 80009ae:	4770      	bx	lr
 80009b0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80009b4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009b8:	327f      	adds	r2, #127	; 0x7f
 80009ba:	bfc2      	ittt	gt
 80009bc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80009c0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009c4:	4770      	bxgt	lr
 80009c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ca:	f04f 0300 	mov.w	r3, #0
 80009ce:	3a01      	subs	r2, #1
 80009d0:	e737      	b.n	8000842 <__aeabi_fmul+0x92>
 80009d2:	f092 0f00 	teq	r2, #0
 80009d6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80009da:	bf02      	ittt	eq
 80009dc:	0040      	lsleq	r0, r0, #1
 80009de:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009e2:	3a01      	subeq	r2, #1
 80009e4:	d0f9      	beq.n	80009da <__aeabi_fdiv+0xc2>
 80009e6:	ea40 000c 	orr.w	r0, r0, ip
 80009ea:	f093 0f00 	teq	r3, #0
 80009ee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009f2:	bf02      	ittt	eq
 80009f4:	0049      	lsleq	r1, r1, #1
 80009f6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80009fa:	3b01      	subeq	r3, #1
 80009fc:	d0f9      	beq.n	80009f2 <__aeabi_fdiv+0xda>
 80009fe:	ea41 010c 	orr.w	r1, r1, ip
 8000a02:	e795      	b.n	8000930 <__aeabi_fdiv+0x18>
 8000a04:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a08:	ea92 0f0c 	teq	r2, ip
 8000a0c:	d108      	bne.n	8000a20 <__aeabi_fdiv+0x108>
 8000a0e:	0242      	lsls	r2, r0, #9
 8000a10:	f47f af7d 	bne.w	800090e <__aeabi_fmul+0x15e>
 8000a14:	ea93 0f0c 	teq	r3, ip
 8000a18:	f47f af70 	bne.w	80008fc <__aeabi_fmul+0x14c>
 8000a1c:	4608      	mov	r0, r1
 8000a1e:	e776      	b.n	800090e <__aeabi_fmul+0x15e>
 8000a20:	ea93 0f0c 	teq	r3, ip
 8000a24:	d104      	bne.n	8000a30 <__aeabi_fdiv+0x118>
 8000a26:	024b      	lsls	r3, r1, #9
 8000a28:	f43f af4c 	beq.w	80008c4 <__aeabi_fmul+0x114>
 8000a2c:	4608      	mov	r0, r1
 8000a2e:	e76e      	b.n	800090e <__aeabi_fmul+0x15e>
 8000a30:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a34:	bf18      	it	ne
 8000a36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a3a:	d1ca      	bne.n	80009d2 <__aeabi_fdiv+0xba>
 8000a3c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a40:	f47f af5c 	bne.w	80008fc <__aeabi_fmul+0x14c>
 8000a44:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a48:	f47f af3c 	bne.w	80008c4 <__aeabi_fmul+0x114>
 8000a4c:	e75f      	b.n	800090e <__aeabi_fmul+0x15e>
 8000a4e:	bf00      	nop

08000a50 <__gesf2>:
 8000a50:	f04f 3cff 	mov.w	ip, #4294967295
 8000a54:	e006      	b.n	8000a64 <__cmpsf2+0x4>
 8000a56:	bf00      	nop

08000a58 <__lesf2>:
 8000a58:	f04f 0c01 	mov.w	ip, #1
 8000a5c:	e002      	b.n	8000a64 <__cmpsf2+0x4>
 8000a5e:	bf00      	nop

08000a60 <__cmpsf2>:
 8000a60:	f04f 0c01 	mov.w	ip, #1
 8000a64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a68:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a74:	bf18      	it	ne
 8000a76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a7a:	d011      	beq.n	8000aa0 <__cmpsf2+0x40>
 8000a7c:	b001      	add	sp, #4
 8000a7e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000a82:	bf18      	it	ne
 8000a84:	ea90 0f01 	teqne	r0, r1
 8000a88:	bf58      	it	pl
 8000a8a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000a8e:	bf88      	it	hi
 8000a90:	17c8      	asrhi	r0, r1, #31
 8000a92:	bf38      	it	cc
 8000a94:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000a98:	bf18      	it	ne
 8000a9a:	f040 0001 	orrne.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aa4:	d102      	bne.n	8000aac <__cmpsf2+0x4c>
 8000aa6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000aaa:	d105      	bne.n	8000ab8 <__cmpsf2+0x58>
 8000aac:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ab0:	d1e4      	bne.n	8000a7c <__cmpsf2+0x1c>
 8000ab2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ab6:	d0e1      	beq.n	8000a7c <__cmpsf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cfrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4608      	mov	r0, r1
 8000ac4:	4661      	mov	r1, ip
 8000ac6:	e7ff      	b.n	8000ac8 <__aeabi_cfcmpeq>

08000ac8 <__aeabi_cfcmpeq>:
 8000ac8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000aca:	f7ff ffc9 	bl	8000a60 <__cmpsf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ad8 <__aeabi_fcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cfcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_fcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cfcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_fcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cfcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_fcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffd2 	bl	8000ac0 <__aeabi_cfrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_fcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc8 	bl	8000ac0 <__aeabi_cfrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_fcmpun>:
 8000b3c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b48:	d102      	bne.n	8000b50 <__aeabi_fcmpun+0x14>
 8000b4a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b4e:	d108      	bne.n	8000b62 <__aeabi_fcmpun+0x26>
 8000b50:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b54:	d102      	bne.n	8000b5c <__aeabi_fcmpun+0x20>
 8000b56:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_fcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_f2uiz>:
 8000b68:	0042      	lsls	r2, r0, #1
 8000b6a:	d20e      	bcs.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b70:	d30b      	bcc.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b72:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b7a:	d409      	bmi.n	8000b90 <__aeabi_f2uiz+0x28>
 8000b7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b84:	fa23 f002 	lsr.w	r0, r3, r2
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr
 8000b90:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b94:	d101      	bne.n	8000b9a <__aeabi_f2uiz+0x32>
 8000b96:	0242      	lsls	r2, r0, #9
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_f2uiz+0x38>
 8000b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	db0d      	blt.n	8000bd6 <__NVIC_EnableIRQ+0x2e>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	f003 021f 	and.w	r2, r3, #31
 8000bc4:	4906      	ldr	r1, [pc, #24]	; (8000be0 <__NVIC_EnableIRQ+0x38>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	095b      	lsrs	r3, r3, #5
 8000bcc:	2001      	movs	r0, #1
 8000bce:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	e000e100 	.word	0xe000e100

08000be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	6039      	str	r1, [r7, #0]
 8000bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	db0c      	blt.n	8000c12 <__NVIC_SetPriority+0x2e>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <__NVIC_SetPriority+0x54>)
 8000bfe:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8000c02:	4608      	mov	r0, r1
 8000c04:	011b      	lsls	r3, r3, #4
 8000c06:	b2d9      	uxtb	r1, r3
 8000c08:	1813      	adds	r3, r2, r0
 8000c0a:	460a      	mov	r2, r1
 8000c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c10:	e00c      	b.n	8000c2c <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4909      	ldr	r1, [pc, #36]	; (8000c3c <__NVIC_SetPriority+0x58>)
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	f003 030f 	and.w	r3, r3, #15
 8000c22:	3b04      	subs	r3, #4
 8000c24:	0112      	lsls	r2, r2, #4
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	440b      	add	r3, r1
 8000c2a:	761a      	strb	r2, [r3, #24]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000e100 	.word	0xe000e100
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <_Z18SystemClock_Configv>:
#define PLL_M 4
#define PLL_N 168
#define PLL_P 2		//  Main PLL (PLL) division factor for main system clock can be 2 (PLL_P = 0), 4 (PLL_P = 1), 6 (PLL_P = 2), 8 (PLL_P = 3)
#define PLL_Q 0

void SystemClock_Config(void) {
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0

	//NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
	//RCC->APB1ENR |= RCC_APB1ENR_COMPEN;			// Enable comparator
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000c44:	4b43      	ldr	r3, [pc, #268]	; (8000d54 <_Z18SystemClock_Configv+0x114>)
 8000c46:	6a1b      	ldr	r3, [r3, #32]
 8000c48:	4a42      	ldr	r2, [pc, #264]	; (8000d54 <_Z18SystemClock_Configv+0x114>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	6213      	str	r3, [r2, #32]

	RCC->APB1ENR |= RCC_APB1ENR_PWREN;			// Enable Power Control clock
 8000c50:	4b40      	ldr	r3, [pc, #256]	; (8000d54 <_Z18SystemClock_Configv+0x114>)
 8000c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c54:	4a3f      	ldr	r2, [pc, #252]	; (8000d54 <_Z18SystemClock_Configv+0x114>)
 8000c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	6253      	str	r3, [r2, #36]	; 0x24
	PWR->CR |= PWR_CR_VOS_0;					// Enable VOS voltage scaling - allows maximum clock speed
 8000c5c:	4b3e      	ldr	r3, [pc, #248]	; (8000d58 <_Z18SystemClock_Configv+0x118>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a3d      	ldr	r2, [pc, #244]	; (8000d58 <_Z18SystemClock_Configv+0x118>)
 8000c62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c66:	6013      	str	r3, [r2, #0]
	PWR->CR &= ~PWR_CR_VOS_1;
 8000c68:	4b3b      	ldr	r3, [pc, #236]	; (8000d58 <_Z18SystemClock_Configv+0x118>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a3a      	ldr	r2, [pc, #232]	; (8000d58 <_Z18SystemClock_Configv+0x118>)
 8000c6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c72:	6013      	str	r3, [r2, #0]
	while (PWR->CSR & PWR_CSR_VOSF);			// Wait until VOS scaling is finished
 8000c74:	4b38      	ldr	r3, [pc, #224]	; (8000d58 <_Z18SystemClock_Configv+0x118>)
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 0310 	and.w	r3, r3, #16
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	bf14      	ite	ne
 8000c80:	2301      	movne	r3, #1
 8000c82:	2300      	moveq	r3, #0
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d000      	beq.n	8000c8c <_Z18SystemClock_Configv+0x4c>
 8000c8a:	e7f3      	b.n	8000c74 <_Z18SystemClock_Configv+0x34>

	//SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));// CPACR register: set full access privileges for coprocessors

	RCC->CR |= RCC_CR_HSEON;					// HSE ON
 8000c8c:	4b31      	ldr	r3, [pc, #196]	; (8000d54 <_Z18SystemClock_Configv+0x114>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a30      	ldr	r2, [pc, #192]	; (8000d54 <_Z18SystemClock_Configv+0x114>)
 8000c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c96:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_HSERDY) == 0);		// Wait till HSE is ready
 8000c98:	4b2e      	ldr	r3, [pc, #184]	; (8000d54 <_Z18SystemClock_Configv+0x114>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	bf0c      	ite	eq
 8000ca4:	2301      	moveq	r3, #1
 8000ca6:	2300      	movne	r3, #0
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d000      	beq.n	8000cb0 <_Z18SystemClock_Configv+0x70>
 8000cae:	e7f3      	b.n	8000c98 <_Z18SystemClock_Configv+0x58>
	RCC->CFGR |= RCC_CFGR_PLLDIV2;				// 01: PLLVCO/2; 10: PLLVCO/3; 11: PLLVCO/4
 8000cb0:	4b28      	ldr	r3, [pc, #160]	; (8000d54 <_Z18SystemClock_Configv+0x114>)
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	4a27      	ldr	r2, [pc, #156]	; (8000d54 <_Z18SystemClock_Configv+0x114>)
 8000cb6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cba:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PLLMUL4;				// 0011: PLLVCO = PLL clock entry x 8
 8000cbc:	4b25      	ldr	r3, [pc, #148]	; (8000d54 <_Z18SystemClock_Configv+0x114>)
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	4a24      	ldr	r2, [pc, #144]	; (8000d54 <_Z18SystemClock_Configv+0x114>)
 8000cc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cc6:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PLLSRC_HSE;			// 0: HSI oscillator clock selected as PLL input clock; 1: HSE oscillator clock selected as PLL input clock
 8000cc8:	4b22      	ldr	r3, [pc, #136]	; (8000d54 <_Z18SystemClock_Configv+0x114>)
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	4a21      	ldr	r2, [pc, #132]	; (8000d54 <_Z18SystemClock_Configv+0x114>)
 8000cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cd2:	6093      	str	r3, [r2, #8]

    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;			// AHB prescaler
 8000cd4:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <_Z18SystemClock_Configv+0x114>)
 8000cd6:	4a1f      	ldr	r2, [pc, #124]	; (8000d54 <_Z18SystemClock_Configv+0x114>)
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;			// APB low-speed prescaler (APB1)
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <_Z18SystemClock_Configv+0x114>)
 8000cde:	4a1d      	ldr	r2, [pc, #116]	; (8000d54 <_Z18SystemClock_Configv+0x114>)
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;			// APB low-speed prescaler (APB2)
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <_Z18SystemClock_Configv+0x114>)
 8000ce6:	4a1b      	ldr	r2, [pc, #108]	; (8000d54 <_Z18SystemClock_Configv+0x114>)
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	6093      	str	r3, [r2, #8]

	RCC->CR |= RCC_CR_PLLON;					// Enable the main PLL
 8000cec:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <_Z18SystemClock_Configv+0x114>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a18      	ldr	r2, [pc, #96]	; (8000d54 <_Z18SystemClock_Configv+0x114>)
 8000cf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cf6:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);		// Wait till the main PLL is ready
 8000cf8:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <_Z18SystemClock_Configv+0x114>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	bf0c      	ite	eq
 8000d04:	2301      	moveq	r3, #1
 8000d06:	2300      	movne	r3, #0
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d000      	beq.n	8000d10 <_Z18SystemClock_Configv+0xd0>
 8000d0e:	e7f3      	b.n	8000cf8 <_Z18SystemClock_Configv+0xb8>


	//	Turn on HSI - Needed for ADC to function
	RCC->CR |= RCC_CR_HSION;
 8000d10:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <_Z18SystemClock_Configv+0x114>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a0f      	ldr	r2, [pc, #60]	; (8000d54 <_Z18SystemClock_Configv+0x114>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6013      	str	r3, [r2, #0]

	// Configure Flash prefetch, Instruction cache, Data cache and wait state
//	FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY;		//  | FLASH_ACR_ICEN | FLASH_ACR_DCEN

	// Select the main PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 8000d1c:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <_Z18SystemClock_Configv+0x114>)
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	4a0c      	ldr	r2, [pc, #48]	; (8000d54 <_Z18SystemClock_Configv+0x114>)
 8000d22:	f023 0303 	bic.w	r3, r3, #3
 8000d26:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000d28:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <_Z18SystemClock_Configv+0x114>)
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	4a09      	ldr	r2, [pc, #36]	; (8000d54 <_Z18SystemClock_Configv+0x114>)
 8000d2e:	f043 0303 	orr.w	r3, r3, #3
 8000d32:	6093      	str	r3, [r2, #8]

	// Wait till the main PLL is used as system clock source
	while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000d34:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <_Z18SystemClock_Configv+0x114>)
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	f003 030c 	and.w	r3, r3, #12
 8000d3c:	2b0c      	cmp	r3, #12
 8000d3e:	bf14      	ite	ne
 8000d40:	2301      	movne	r3, #1
 8000d42:	2300      	moveq	r3, #0
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d000      	beq.n	8000d4c <_Z18SystemClock_Configv+0x10c>
 8000d4a:	e7f3      	b.n	8000d34 <_Z18SystemClock_Configv+0xf4>

}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40007000 	.word	0x40007000

08000d5c <_Z7InitADCv>:
	ADC1->CR2 |= ADC_CR2_ADON;						// Activate ADC
}


void InitADC(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
	//	Setup Timer 2 to trigger ADC
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;				// Enable Timer 2 clock
 8000d60:	4b9d      	ldr	r3, [pc, #628]	; (8000fd8 <_Z7InitADCv+0x27c>)
 8000d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d64:	4a9c      	ldr	r2, [pc, #624]	; (8000fd8 <_Z7InitADCv+0x27c>)
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	6253      	str	r3, [r2, #36]	; 0x24
	TIM2->CR2 |= TIM_CR2_MMS_2;						// 100: Compare - OC1REF signal is used as trigger output (TRGO)
 8000d6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d7a:	6053      	str	r3, [r2, #4]
	TIM2->PSC = 20 - 1;								// Prescaler
 8000d7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d80:	2213      	movs	r2, #19
 8000d82:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 100 - 1;							// Auto-reload register (ie reset counter) divided by 100
 8000d84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d88:	2263      	movs	r2, #99	; 0x63
 8000d8a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR1 = 50 - 1;							// Capture and compare - ie when counter hits this number PWM high
 8000d8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d90:	2231      	movs	r2, #49	; 0x31
 8000d92:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCER |= TIM_CCER_CC1E;					// Capture/Compare 1 output enable
 8000d94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d98:	6a1b      	ldr	r3, [r3, #32]
 8000d9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	6213      	str	r3, [r2, #32]
	TIM2->CCMR1 |= TIM_CCMR1_OC1M_1 |TIM_CCMR1_OC1M_2;	// 110 PWM Mode 1
 8000da4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000db2:	6193      	str	r3, [r2, #24]
	TIM2->CR1 |= TIM_CR1_CEN;
 8000db4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	6013      	str	r3, [r2, #0]

	// Enable ADC2 and GPIO clock sources
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000dc4:	4b84      	ldr	r3, [pc, #528]	; (8000fd8 <_Z7InitADCv+0x27c>)
 8000dc6:	69db      	ldr	r3, [r3, #28]
 8000dc8:	4a83      	ldr	r2, [pc, #524]	; (8000fd8 <_Z7InitADCv+0x27c>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	61d3      	str	r3, [r2, #28]
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000dd0:	4b81      	ldr	r3, [pc, #516]	; (8000fd8 <_Z7InitADCv+0x27c>)
 8000dd2:	69db      	ldr	r3, [r3, #28]
 8000dd4:	4a80      	ldr	r2, [pc, #512]	; (8000fd8 <_Z7InitADCv+0x27c>)
 8000dd6:	f043 0302 	orr.w	r3, r3, #2
 8000dda:	61d3      	str	r3, [r2, #28]
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000ddc:	4b7e      	ldr	r3, [pc, #504]	; (8000fd8 <_Z7InitADCv+0x27c>)
 8000dde:	69db      	ldr	r3, [r3, #28]
 8000de0:	4a7d      	ldr	r2, [pc, #500]	; (8000fd8 <_Z7InitADCv+0x27c>)
 8000de2:	f043 0304 	orr.w	r3, r3, #4
 8000de6:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000de8:	4b7b      	ldr	r3, [pc, #492]	; (8000fd8 <_Z7InitADCv+0x27c>)
 8000dea:	6a1b      	ldr	r3, [r3, #32]
 8000dec:	4a7a      	ldr	r2, [pc, #488]	; (8000fd8 <_Z7InitADCv+0x27c>)
 8000dee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000df2:	6213      	str	r3, [r2, #32]

	// Enable ADC - Set Pins to Analog mode (0b11)
	GPIOA->MODER |= GPIO_MODER_MODER0;				// Set PA0 ADC_IN0
 8000df4:	4b79      	ldr	r3, [pc, #484]	; (8000fdc <_Z7InitADCv+0x280>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a78      	ldr	r2, [pc, #480]	; (8000fdc <_Z7InitADCv+0x280>)
 8000dfa:	f043 0303 	orr.w	r3, r3, #3
 8000dfe:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER1;				// Set PA1 ADC_IN1
 8000e00:	4b76      	ldr	r3, [pc, #472]	; (8000fdc <_Z7InitADCv+0x280>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a75      	ldr	r2, [pc, #468]	; (8000fdc <_Z7InitADCv+0x280>)
 8000e06:	f043 030c 	orr.w	r3, r3, #12
 8000e0a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER2;				// Set PA2 ADC_IN2
 8000e0c:	4b73      	ldr	r3, [pc, #460]	; (8000fdc <_Z7InitADCv+0x280>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a72      	ldr	r2, [pc, #456]	; (8000fdc <_Z7InitADCv+0x280>)
 8000e12:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000e16:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER3;				// Set PA3 ADC_IN3
 8000e18:	4b70      	ldr	r3, [pc, #448]	; (8000fdc <_Z7InitADCv+0x280>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a6f      	ldr	r2, [pc, #444]	; (8000fdc <_Z7InitADCv+0x280>)
 8000e1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000e22:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER4;				// Set PA4 ADC_IN4
 8000e24:	4b6d      	ldr	r3, [pc, #436]	; (8000fdc <_Z7InitADCv+0x280>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a6c      	ldr	r2, [pc, #432]	; (8000fdc <_Z7InitADCv+0x280>)
 8000e2a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000e2e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER5;				// Set PA5 ADC_IN5
 8000e30:	4b6a      	ldr	r3, [pc, #424]	; (8000fdc <_Z7InitADCv+0x280>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a69      	ldr	r2, [pc, #420]	; (8000fdc <_Z7InitADCv+0x280>)
 8000e36:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000e3a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER6;				// Set PA6 ADC_IN6 *** Not Working
 8000e3c:	4b67      	ldr	r3, [pc, #412]	; (8000fdc <_Z7InitADCv+0x280>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a66      	ldr	r2, [pc, #408]	; (8000fdc <_Z7InitADCv+0x280>)
 8000e42:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000e46:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER7;				// Set PA7 ADC_IN7
 8000e48:	4b64      	ldr	r3, [pc, #400]	; (8000fdc <_Z7InitADCv+0x280>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a63      	ldr	r2, [pc, #396]	; (8000fdc <_Z7InitADCv+0x280>)
 8000e4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e52:	6013      	str	r3, [r2, #0]

	GPIOB->MODER |= GPIO_MODER_MODER0;				// Set PB0 ADC_IN8
 8000e54:	4b62      	ldr	r3, [pc, #392]	; (8000fe0 <_Z7InitADCv+0x284>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a61      	ldr	r2, [pc, #388]	; (8000fe0 <_Z7InitADCv+0x284>)
 8000e5a:	f043 0303 	orr.w	r3, r3, #3
 8000e5e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODER1;				// Set PB1 ADC_IN9 *** Not working
 8000e60:	4b5f      	ldr	r3, [pc, #380]	; (8000fe0 <_Z7InitADCv+0x284>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a5e      	ldr	r2, [pc, #376]	; (8000fe0 <_Z7InitADCv+0x284>)
 8000e66:	f043 030c 	orr.w	r3, r3, #12
 8000e6a:	6013      	str	r3, [r2, #0]

	GPIOB->MODER |= GPIO_MODER_MODER12;				// Set PB12 ADC_IN18
 8000e6c:	4b5c      	ldr	r3, [pc, #368]	; (8000fe0 <_Z7InitADCv+0x284>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a5b      	ldr	r2, [pc, #364]	; (8000fe0 <_Z7InitADCv+0x284>)
 8000e72:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8000e76:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODER13;				// Set PB13 ADC_IN19 *** Not Working
 8000e78:	4b59      	ldr	r3, [pc, #356]	; (8000fe0 <_Z7InitADCv+0x284>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a58      	ldr	r2, [pc, #352]	; (8000fe0 <_Z7InitADCv+0x284>)
 8000e7e:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 8000e82:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODER14;				// Set PB14 ADC_IN20 *** Not Working
 8000e84:	4b56      	ldr	r3, [pc, #344]	; (8000fe0 <_Z7InitADCv+0x284>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a55      	ldr	r2, [pc, #340]	; (8000fe0 <_Z7InitADCv+0x284>)
 8000e8a:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000e8e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODER15;				// Set PB15 ADC_IN21
 8000e90:	4b53      	ldr	r3, [pc, #332]	; (8000fe0 <_Z7InitADCv+0x284>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a52      	ldr	r2, [pc, #328]	; (8000fe0 <_Z7InitADCv+0x284>)
 8000e96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000e9a:	6013      	str	r3, [r2, #0]

	ADC1->CR1 |= ADC_CR1_SCAN;						// Activate scan mode
 8000e9c:	4b51      	ldr	r3, [pc, #324]	; (8000fe4 <_Z7InitADCv+0x288>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	4a50      	ldr	r2, [pc, #320]	; (8000fe4 <_Z7InitADCv+0x288>)
 8000ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea6:	6053      	str	r3, [r2, #4]
	ADC1->SQR1 = (ADC_BUFFER_LENGTH - 1) << 20;		// Number of conversions in sequence
 8000ea8:	4b4e      	ldr	r3, [pc, #312]	; (8000fe4 <_Z7InitADCv+0x288>)
 8000eaa:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000eae:	631a      	str	r2, [r3, #48]	; 0x30
	ADC1->SQR5 |= 18 << 0;							// Set IN8  1st conversion in sequence
 8000eb0:	4b4c      	ldr	r3, [pc, #304]	; (8000fe4 <_Z7InitADCv+0x288>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	4a4b      	ldr	r2, [pc, #300]	; (8000fe4 <_Z7InitADCv+0x288>)
 8000eb6:	f043 0312 	orr.w	r3, r3, #18
 8000eba:	6413      	str	r3, [r2, #64]	; 0x40
	ADC1->SQR5 |= 19 << 5;							// Set IN9  2nd conversion in sequence
 8000ebc:	4b49      	ldr	r3, [pc, #292]	; (8000fe4 <_Z7InitADCv+0x288>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	4a48      	ldr	r2, [pc, #288]	; (8000fe4 <_Z7InitADCv+0x288>)
 8000ec2:	f443 7318 	orr.w	r3, r3, #608	; 0x260
 8000ec6:	6413      	str	r3, [r2, #64]	; 0x40
	ADC1->SQR5 |= 20 << 10;							// Set IN1  3rd conversion in sequence
 8000ec8:	4b46      	ldr	r3, [pc, #280]	; (8000fe4 <_Z7InitADCv+0x288>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ecc:	4a45      	ldr	r2, [pc, #276]	; (8000fe4 <_Z7InitADCv+0x288>)
 8000ece:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 8000ed2:	6413      	str	r3, [r2, #64]	; 0x40
	ADC1->SQR5 |= 9 << 15;							// Set IN2  4th conversion in sequence
 8000ed4:	4b43      	ldr	r3, [pc, #268]	; (8000fe4 <_Z7InitADCv+0x288>)
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed8:	4a42      	ldr	r2, [pc, #264]	; (8000fe4 <_Z7InitADCv+0x288>)
 8000eda:	f443 2390 	orr.w	r3, r3, #294912	; 0x48000
 8000ede:	6413      	str	r3, [r2, #64]	; 0x40
//	ADC1->SQR4 |= 7 << 10;							// Set IN7  9th conversion in sequence
//	ADC1->SQR4 |= 11 << 15;							// Set IN11 10th conversion in sequence

	//	Set to 56 cycles (0b11) sampling speed (SMPR2 Left shift speed 3 x ADC_INx up to input 9; use SMPR1 from 0 for ADC_IN10+)
	// 000: 3 cycles; 001: 15 cycles; 010: 28 cycles; 011: 56 cycles; 100: 84 cycles; 101: 112 cycles; 110: 144 cycles; 111: 480 cycles
	ADC1->SMPR2 |= 0b110 << 24;						// Set speed of IN8
 8000ee0:	4b40      	ldr	r3, [pc, #256]	; (8000fe4 <_Z7InitADCv+0x288>)
 8000ee2:	691b      	ldr	r3, [r3, #16]
 8000ee4:	4a3f      	ldr	r2, [pc, #252]	; (8000fe4 <_Z7InitADCv+0x288>)
 8000ee6:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8000eea:	6113      	str	r3, [r2, #16]
	ADC1->SMPR2 |= 0b110 << 27;						// Set speed of IN9
 8000eec:	4b3d      	ldr	r3, [pc, #244]	; (8000fe4 <_Z7InitADCv+0x288>)
 8000eee:	691b      	ldr	r3, [r3, #16]
 8000ef0:	4a3c      	ldr	r2, [pc, #240]	; (8000fe4 <_Z7InitADCv+0x288>)
 8000ef2:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000ef6:	6113      	str	r3, [r2, #16]
	ADC1->SMPR2 |= 0b110 << 3;						// Set speed of IN1
 8000ef8:	4b3a      	ldr	r3, [pc, #232]	; (8000fe4 <_Z7InitADCv+0x288>)
 8000efa:	691b      	ldr	r3, [r3, #16]
 8000efc:	4a39      	ldr	r2, [pc, #228]	; (8000fe4 <_Z7InitADCv+0x288>)
 8000efe:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000f02:	6113      	str	r3, [r2, #16]
	ADC1->SMPR2 |= 0b110 << 6;						// Set speed of IN2
 8000f04:	4b37      	ldr	r3, [pc, #220]	; (8000fe4 <_Z7InitADCv+0x288>)
 8000f06:	691b      	ldr	r3, [r3, #16]
 8000f08:	4a36      	ldr	r2, [pc, #216]	; (8000fe4 <_Z7InitADCv+0x288>)
 8000f0a:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8000f0e:	6113      	str	r3, [r2, #16]
//	ADC1->SMPR1 |= 0b110 << 6;						// Set speed of IN12
//	ADC1->SMPR1 |= 0b110 << 12;						// Set speed of IN14
//	ADC1->SMPR2 |= 0b110 << 21;						// Set speed of IN7
//	ADC1->SMPR1 |= 0b110 << 3;						// Set speed of IN11

	ADC1->CR2 |= ADC_CR2_EOCS;						// Trigger interrupt on end of each individual conversion
 8000f10:	4b34      	ldr	r3, [pc, #208]	; (8000fe4 <_Z7InitADCv+0x288>)
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	4a33      	ldr	r2, [pc, #204]	; (8000fe4 <_Z7InitADCv+0x288>)
 8000f16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f1a:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_EXTEN_0;					// ADC hardware trigger 00: Trigger detection disabled; 01: Trigger detection on the rising edge; 10: Trigger detection on the falling edge; 11: Trigger detection on both the rising and falling edges
 8000f1c:	4b31      	ldr	r3, [pc, #196]	; (8000fe4 <_Z7InitADCv+0x288>)
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	4a30      	ldr	r2, [pc, #192]	; (8000fe4 <_Z7InitADCv+0x288>)
 8000f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f26:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_EXTSEL_1 | ADC_CR2_EXTSEL_2;	// ADC External trigger: 0110 = TIM2_TRGO event
 8000f28:	4b2e      	ldr	r3, [pc, #184]	; (8000fe4 <_Z7InitADCv+0x288>)
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	4a2d      	ldr	r2, [pc, #180]	; (8000fe4 <_Z7InitADCv+0x288>)
 8000f2e:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8000f32:	6093      	str	r3, [r2, #8]

	// Enable DMA - DMA1, Channel 1  = ADC1 (Manual p255)
	ADC1->CR2 |= ADC_CR2_DMA;						// Enable DMA Mode on ADC
 8000f34:	4b2b      	ldr	r3, [pc, #172]	; (8000fe4 <_Z7InitADCv+0x288>)
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	4a2a      	ldr	r2, [pc, #168]	; (8000fe4 <_Z7InitADCv+0x288>)
 8000f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3e:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_DDS;						// DMA requests are issued as long as data are converted and DMA=1
 8000f40:	4b28      	ldr	r3, [pc, #160]	; (8000fe4 <_Z7InitADCv+0x288>)
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	4a27      	ldr	r2, [pc, #156]	; (8000fe4 <_Z7InitADCv+0x288>)
 8000f46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f4a:	6093      	str	r3, [r2, #8]
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8000f4c:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <_Z7InitADCv+0x27c>)
 8000f4e:	69db      	ldr	r3, [r3, #28]
 8000f50:	4a21      	ldr	r2, [pc, #132]	; (8000fd8 <_Z7InitADCv+0x27c>)
 8000f52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f56:	61d3      	str	r3, [r2, #28]

	DMA1_Channel1->CCR &= ~DMA_CCR_DIR;				// 00 = Peripheral-to-memory
 8000f58:	4b23      	ldr	r3, [pc, #140]	; (8000fe8 <_Z7InitADCv+0x28c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a22      	ldr	r2, [pc, #136]	; (8000fe8 <_Z7InitADCv+0x28c>)
 8000f5e:	f023 0310 	bic.w	r3, r3, #16
 8000f62:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_PL_1;				// Priority: 00 = low; 01 = Medium; 10 = High; 11 = Very High
 8000f64:	4b20      	ldr	r3, [pc, #128]	; (8000fe8 <_Z7InitADCv+0x28c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a1f      	ldr	r2, [pc, #124]	; (8000fe8 <_Z7InitADCv+0x28c>)
 8000f6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f6e:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_PSIZE_0;			// Peripheral size: 8 bit; 01 = 16 bit; 10 = 32 bit
 8000f70:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <_Z7InitADCv+0x28c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a1c      	ldr	r2, [pc, #112]	; (8000fe8 <_Z7InitADCv+0x28c>)
 8000f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f7a:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_MSIZE_0;			// Memory size: 8 bit; 01 = 16 bit; 10 = 32 bit
 8000f7c:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <_Z7InitADCv+0x28c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a19      	ldr	r2, [pc, #100]	; (8000fe8 <_Z7InitADCv+0x28c>)
 8000f82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f86:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &= ~DMA_CCR_PINC;			// Peripheral not in increment mode
 8000f88:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <_Z7InitADCv+0x28c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a16      	ldr	r2, [pc, #88]	; (8000fe8 <_Z7InitADCv+0x28c>)
 8000f8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f92:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_MINC;				// Memory in increment mode
 8000f94:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <_Z7InitADCv+0x28c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a13      	ldr	r2, [pc, #76]	; (8000fe8 <_Z7InitADCv+0x28c>)
 8000f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f9e:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_CIRC;				// circular mode to keep refilling buffer
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <_Z7InitADCv+0x28c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a10      	ldr	r2, [pc, #64]	; (8000fe8 <_Z7InitADCv+0x28c>)
 8000fa6:	f043 0320 	orr.w	r3, r3, #32
 8000faa:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &= ~DMA_CCR_DIR;				// data transfer direction: 00: peripheral-to-memory; 01: memory-to-peripheral; 10: memory-to-memory
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <_Z7InitADCv+0x28c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <_Z7InitADCv+0x28c>)
 8000fb2:	f023 0310 	bic.w	r3, r3, #16
 8000fb6:	6013      	str	r3, [r2, #0]

	DMA1_Channel1->CNDTR |= ADC_BUFFER_LENGTH * 4;	// Number of data items to transfer (ie size of ADC buffer)
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <_Z7InitADCv+0x28c>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <_Z7InitADCv+0x28c>)
 8000fbe:	f043 0310 	orr.w	r3, r3, #16
 8000fc2:	6053      	str	r3, [r2, #4]
	DMA1_Channel1->CPAR = (uint32_t)(&(ADC1->DR));	// Configure the peripheral data register address
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <_Z7InitADCv+0x28c>)
 8000fc6:	4a09      	ldr	r2, [pc, #36]	; (8000fec <_Z7InitADCv+0x290>)
 8000fc8:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CMAR = (uint32_t)(ADC_array);	// Configure the memory address (note that M1AR is used for double-buffer mode)
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <_Z7InitADCv+0x28c>)
 8000fcc:	4a08      	ldr	r2, [pc, #32]	; (8000ff0 <_Z7InitADCv+0x294>)
 8000fce:	60da      	str	r2, [r3, #12]
	//DMA1_Channel1->CCR |= DMA_CCR_CHSEL_0;		// channel select to 1 for ADC2

	DMA1_Channel1->CCR |= DMA_CCR_EN;				// Enable DMA2
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <_Z7InitADCv+0x28c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	e00e      	b.n	8000ff4 <_Z7InitADCv+0x298>
 8000fd6:	bf00      	nop
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	40012400 	.word	0x40012400
 8000fe8:	40026008 	.word	0x40026008
 8000fec:	40012458 	.word	0x40012458
 8000ff0:	20000090 	.word	0x20000090
 8000ff4:	4a06      	ldr	r2, [pc, #24]	; (8001010 <_Z7InitADCv+0x2b4>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	6013      	str	r3, [r2, #0]
	ADC1->CR2 |= ADC_CR2_ADON;						// Activate ADC
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <_Z7InitADCv+0x2b8>)
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	4a04      	ldr	r2, [pc, #16]	; (8001014 <_Z7InitADCv+0x2b8>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	6093      	str	r3, [r2, #8]
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	40026008 	.word	0x40026008
 8001014:	40012400 	.word	0x40012400

08001018 <_Z6InitIOv>:

void InitIO()
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;			// reset and clock control - advanced high performance bus - GPIO port A
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <_Z6InitIOv+0x30>)
 800101e:	69db      	ldr	r3, [r3, #28]
 8001020:	4a09      	ldr	r2, [pc, #36]	; (8001048 <_Z6InitIOv+0x30>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	61d3      	str	r3, [r2, #28]
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;			// reset and clock control - advanced high performance bus - GPIO port B
 8001028:	4b07      	ldr	r3, [pc, #28]	; (8001048 <_Z6InitIOv+0x30>)
 800102a:	69db      	ldr	r3, [r3, #28]
 800102c:	4a06      	ldr	r2, [pc, #24]	; (8001048 <_Z6InitIOv+0x30>)
 800102e:	f043 0302 	orr.w	r3, r3, #2
 8001032:	61d3      	str	r3, [r2, #28]
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;			// reset and clock control - advanced high performance bus - GPIO port C
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <_Z6InitIOv+0x30>)
 8001036:	69db      	ldr	r3, [r3, #28]
 8001038:	4a03      	ldr	r2, [pc, #12]	; (8001048 <_Z6InitIOv+0x30>)
 800103a:	f043 0304 	orr.w	r3, r3, #4
 800103e:	61d3      	str	r3, [r2, #28]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr
 8001048:	40023800 	.word	0x40023800

0800104c <_Z7InitSPIv>:
}

*/

void InitSPI()
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
	//	Enable GPIO and SPI clocks
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;			// reset and clock control - advanced high performance bus - GPIO port A
 8001050:	4b3a      	ldr	r3, [pc, #232]	; (800113c <_Z7InitSPIv+0xf0>)
 8001052:	69db      	ldr	r3, [r3, #28]
 8001054:	4a39      	ldr	r2, [pc, #228]	; (800113c <_Z7InitSPIv+0xf0>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	61d3      	str	r3, [r2, #28]
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;			// reset and clock control - advanced high performance bus - GPIO port B
 800105c:	4b37      	ldr	r3, [pc, #220]	; (800113c <_Z7InitSPIv+0xf0>)
 800105e:	69db      	ldr	r3, [r3, #28]
 8001060:	4a36      	ldr	r2, [pc, #216]	; (800113c <_Z7InitSPIv+0xf0>)
 8001062:	f043 0302 	orr.w	r3, r3, #2
 8001066:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8001068:	4b34      	ldr	r3, [pc, #208]	; (800113c <_Z7InitSPIv+0xf0>)
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	4a33      	ldr	r2, [pc, #204]	; (800113c <_Z7InitSPIv+0xf0>)
 800106e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001072:	6213      	str	r3, [r2, #32]

	// PB5 (57): SPI_MOSI [alternate function AF5]
	GPIOB->MODER |= GPIO_MODER_MODER5_1;			// 00: Input (reset state)	01: General purpose output mode	10: Alternate function mode	11: Analog mode
 8001074:	4b32      	ldr	r3, [pc, #200]	; (8001140 <_Z7InitSPIv+0xf4>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a31      	ldr	r2, [pc, #196]	; (8001140 <_Z7InitSPIv+0xf4>)
 800107a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800107e:	6013      	str	r3, [r2, #0]
	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR5;		// V High  - 00: Low speed; 01: Medium speed; 10: High speed; 11: Very high speed
 8001080:	4b2f      	ldr	r3, [pc, #188]	; (8001140 <_Z7InitSPIv+0xf4>)
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	4a2e      	ldr	r2, [pc, #184]	; (8001140 <_Z7InitSPIv+0xf4>)
 8001086:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800108a:	6093      	str	r3, [r2, #8]
	GPIOB->AFR[0] |= 0b0101 << 20;					// 0b0110 = Alternate Function 5 (SPI1); 20 is position of Pin 5
 800108c:	4b2c      	ldr	r3, [pc, #176]	; (8001140 <_Z7InitSPIv+0xf4>)
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	4a2b      	ldr	r2, [pc, #172]	; (8001140 <_Z7InitSPIv+0xf4>)
 8001092:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8001096:	6213      	str	r3, [r2, #32]

	// PB3 (55) SPI_SCK [alternate function AF5]
	GPIOB->MODER &= ~GPIO_MODER_MODER3;				// Reset value of PB3 is 0b10
 8001098:	4b29      	ldr	r3, [pc, #164]	; (8001140 <_Z7InitSPIv+0xf4>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a28      	ldr	r2, [pc, #160]	; (8001140 <_Z7InitSPIv+0xf4>)
 800109e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80010a2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODER3_1;			// 00: Input (reset state)	01: General purpose output mode	10: Alternate function mode	11: Analog mode
 80010a4:	4b26      	ldr	r3, [pc, #152]	; (8001140 <_Z7InitSPIv+0xf4>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a25      	ldr	r2, [pc, #148]	; (8001140 <_Z7InitSPIv+0xf4>)
 80010aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ae:	6013      	str	r3, [r2, #0]
	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR3;		// V High  - 00: Low speed; 01: Medium speed; 10: High speed; 11: Very high speed
 80010b0:	4b23      	ldr	r3, [pc, #140]	; (8001140 <_Z7InitSPIv+0xf4>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	4a22      	ldr	r2, [pc, #136]	; (8001140 <_Z7InitSPIv+0xf4>)
 80010b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80010ba:	6093      	str	r3, [r2, #8]
	GPIOB->AFR[0] |= 0b0101 << 12;					// 0b0110 = Alternate Function 5 (SPI1); 12 is position of Pin 3
 80010bc:	4b20      	ldr	r3, [pc, #128]	; (8001140 <_Z7InitSPIv+0xf4>)
 80010be:	6a1b      	ldr	r3, [r3, #32]
 80010c0:	4a1f      	ldr	r2, [pc, #124]	; (8001140 <_Z7InitSPIv+0xf4>)
 80010c2:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 80010c6:	6213      	str	r3, [r2, #32]

	// PA15 (50) Software NSS
	GPIOA->MODER |= GPIO_MODER_MODER15_0;			// 00: Input (reset state)	01: General purpose output mode	10: Alternate function mode	11: Analog mode
 80010c8:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <_Z7InitSPIv+0xf8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a1d      	ldr	r2, [pc, #116]	; (8001144 <_Z7InitSPIv+0xf8>)
 80010ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80010d2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODER15_1;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <_Z7InitSPIv+0xf8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a1a      	ldr	r2, [pc, #104]	; (8001144 <_Z7InitSPIv+0xf8>)
 80010da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010de:	6013      	str	r3, [r2, #0]
	GPIOA->BSRR |= GPIO_BSRR_BS_15;
 80010e0:	4b18      	ldr	r3, [pc, #96]	; (8001144 <_Z7InitSPIv+0xf8>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4a17      	ldr	r2, [pc, #92]	; (8001144 <_Z7InitSPIv+0xf8>)
 80010e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010ea:	6193      	str	r3, [r2, #24]

	// Configure SPI
	SPI1->CR1 |= SPI_CR1_DFF;						// Use 16 bit data frame
 80010ec:	4b16      	ldr	r3, [pc, #88]	; (8001148 <_Z7InitSPIv+0xfc>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a15      	ldr	r2, [pc, #84]	; (8001148 <_Z7InitSPIv+0xfc>)
 80010f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010f6:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_SSM;						// Software slave management: When SSM bit is set, NSS pin input is replaced with the value from the SSI bit
 80010f8:	4b13      	ldr	r3, [pc, #76]	; (8001148 <_Z7InitSPIv+0xfc>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a12      	ldr	r2, [pc, #72]	; (8001148 <_Z7InitSPIv+0xfc>)
 80010fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001102:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_SSI;						// Internal slave select
 8001104:	4b10      	ldr	r3, [pc, #64]	; (8001148 <_Z7InitSPIv+0xfc>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a0f      	ldr	r2, [pc, #60]	; (8001148 <_Z7InitSPIv+0xfc>)
 800110a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800110e:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_BR_2;						// Baud rate control prescaler: 0b001: fPCLK/4; 0b100: fPCLK/32
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <_Z7InitSPIv+0xfc>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0c      	ldr	r2, [pc, #48]	; (8001148 <_Z7InitSPIv+0xfc>)
 8001116:	f043 0320 	orr.w	r3, r3, #32
 800111a:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_MSTR;						// Master selection
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <_Z7InitSPIv+0xfc>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a09      	ldr	r2, [pc, #36]	; (8001148 <_Z7InitSPIv+0xfc>)
 8001122:	f043 0304 	orr.w	r3, r3, #4
 8001126:	6013      	str	r3, [r2, #0]

	SPI1->CR1 |= SPI_CR1_SPE;						// Enable SPI
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <_Z7InitSPIv+0xfc>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a06      	ldr	r2, [pc, #24]	; (8001148 <_Z7InitSPIv+0xfc>)
 800112e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001132:	6013      	str	r3, [r2, #0]
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr
 800113c:	40023800 	.word	0x40023800
 8001140:	40020400 	.word	0x40020400
 8001144:	40020000 	.word	0x40020000
 8001148:	40013000 	.word	0x40013000

0800114c <_Z11sendSPIDatat>:
	SPI1->DR = 0xAABB;

}


void sendSPIData(uint16_t data) {
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	80fb      	strh	r3, [r7, #6]
	while (((SPI1->SR & SPI_SR_TXE) == 0) | ((SPI1->SR & SPI_SR_BSY) == SPI_SR_BSY) );
 8001156:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <_Z11sendSPIDatat+0x54>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	2b00      	cmp	r3, #0
 8001160:	bf0c      	ite	eq
 8001162:	2301      	moveq	r3, #1
 8001164:	2300      	movne	r3, #0
 8001166:	b2da      	uxtb	r2, r3
 8001168:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <_Z11sendSPIDatat+0x54>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001170:	2b80      	cmp	r3, #128	; 0x80
 8001172:	bf0c      	ite	eq
 8001174:	2301      	moveq	r3, #1
 8001176:	2300      	movne	r3, #0
 8001178:	b2db      	uxtb	r3, r3
 800117a:	4313      	orrs	r3, r2
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d000      	beq.n	8001184 <_Z11sendSPIDatat+0x38>
 8001182:	e7e8      	b.n	8001156 <_Z11sendSPIDatat+0xa>
	GPIOA->BSRR |= GPIO_BSRR_BR_15;
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <_Z11sendSPIDatat+0x58>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4a06      	ldr	r2, [pc, #24]	; (80011a4 <_Z11sendSPIDatat+0x58>)
 800118a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800118e:	6193      	str	r3, [r2, #24]
	SPI1->DR = data;		// Send cmd data [X X C C C A A A]
 8001190:	4a03      	ldr	r2, [pc, #12]	; (80011a0 <_Z11sendSPIDatat+0x54>)
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	60d3      	str	r3, [r2, #12]
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	40013000 	.word	0x40013000
 80011a4:	40020000 	.word	0x40020000

080011a8 <_Z8clearSPIv>:

void clearSPI() {
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
	while (((SPI1->SR & SPI_SR_TXE) == 0) | ((SPI1->SR & SPI_SR_BSY) == SPI_SR_BSY) );
 80011ac:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <_Z8clearSPIv+0x48>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	bf0c      	ite	eq
 80011b8:	2301      	moveq	r3, #1
 80011ba:	2300      	movne	r3, #0
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <_Z8clearSPIv+0x48>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c6:	2b80      	cmp	r3, #128	; 0x80
 80011c8:	bf0c      	ite	eq
 80011ca:	2301      	moveq	r3, #1
 80011cc:	2300      	movne	r3, #0
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d000      	beq.n	80011da <_Z8clearSPIv+0x32>
 80011d8:	e7e8      	b.n	80011ac <_Z8clearSPIv+0x4>
	GPIOA->BSRR |= GPIO_BSRR_BS_15;
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <_Z8clearSPIv+0x4c>)
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	4a05      	ldr	r2, [pc, #20]	; (80011f4 <_Z8clearSPIv+0x4c>)
 80011e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011e4:	6193      	str	r3, [r2, #24]
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40013000 	.word	0x40013000
 80011f4:	40020000 	.word	0x40020000

080011f8 <_Z12InitSPITimerv>:


//	Setup Timer 3 on an interrupt to trigger SPI data send
void InitSPITimer() {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;				// Enable Timer 3
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <_Z12InitSPITimerv+0x54>)
 80011fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001200:	4a12      	ldr	r2, [pc, #72]	; (800124c <_Z12InitSPITimerv+0x54>)
 8001202:	f043 0302 	orr.w	r3, r3, #2
 8001206:	6253      	str	r3, [r2, #36]	; 0x24
	TIM3->PSC = 50;									// Set prescaler
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <_Z12InitSPITimerv+0x58>)
 800120a:	2232      	movs	r2, #50	; 0x32
 800120c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 400; 								// Set auto reload register
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <_Z12InitSPITimerv+0x58>)
 8001210:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001214:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3->DIER |= TIM_DIER_UIE;						// DMA/interrupt enable register
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <_Z12InitSPITimerv+0x58>)
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	4a0d      	ldr	r2, [pc, #52]	; (8001250 <_Z12InitSPITimerv+0x58>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(TIM3_IRQn);
 8001222:	201d      	movs	r0, #29
 8001224:	f7ff fcc0 	bl	8000ba8 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM3_IRQn, 0);					// Lower is higher priority
 8001228:	2100      	movs	r1, #0
 800122a:	201d      	movs	r0, #29
 800122c:	f7ff fcda 	bl	8000be4 <__NVIC_SetPriority>

	TIM3->CR1 |= TIM_CR1_CEN;
 8001230:	4b07      	ldr	r3, [pc, #28]	; (8001250 <_Z12InitSPITimerv+0x58>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a06      	ldr	r2, [pc, #24]	; (8001250 <_Z12InitSPITimerv+0x58>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	6013      	str	r3, [r2, #0]
	TIM3->EGR |= TIM_EGR_UG;						//  Re-initializes counter and generates update of registers
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <_Z12InitSPITimerv+0x58>)
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	4a03      	ldr	r2, [pc, #12]	; (8001250 <_Z12InitSPITimerv+0x58>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	6153      	str	r3, [r2, #20]
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40023800 	.word	0x40023800
 8001250:	40000400 	.word	0x40000400

08001254 <_ZSt3powff>:
  using ::pow;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	6839      	ldr	r1, [r7, #0]
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 fb05 	bl	8001870 <powf>
 8001266:	4603      	mov	r3, r0
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <ADC1_IRQHandler>:
void ADC1_IRQHandler(void) {
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0

	uint16_t adcval = ADC1->DR;
 8001276:	4b04      	ldr	r3, [pc, #16]	; (8001288 <ADC1_IRQHandler+0x18>)
 8001278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127a:	80fb      	strh	r3, [r7, #6]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40012400 	.word	0x40012400

0800128c <TIM3_IRQHandler>:


// SPI Send timer
void TIM3_IRQHandler(void) {
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
	// create macro to enable summing of four most recent values of ADC regardless of how many ADC samples are in the buffer
	#define ADC_SUM(x) (ADC_array[x] + ADC_array[ADC_BUFFER_LENGTH + x] + ADC_array[ADC_BUFFER_LENGTH * 2 + x] + ADC_array[ADC_BUFFER_LENGTH * 3 + x])

	TIM3->SR &= ~TIM_SR_UIF;					// clear UIF flag
 8001292:	4b8a      	ldr	r3, [pc, #552]	; (80014bc <TIM3_IRQHandler+0x230>)
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	4a89      	ldr	r2, [pc, #548]	; (80014bc <TIM3_IRQHandler+0x230>)
 8001298:	f023 0301 	bic.w	r3, r3, #1
 800129c:	6113      	str	r3, [r2, #16]
	//sendSPIData((uint16_t)0);

	// Pitch calculations - Increase 2270 to increase pitch; Reduce ABS(610) to increase spread
	pitch = (float)((ADC_SUM(0)) >> 2);
 800129e:	4b88      	ldr	r3, [pc, #544]	; (80014c0 <TIM3_IRQHandler+0x234>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b86      	ldr	r3, [pc, #536]	; (80014c0 <TIM3_IRQHandler+0x234>)
 80012a8:	891b      	ldrh	r3, [r3, #8]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	4413      	add	r3, r2
 80012ae:	4a84      	ldr	r2, [pc, #528]	; (80014c0 <TIM3_IRQHandler+0x234>)
 80012b0:	8a12      	ldrh	r2, [r2, #16]
 80012b2:	b292      	uxth	r2, r2
 80012b4:	4413      	add	r3, r2
 80012b6:	4a82      	ldr	r2, [pc, #520]	; (80014c0 <TIM3_IRQHandler+0x234>)
 80012b8:	8b12      	ldrh	r2, [r2, #24]
 80012ba:	b292      	uxth	r2, r2
 80012bc:	4413      	add	r3, r2
 80012be:	109b      	asrs	r3, r3, #2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fa21 	bl	8000708 <__aeabi_i2f>
 80012c6:	4602      	mov	r2, r0
 80012c8:	4b7e      	ldr	r3, [pc, #504]	; (80014c4 <TIM3_IRQHandler+0x238>)
 80012ca:	601a      	str	r2, [r3, #0]
	//freq = 2270.0f * std::pow(2.0f, pitch / -610.0f);			// for cycle length matching sample rate (48k)
	freq = 3750.0f * std::pow(2.0f, pitch / -590.0f);			// for cycle length of 65k
 80012cc:	4b7d      	ldr	r3, [pc, #500]	; (80014c4 <TIM3_IRQHandler+0x238>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	497d      	ldr	r1, [pc, #500]	; (80014c8 <TIM3_IRQHandler+0x23c>)
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fb20 	bl	8000918 <__aeabi_fdiv>
 80012d8:	4603      	mov	r3, r0
 80012da:	4619      	mov	r1, r3
 80012dc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012e0:	f7ff ffb8 	bl	8001254 <_ZSt3powff>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4979      	ldr	r1, [pc, #484]	; (80014cc <TIM3_IRQHandler+0x240>)
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fa61 	bl	80007b0 <__aeabi_fmul>
 80012ee:	4603      	mov	r3, r0
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b77      	ldr	r3, [pc, #476]	; (80014d0 <TIM3_IRQHandler+0x244>)
 80012f4:	601a      	str	r2, [r3, #0]
	outputVal = ((uint8_t)harmScale) | (startVol << 8);
	sendSPIData(outputVal);
	 */

	//harmonicScale = (uint16_t)(ADC_array[2] + ADC_array[5] + ADC_array[8] + ADC_array[11]) >> 5;		// scale 0 to 511
	harmonicScale = (uint16_t)(ADC_SUM(1)) >> 5;		// scale 0 to 511
 80012f6:	4b72      	ldr	r3, [pc, #456]	; (80014c0 <TIM3_IRQHandler+0x234>)
 80012f8:	885b      	ldrh	r3, [r3, #2]
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	4b70      	ldr	r3, [pc, #448]	; (80014c0 <TIM3_IRQHandler+0x234>)
 80012fe:	895b      	ldrh	r3, [r3, #10]
 8001300:	b29b      	uxth	r3, r3
 8001302:	4413      	add	r3, r2
 8001304:	b29a      	uxth	r2, r3
 8001306:	4b6e      	ldr	r3, [pc, #440]	; (80014c0 <TIM3_IRQHandler+0x234>)
 8001308:	8a5b      	ldrh	r3, [r3, #18]
 800130a:	b29b      	uxth	r3, r3
 800130c:	4413      	add	r3, r2
 800130e:	b29a      	uxth	r2, r3
 8001310:	4b6b      	ldr	r3, [pc, #428]	; (80014c0 <TIM3_IRQHandler+0x234>)
 8001312:	8b5b      	ldrh	r3, [r3, #26]
 8001314:	b29b      	uxth	r3, r3
 8001316:	4413      	add	r3, r2
 8001318:	b29b      	uxth	r3, r3
 800131a:	115b      	asrs	r3, r3, #5
 800131c:	b29a      	uxth	r2, r3
 800131e:	4b6d      	ldr	r3, [pc, #436]	; (80014d4 <TIM3_IRQHandler+0x248>)
 8001320:	801a      	strh	r2, [r3, #0]
	dampedHarmonicScale = ((15 * dampedHarmonicScale) + harmonicScale) >> 4;
 8001322:	4b6d      	ldr	r3, [pc, #436]	; (80014d8 <TIM3_IRQHandler+0x24c>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	b29b      	uxth	r3, r3
 8001328:	461a      	mov	r2, r3
 800132a:	4613      	mov	r3, r2
 800132c:	011b      	lsls	r3, r3, #4
 800132e:	1a9b      	subs	r3, r3, r2
 8001330:	4a68      	ldr	r2, [pc, #416]	; (80014d4 <TIM3_IRQHandler+0x248>)
 8001332:	8812      	ldrh	r2, [r2, #0]
 8001334:	b292      	uxth	r2, r2
 8001336:	4413      	add	r3, r2
 8001338:	111b      	asrs	r3, r3, #4
 800133a:	b29a      	uxth	r2, r3
 800133c:	4b66      	ldr	r3, [pc, #408]	; (80014d8 <TIM3_IRQHandler+0x24c>)
 800133e:	801a      	strh	r2, [r3, #0]
	harmScale = ((31.0f * harmScale) + uint16_t(std::pow(2.0f, (float)dampedHarmonicScale / 56.777f) - 1)) / 32.0f;
 8001340:	4b66      	ldr	r3, [pc, #408]	; (80014dc <TIM3_IRQHandler+0x250>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4966      	ldr	r1, [pc, #408]	; (80014e0 <TIM3_IRQHandler+0x254>)
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fa32 	bl	80007b0 <__aeabi_fmul>
 800134c:	4603      	mov	r3, r0
 800134e:	461c      	mov	r4, r3
 8001350:	4b61      	ldr	r3, [pc, #388]	; (80014d8 <TIM3_IRQHandler+0x24c>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	b29b      	uxth	r3, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff f9d2 	bl	8000700 <__aeabi_ui2f>
 800135c:	4603      	mov	r3, r0
 800135e:	4961      	ldr	r1, [pc, #388]	; (80014e4 <TIM3_IRQHandler+0x258>)
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fad9 	bl	8000918 <__aeabi_fdiv>
 8001366:	4603      	mov	r3, r0
 8001368:	4619      	mov	r1, r3
 800136a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800136e:	f7ff ff71 	bl	8001254 <_ZSt3powff>
 8001372:	4603      	mov	r3, r0
 8001374:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f90f 	bl	800059c <__aeabi_fsub>
 800137e:	4603      	mov	r3, r0
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fbf1 	bl	8000b68 <__aeabi_f2uiz>
 8001386:	4603      	mov	r3, r0
 8001388:	b29b      	uxth	r3, r3
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff f9bc 	bl	8000708 <__aeabi_i2f>
 8001390:	4603      	mov	r3, r0
 8001392:	4619      	mov	r1, r3
 8001394:	4620      	mov	r0, r4
 8001396:	f7ff f903 	bl	80005a0 <__addsf3>
 800139a:	4603      	mov	r3, r0
 800139c:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fab9 	bl	8000918 <__aeabi_fdiv>
 80013a6:	4603      	mov	r3, r0
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b4c      	ldr	r3, [pc, #304]	; (80014dc <TIM3_IRQHandler+0x250>)
 80013ac:	601a      	str	r2, [r3, #0]

	// Create inverted exponential curve for volume reduction
	float vol = (511.0f - (float)harmScale) / 511.0f;
 80013ae:	4b4b      	ldr	r3, [pc, #300]	; (80014dc <TIM3_IRQHandler+0x250>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4619      	mov	r1, r3
 80013b4:	484c      	ldr	r0, [pc, #304]	; (80014e8 <TIM3_IRQHandler+0x25c>)
 80013b6:	f7ff f8f1 	bl	800059c <__aeabi_fsub>
 80013ba:	4603      	mov	r3, r0
 80013bc:	494a      	ldr	r1, [pc, #296]	; (80014e8 <TIM3_IRQHandler+0x25c>)
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff faaa 	bl	8000918 <__aeabi_fdiv>
 80013c4:	4603      	mov	r3, r0
 80013c6:	60fb      	str	r3, [r7, #12]
	startVol = ((0.7f - 0.7f * std::pow(vol, 4.0f)) + 0.3f) * 511.0f;
 80013c8:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f7ff ff41 	bl	8001254 <_ZSt3powff>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4945      	ldr	r1, [pc, #276]	; (80014ec <TIM3_IRQHandler+0x260>)
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f9ea 	bl	80007b0 <__aeabi_fmul>
 80013dc:	4603      	mov	r3, r0
 80013de:	4619      	mov	r1, r3
 80013e0:	4842      	ldr	r0, [pc, #264]	; (80014ec <TIM3_IRQHandler+0x260>)
 80013e2:	f7ff f8db 	bl	800059c <__aeabi_fsub>
 80013e6:	4603      	mov	r3, r0
 80013e8:	4941      	ldr	r1, [pc, #260]	; (80014f0 <TIM3_IRQHandler+0x264>)
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f8d8 	bl	80005a0 <__addsf3>
 80013f0:	4603      	mov	r3, r0
 80013f2:	493d      	ldr	r1, [pc, #244]	; (80014e8 <TIM3_IRQHandler+0x25c>)
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f9db 	bl	80007b0 <__aeabi_fmul>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fbb3 	bl	8000b68 <__aeabi_f2uiz>
 8001402:	4603      	mov	r3, r0
 8001404:	b29a      	uxth	r2, r3
 8001406:	4b3b      	ldr	r3, [pc, #236]	; (80014f4 <TIM3_IRQHandler+0x268>)
 8001408:	801a      	strh	r2, [r3, #0]

	// Send CV value for frequency scaling
	freqScale = 126 - std::max(
			((int16_t)ADC_SUM(2)) >> 7, 0);		// scale to range 0-127
 800140a:	4b2d      	ldr	r3, [pc, #180]	; (80014c0 <TIM3_IRQHandler+0x234>)
 800140c:	889b      	ldrh	r3, [r3, #4]
 800140e:	b29a      	uxth	r2, r3
 8001410:	4b2b      	ldr	r3, [pc, #172]	; (80014c0 <TIM3_IRQHandler+0x234>)
 8001412:	899b      	ldrh	r3, [r3, #12]
 8001414:	b29b      	uxth	r3, r3
 8001416:	4413      	add	r3, r2
 8001418:	b29a      	uxth	r2, r3
 800141a:	4b29      	ldr	r3, [pc, #164]	; (80014c0 <TIM3_IRQHandler+0x234>)
 800141c:	8a9b      	ldrh	r3, [r3, #20]
 800141e:	b29b      	uxth	r3, r3
 8001420:	4413      	add	r3, r2
 8001422:	b29a      	uxth	r2, r3
 8001424:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <TIM3_IRQHandler+0x234>)
 8001426:	8b9b      	ldrh	r3, [r3, #28]
 8001428:	b29b      	uxth	r3, r3
 800142a:	4413      	add	r3, r2
 800142c:	b29b      	uxth	r3, r3
 800142e:	b21b      	sxth	r3, r3
 8001430:	11db      	asrs	r3, r3, #7
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	2300      	movs	r3, #0
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	f107 0208 	add.w	r2, r7, #8
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f000 f900 	bl	8001646 <_ZSt3maxIiERKT_S2_S2_>
 8001446:	4603      	mov	r3, r0
	freqScale = 126 - std::max(
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	b29b      	uxth	r3, r3
 800144c:	f1c3 037e 	rsb	r3, r3, #126	; 0x7e
 8001450:	b29b      	uxth	r3, r3
 8001452:	b21a      	sxth	r2, r3
 8001454:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <TIM3_IRQHandler+0x26c>)
 8001456:	801a      	strh	r2, [r3, #0]
	//freqScale = 0;

	// Send potentiometer value for Comb Filter Interval
	if (combIntervalTemp > ADC_SUM(3) + 500 || combIntervalTemp < ADC_SUM(3) - 500)
 8001458:	4b28      	ldr	r3, [pc, #160]	; (80014fc <TIM3_IRQHandler+0x270>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	b29b      	uxth	r3, r3
 800145e:	4619      	mov	r1, r3
 8001460:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <TIM3_IRQHandler+0x234>)
 8001462:	88db      	ldrh	r3, [r3, #6]
 8001464:	b29b      	uxth	r3, r3
 8001466:	461a      	mov	r2, r3
 8001468:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <TIM3_IRQHandler+0x234>)
 800146a:	89db      	ldrh	r3, [r3, #14]
 800146c:	b29b      	uxth	r3, r3
 800146e:	4413      	add	r3, r2
 8001470:	4a13      	ldr	r2, [pc, #76]	; (80014c0 <TIM3_IRQHandler+0x234>)
 8001472:	8ad2      	ldrh	r2, [r2, #22]
 8001474:	b292      	uxth	r2, r2
 8001476:	4413      	add	r3, r2
 8001478:	4a11      	ldr	r2, [pc, #68]	; (80014c0 <TIM3_IRQHandler+0x234>)
 800147a:	8bd2      	ldrh	r2, [r2, #30]
 800147c:	b292      	uxth	r2, r2
 800147e:	4413      	add	r3, r2
 8001480:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001484:	4299      	cmp	r1, r3
 8001486:	dc17      	bgt.n	80014b8 <TIM3_IRQHandler+0x22c>
 8001488:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <TIM3_IRQHandler+0x270>)
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	b29b      	uxth	r3, r3
 800148e:	4619      	mov	r1, r3
 8001490:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <TIM3_IRQHandler+0x234>)
 8001492:	88db      	ldrh	r3, [r3, #6]
 8001494:	b29b      	uxth	r3, r3
 8001496:	461a      	mov	r2, r3
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <TIM3_IRQHandler+0x234>)
 800149a:	89db      	ldrh	r3, [r3, #14]
 800149c:	b29b      	uxth	r3, r3
 800149e:	4413      	add	r3, r2
 80014a0:	4a07      	ldr	r2, [pc, #28]	; (80014c0 <TIM3_IRQHandler+0x234>)
 80014a2:	8ad2      	ldrh	r2, [r2, #22]
 80014a4:	b292      	uxth	r2, r2
 80014a6:	4413      	add	r3, r2
 80014a8:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <TIM3_IRQHandler+0x234>)
 80014aa:	8bd2      	ldrh	r2, [r2, #30]
 80014ac:	b292      	uxth	r2, r2
 80014ae:	4413      	add	r3, r2
 80014b0:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80014b4:	4299      	cmp	r1, r3
 80014b6:	da23      	bge.n	8001500 <TIM3_IRQHandler+0x274>
 80014b8:	2301      	movs	r3, #1
 80014ba:	e022      	b.n	8001502 <TIM3_IRQHandler+0x276>
 80014bc:	40000400 	.word	0x40000400
 80014c0:	20000090 	.word	0x20000090
 80014c4:	200000b0 	.word	0x200000b0
 80014c8:	c4138000 	.word	0xc4138000
 80014cc:	456a6000 	.word	0x456a6000
 80014d0:	20000000 	.word	0x20000000
 80014d4:	200000b4 	.word	0x200000b4
 80014d8:	200000b6 	.word	0x200000b6
 80014dc:	200000c0 	.word	0x200000c0
 80014e0:	41f80000 	.word	0x41f80000
 80014e4:	42631ba6 	.word	0x42631ba6
 80014e8:	43ff8000 	.word	0x43ff8000
 80014ec:	3f333333 	.word	0x3f333333
 80014f0:	3e99999a 	.word	0x3e99999a
 80014f4:	200000b8 	.word	0x200000b8
 80014f8:	200000ba 	.word	0x200000ba
 80014fc:	200000be 	.word	0x200000be
 8001500:	2300      	movs	r3, #0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d013      	beq.n	800152e <TIM3_IRQHandler+0x2a2>
		combIntervalTemp = ADC_SUM(3);
 8001506:	4b24      	ldr	r3, [pc, #144]	; (8001598 <TIM3_IRQHandler+0x30c>)
 8001508:	88db      	ldrh	r3, [r3, #6]
 800150a:	b29a      	uxth	r2, r3
 800150c:	4b22      	ldr	r3, [pc, #136]	; (8001598 <TIM3_IRQHandler+0x30c>)
 800150e:	89db      	ldrh	r3, [r3, #14]
 8001510:	b29b      	uxth	r3, r3
 8001512:	4413      	add	r3, r2
 8001514:	b29a      	uxth	r2, r3
 8001516:	4b20      	ldr	r3, [pc, #128]	; (8001598 <TIM3_IRQHandler+0x30c>)
 8001518:	8adb      	ldrh	r3, [r3, #22]
 800151a:	b29b      	uxth	r3, r3
 800151c:	4413      	add	r3, r2
 800151e:	b29a      	uxth	r2, r3
 8001520:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <TIM3_IRQHandler+0x30c>)
 8001522:	8bdb      	ldrh	r3, [r3, #30]
 8001524:	b29b      	uxth	r3, r3
 8001526:	4413      	add	r3, r2
 8001528:	b29a      	uxth	r2, r3
 800152a:	4b1c      	ldr	r3, [pc, #112]	; (800159c <TIM3_IRQHandler+0x310>)
 800152c:	801a      	strh	r2, [r3, #0]
	combInterval = combIntervalTemp >> 9;		// scale to range 0-31
 800152e:	4b1b      	ldr	r3, [pc, #108]	; (800159c <TIM3_IRQHandler+0x310>)
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	b29b      	uxth	r3, r3
 8001534:	125b      	asrs	r3, r3, #9
 8001536:	b29a      	uxth	r2, r3
 8001538:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <TIM3_IRQHandler+0x314>)
 800153a:	801a      	strh	r2, [r3, #0]


	sendSPIData((uint16_t)freq);
 800153c:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <TIM3_IRQHandler+0x318>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fb11 	bl	8000b68 <__aeabi_f2uiz>
 8001546:	4603      	mov	r3, r0
 8001548:	b29b      	uxth	r3, r3
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fdfe 	bl	800114c <_Z11sendSPIDatat>
	sendSPIData((uint16_t)harmScale);
 8001550:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <TIM3_IRQHandler+0x31c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fb07 	bl	8000b68 <__aeabi_f2uiz>
 800155a:	4603      	mov	r3, r0
 800155c:	b29b      	uxth	r3, r3
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fdf4 	bl	800114c <_Z11sendSPIDatat>
	sendSPIData(startVol);
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <TIM3_IRQHandler+0x320>)
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	b29b      	uxth	r3, r3
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fdee 	bl	800114c <_Z11sendSPIDatat>
	sendSPIData(freqScale);
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <TIM3_IRQHandler+0x324>)
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	b21b      	sxth	r3, r3
 8001576:	b29b      	uxth	r3, r3
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fde7 	bl	800114c <_Z11sendSPIDatat>
	sendSPIData(combInterval);
 800157e:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <TIM3_IRQHandler+0x314>)
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	b29b      	uxth	r3, r3
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fde1 	bl	800114c <_Z11sendSPIDatat>

	clearSPI();
 800158a:	f7ff fe0d 	bl	80011a8 <_Z8clearSPIv>
}
 800158e:	bf00      	nop
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	bd90      	pop	{r4, r7, pc}
 8001596:	bf00      	nop
 8001598:	20000090 	.word	0x20000090
 800159c:	200000be 	.word	0x200000be
 80015a0:	200000bc 	.word	0x200000bc
 80015a4:	20000000 	.word	0x20000000
 80015a8:	200000c0 	.word	0x200000c0
 80015ac:	200000b8 	.word	0x200000b8
 80015b0:	200000ba 	.word	0x200000ba

080015b4 <SysTick_Handler>:

void SysTick_Handler(void) {
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
	SysTickVal++;
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <SysTick_Handler+0x18>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	4a03      	ldr	r2, [pc, #12]	; (80015cc <SysTick_Handler+0x18>)
 80015c0:	6013      	str	r3, [r2, #0]
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	2000008c 	.word	0x2000008c

080015d0 <NMI_Handler>:

void NMI_Handler(void) {}
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <HardFault_Handler>:

void HardFault_Handler(void) {
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
	while (1) {}
 80015e0:	e7fe      	b.n	80015e0 <HardFault_Handler+0x4>

080015e2 <MemManage_Handler>:
}

void MemManage_Handler(void) {
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
	while (1) {}
 80015e6:	e7fe      	b.n	80015e6 <MemManage_Handler+0x4>

080015e8 <BusFault_Handler>:
}

void BusFault_Handler(void) {
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
	while (1) {}
 80015ec:	e7fe      	b.n	80015ec <BusFault_Handler+0x4>

080015ee <UsageFault_Handler>:
}

void UsageFault_Handler(void) {
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
	while (1) {}
 80015f2:	e7fe      	b.n	80015f2 <UsageFault_Handler+0x4>

080015f4 <SVC_Handler>:
}

void SVC_Handler(void) {}
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <DebugMon_Handler>:

void DebugMon_Handler(void) {}
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <PendSV_Handler>:

void PendSV_Handler(void) {}
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <main>:
extern "C" {
#include "interrupts.h"
}

int main(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
	SystemInit();
 800161e:	f000 f84b 	bl	80016b8 <SystemInit>
	SystemClock_Config();			// NB currently highest clock speed seems to be 16MHz - higher and crashes occur
 8001622:	f7ff fb0d 	bl	8000c40 <_Z18SystemClock_Configv>
	SystemCoreClockUpdate();
 8001626:	f000 f87b 	bl	8001720 <SystemCoreClockUpdate>
	InitIO();
 800162a:	f7ff fcf5 	bl	8001018 <_Z6InitIOv>
	InitADC();
 800162e:	f7ff fb95 	bl	8000d5c <_Z7InitADCv>
	InitSPI();
 8001632:	f7ff fd0b 	bl	800104c <_Z7InitSPIv>
	InitSPITimer();
 8001636:	f7ff fddf 	bl	80011f8 <_Z12InitSPITimerv>

	int i = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]

	while (1) {


		i++;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3301      	adds	r3, #1
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	e7fb      	b.n	800163e <main+0x26>

08001646 <_ZSt3maxIiERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	429a      	cmp	r2, r3
 800165a:	da01      	bge.n	8001660 <_ZSt3maxIiERKT_S2_S2_+0x1a>
	return __b;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	e000      	b.n	8001662 <_ZSt3maxIiERKT_S2_S2_+0x1c>
      return __a;
 8001660:	687b      	ldr	r3, [r7, #4]
    }
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800166c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800166e:	e003      	b.n	8001678 <LoopCopyDataInit>

08001670 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001672:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001674:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001676:	3104      	adds	r1, #4

08001678 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001678:	480a      	ldr	r0, [pc, #40]	; (80016a4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800167c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800167e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001680:	d3f6      	bcc.n	8001670 <CopyDataInit>
  ldr r2, =_sbss
 8001682:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001684:	e002      	b.n	800168c <LoopFillZerobss>

08001686 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001688:	f842 3b04 	str.w	r3, [r2], #4

0800168c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800168e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001690:	d3f9      	bcc.n	8001686 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001692:	f000 f811 	bl	80016b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001696:	f000 fea3 	bl	80023e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800169a:	f7ff ffbd 	bl	8001618 <main>
  bx lr
 800169e:	4770      	bx	lr
  ldr r3, =_sidata
 80016a0:	0800248c 	.word	0x0800248c
  ldr r0, =_sdata
 80016a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80016a8:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80016ac:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80016b0:	200000c4 	.word	0x200000c4

080016b4 <COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016b4:	e7fe      	b.n	80016b4 <COMP_IRQHandler>
	...

080016b8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80016bc:	4b15      	ldr	r3, [pc, #84]	; (8001714 <SystemInit+0x5c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a14      	ldr	r2, [pc, #80]	; (8001714 <SystemInit+0x5c>)
 80016c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c6:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <SystemInit+0x5c>)
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	4911      	ldr	r1, [pc, #68]	; (8001714 <SystemInit+0x5c>)
 80016ce:	4b12      	ldr	r3, [pc, #72]	; (8001718 <SystemInit+0x60>)
 80016d0:	4013      	ands	r3, r2
 80016d2:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80016d4:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <SystemInit+0x5c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a0e      	ldr	r2, [pc, #56]	; (8001714 <SystemInit+0x5c>)
 80016da:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80016de:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80016e2:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <SystemInit+0x5c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <SystemInit+0x5c>)
 80016ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ee:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80016f0:	4b08      	ldr	r3, [pc, #32]	; (8001714 <SystemInit+0x5c>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	4a07      	ldr	r2, [pc, #28]	; (8001714 <SystemInit+0x5c>)
 80016f6:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80016fa:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <SystemInit+0x5c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <SystemInit+0x64>)
 8001704:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001708:	609a      	str	r2, [r3, #8]
#endif
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800
 8001718:	88ffc00c 	.word	0x88ffc00c
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8001720:	b480      	push	{r7}
 8001722:	b087      	sub	sp, #28
 8001724:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, msirange = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800173a:	4b48      	ldr	r3, [pc, #288]	; (800185c <SystemCoreClockUpdate+0x13c>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	2b0c      	cmp	r3, #12
 8001748:	d863      	bhi.n	8001812 <SystemCoreClockUpdate+0xf2>
 800174a:	a201      	add	r2, pc, #4	; (adr r2, 8001750 <SystemCoreClockUpdate+0x30>)
 800174c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001750:	08001785 	.word	0x08001785
 8001754:	08001813 	.word	0x08001813
 8001758:	08001813 	.word	0x08001813
 800175c:	08001813 	.word	0x08001813
 8001760:	080017a5 	.word	0x080017a5
 8001764:	08001813 	.word	0x08001813
 8001768:	08001813 	.word	0x08001813
 800176c:	08001813 	.word	0x08001813
 8001770:	080017ad 	.word	0x080017ad
 8001774:	08001813 	.word	0x08001813
 8001778:	08001813 	.word	0x08001813
 800177c:	08001813 	.word	0x08001813
 8001780:	080017b5 	.word	0x080017b5
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8001784:	4b35      	ldr	r3, [pc, #212]	; (800185c <SystemCoreClockUpdate+0x13c>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	0b5b      	lsrs	r3, r3, #13
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3301      	adds	r3, #1
 8001794:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	461a      	mov	r2, r3
 800179e:	4b30      	ldr	r3, [pc, #192]	; (8001860 <SystemCoreClockUpdate+0x140>)
 80017a0:	601a      	str	r2, [r3, #0]
      break;
 80017a2:	e046      	b.n	8001832 <SystemCoreClockUpdate+0x112>
    case 0x04:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80017a4:	4b2e      	ldr	r3, [pc, #184]	; (8001860 <SystemCoreClockUpdate+0x140>)
 80017a6:	4a2f      	ldr	r2, [pc, #188]	; (8001864 <SystemCoreClockUpdate+0x144>)
 80017a8:	601a      	str	r2, [r3, #0]
      break;
 80017aa:	e042      	b.n	8001832 <SystemCoreClockUpdate+0x112>
    case 0x08:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80017ac:	4b2c      	ldr	r3, [pc, #176]	; (8001860 <SystemCoreClockUpdate+0x140>)
 80017ae:	4a2d      	ldr	r2, [pc, #180]	; (8001864 <SystemCoreClockUpdate+0x144>)
 80017b0:	601a      	str	r2, [r3, #0]
      break;
 80017b2:	e03e      	b.n	8001832 <SystemCoreClockUpdate+0x112>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80017b4:	4b29      	ldr	r3, [pc, #164]	; (800185c <SystemCoreClockUpdate+0x13c>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80017bc:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 80017be:	4b27      	ldr	r3, [pc, #156]	; (800185c <SystemCoreClockUpdate+0x13c>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80017c6:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> 18)];
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	0c9b      	lsrs	r3, r3, #18
 80017cc:	4a26      	ldr	r2, [pc, #152]	; (8001868 <SystemCoreClockUpdate+0x148>)
 80017ce:	5cd3      	ldrb	r3, [r2, r3]
 80017d0:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> 22) + 1;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	0d9b      	lsrs	r3, r3, #22
 80017d6:	3301      	adds	r3, #1
 80017d8:	60fb      	str	r3, [r7, #12]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80017da:	4b20      	ldr	r3, [pc, #128]	; (800185c <SystemCoreClockUpdate+0x13c>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e2:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d109      	bne.n	80017fe <SystemCoreClockUpdate+0xde>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4a1d      	ldr	r2, [pc, #116]	; (8001864 <SystemCoreClockUpdate+0x144>)
 80017ee:	fb02 f203 	mul.w	r2, r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f8:	4a19      	ldr	r2, [pc, #100]	; (8001860 <SystemCoreClockUpdate+0x140>)
 80017fa:	6013      	str	r3, [r2, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 80017fc:	e019      	b.n	8001832 <SystemCoreClockUpdate+0x112>
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	4a18      	ldr	r2, [pc, #96]	; (8001864 <SystemCoreClockUpdate+0x144>)
 8001802:	fb02 f203 	mul.w	r2, r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	fbb2 f3f3 	udiv	r3, r2, r3
 800180c:	4a14      	ldr	r2, [pc, #80]	; (8001860 <SystemCoreClockUpdate+0x140>)
 800180e:	6013      	str	r3, [r2, #0]
      break;
 8001810:	e00f      	b.n	8001832 <SystemCoreClockUpdate+0x112>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8001812:	4b12      	ldr	r3, [pc, #72]	; (800185c <SystemCoreClockUpdate+0x13c>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	0b5b      	lsrs	r3, r3, #13
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3301      	adds	r3, #1
 8001822:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	461a      	mov	r2, r3
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <SystemCoreClockUpdate+0x140>)
 800182e:	601a      	str	r2, [r3, #0]
      break;
 8001830:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <SystemCoreClockUpdate+0x13c>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	091b      	lsrs	r3, r3, #4
 8001838:	f003 030f 	and.w	r3, r3, #15
 800183c:	4a0b      	ldr	r2, [pc, #44]	; (800186c <SystemCoreClockUpdate+0x14c>)
 800183e:	5cd3      	ldrb	r3, [r2, r3]
 8001840:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001842:	4b07      	ldr	r3, [pc, #28]	; (8001860 <SystemCoreClockUpdate+0x140>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	fa22 f303 	lsr.w	r3, r2, r3
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <SystemCoreClockUpdate+0x140>)
 800184e:	6013      	str	r3, [r2, #0]
}
 8001850:	bf00      	nop
 8001852:	371c      	adds	r7, #28
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800
 8001860:	20000004 	.word	0x20000004
 8001864:	007a1200 	.word	0x007a1200
 8001868:	08002440 	.word	0x08002440
 800186c:	0800244c 	.word	0x0800244c

08001870 <powf>:
 8001870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001874:	b08d      	sub	sp, #52	; 0x34
 8001876:	4605      	mov	r5, r0
 8001878:	460c      	mov	r4, r1
 800187a:	f000 f959 	bl	8001b30 <__ieee754_powf>
 800187e:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 8001b2c <powf+0x2bc>
 8001882:	4606      	mov	r6, r0
 8001884:	f998 9000 	ldrsb.w	r9, [r8]
 8001888:	4647      	mov	r7, r8
 800188a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800188e:	d060      	beq.n	8001952 <powf+0xe2>
 8001890:	4621      	mov	r1, r4
 8001892:	4620      	mov	r0, r4
 8001894:	f7ff f952 	bl	8000b3c <__aeabi_fcmpun>
 8001898:	4683      	mov	fp, r0
 800189a:	2800      	cmp	r0, #0
 800189c:	d159      	bne.n	8001952 <powf+0xe2>
 800189e:	4629      	mov	r1, r5
 80018a0:	4628      	mov	r0, r5
 80018a2:	f7ff f94b 	bl	8000b3c <__aeabi_fcmpun>
 80018a6:	2100      	movs	r1, #0
 80018a8:	4682      	mov	sl, r0
 80018aa:	b300      	cbz	r0, 80018ee <powf+0x7e>
 80018ac:	4620      	mov	r0, r4
 80018ae:	f7ff f913 	bl	8000ad8 <__aeabi_fcmpeq>
 80018b2:	2800      	cmp	r0, #0
 80018b4:	d04d      	beq.n	8001952 <powf+0xe2>
 80018b6:	2301      	movs	r3, #1
 80018b8:	9302      	str	r3, [sp, #8]
 80018ba:	4b96      	ldr	r3, [pc, #600]	; (8001b14 <powf+0x2a4>)
 80018bc:	4628      	mov	r0, r5
 80018be:	9303      	str	r3, [sp, #12]
 80018c0:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80018c4:	f7fe fdbe 	bl	8000444 <__aeabi_f2d>
 80018c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80018cc:	4620      	mov	r0, r4
 80018ce:	f7fe fdb9 	bl	8000444 <__aeabi_f2d>
 80018d2:	2200      	movs	r2, #0
 80018d4:	4b90      	ldr	r3, [pc, #576]	; (8001b18 <powf+0x2a8>)
 80018d6:	f1b9 0f02 	cmp.w	r9, #2
 80018da:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80018de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80018e2:	d031      	beq.n	8001948 <powf+0xd8>
 80018e4:	a802      	add	r0, sp, #8
 80018e6:	f000 fcc2 	bl	800226e <matherr>
 80018ea:	bb38      	cbnz	r0, 800193c <powf+0xcc>
 80018ec:	e05d      	b.n	80019aa <powf+0x13a>
 80018ee:	4628      	mov	r0, r5
 80018f0:	f7ff f8f2 	bl	8000ad8 <__aeabi_fcmpeq>
 80018f4:	2800      	cmp	r0, #0
 80018f6:	d05d      	beq.n	80019b4 <powf+0x144>
 80018f8:	2100      	movs	r1, #0
 80018fa:	4620      	mov	r0, r4
 80018fc:	f7ff f8ec 	bl	8000ad8 <__aeabi_fcmpeq>
 8001900:	4607      	mov	r7, r0
 8001902:	2800      	cmp	r0, #0
 8001904:	d029      	beq.n	800195a <powf+0xea>
 8001906:	2301      	movs	r3, #1
 8001908:	9302      	str	r3, [sp, #8]
 800190a:	4b82      	ldr	r3, [pc, #520]	; (8001b14 <powf+0x2a4>)
 800190c:	4628      	mov	r0, r5
 800190e:	9303      	str	r3, [sp, #12]
 8001910:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8001914:	f7fe fd96 	bl	8000444 <__aeabi_f2d>
 8001918:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800191c:	4620      	mov	r0, r4
 800191e:	f7fe fd91 	bl	8000444 <__aeabi_f2d>
 8001922:	2200      	movs	r2, #0
 8001924:	2300      	movs	r3, #0
 8001926:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800192a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800192e:	f1b9 0f00 	cmp.w	r9, #0
 8001932:	d0d7      	beq.n	80018e4 <powf+0x74>
 8001934:	2200      	movs	r2, #0
 8001936:	4b78      	ldr	r3, [pc, #480]	; (8001b18 <powf+0x2a8>)
 8001938:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800193c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800193e:	b11b      	cbz	r3, 8001948 <powf+0xd8>
 8001940:	f000 fd48 	bl	80023d4 <__errno>
 8001944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001946:	6003      	str	r3, [r0, #0]
 8001948:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800194c:	f7fe fdd2 	bl	80004f4 <__aeabi_d2f>
 8001950:	4606      	mov	r6, r0
 8001952:	4630      	mov	r0, r6
 8001954:	b00d      	add	sp, #52	; 0x34
 8001956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800195a:	4620      	mov	r0, r4
 800195c:	f000 fc8c 	bl	8002278 <finitef>
 8001960:	2800      	cmp	r0, #0
 8001962:	d0f6      	beq.n	8001952 <powf+0xe2>
 8001964:	2100      	movs	r1, #0
 8001966:	4620      	mov	r0, r4
 8001968:	f7ff f8c0 	bl	8000aec <__aeabi_fcmplt>
 800196c:	2800      	cmp	r0, #0
 800196e:	d0f0      	beq.n	8001952 <powf+0xe2>
 8001970:	2301      	movs	r3, #1
 8001972:	9302      	str	r3, [sp, #8]
 8001974:	4b67      	ldr	r3, [pc, #412]	; (8001b14 <powf+0x2a4>)
 8001976:	4628      	mov	r0, r5
 8001978:	9303      	str	r3, [sp, #12]
 800197a:	970a      	str	r7, [sp, #40]	; 0x28
 800197c:	f7fe fd62 	bl	8000444 <__aeabi_f2d>
 8001980:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001984:	4620      	mov	r0, r4
 8001986:	f7fe fd5d 	bl	8000444 <__aeabi_f2d>
 800198a:	f998 3000 	ldrsb.w	r3, [r8]
 800198e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001992:	b923      	cbnz	r3, 800199e <powf+0x12e>
 8001994:	2200      	movs	r2, #0
 8001996:	2300      	movs	r3, #0
 8001998:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800199c:	e7a2      	b.n	80018e4 <powf+0x74>
 800199e:	2000      	movs	r0, #0
 80019a0:	495e      	ldr	r1, [pc, #376]	; (8001b1c <powf+0x2ac>)
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80019a8:	d19c      	bne.n	80018e4 <powf+0x74>
 80019aa:	f000 fd13 	bl	80023d4 <__errno>
 80019ae:	2321      	movs	r3, #33	; 0x21
 80019b0:	6003      	str	r3, [r0, #0]
 80019b2:	e7c3      	b.n	800193c <powf+0xcc>
 80019b4:	4630      	mov	r0, r6
 80019b6:	f000 fc5f 	bl	8002278 <finitef>
 80019ba:	4681      	mov	r9, r0
 80019bc:	2800      	cmp	r0, #0
 80019be:	d17b      	bne.n	8001ab8 <powf+0x248>
 80019c0:	4628      	mov	r0, r5
 80019c2:	f000 fc59 	bl	8002278 <finitef>
 80019c6:	2800      	cmp	r0, #0
 80019c8:	d076      	beq.n	8001ab8 <powf+0x248>
 80019ca:	4620      	mov	r0, r4
 80019cc:	f000 fc54 	bl	8002278 <finitef>
 80019d0:	2800      	cmp	r0, #0
 80019d2:	d071      	beq.n	8001ab8 <powf+0x248>
 80019d4:	4628      	mov	r0, r5
 80019d6:	f7fe fd35 	bl	8000444 <__aeabi_f2d>
 80019da:	4682      	mov	sl, r0
 80019dc:	4620      	mov	r0, r4
 80019de:	468b      	mov	fp, r1
 80019e0:	f7fe fd30 	bl	8000444 <__aeabi_f2d>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4630      	mov	r0, r6
 80019ea:	4631      	mov	r1, r6
 80019ec:	e9cd 2300 	strd	r2, r3, [sp]
 80019f0:	f7ff f8a4 	bl	8000b3c <__aeabi_fcmpun>
 80019f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80019f8:	f998 8000 	ldrsb.w	r8, [r8]
 80019fc:	4945      	ldr	r1, [pc, #276]	; (8001b14 <powf+0x2a4>)
 80019fe:	b1b0      	cbz	r0, 8001a2e <powf+0x1be>
 8001a00:	2001      	movs	r0, #1
 8001a02:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8001a06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001a0a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001a0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001a12:	f1b8 0f00 	cmp.w	r8, #0
 8001a16:	d0bd      	beq.n	8001994 <powf+0x124>
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4608      	mov	r0, r1
 8001a1c:	f7fe ff7c 	bl	8000918 <__aeabi_fdiv>
 8001a20:	f7fe fd10 	bl	8000444 <__aeabi_f2d>
 8001a24:	f1b8 0f02 	cmp.w	r8, #2
 8001a28:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8001a2c:	e7bc      	b.n	80019a8 <powf+0x138>
 8001a2e:	2603      	movs	r6, #3
 8001a30:	900a      	str	r0, [sp, #40]	; 0x28
 8001a32:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8001a36:	4620      	mov	r0, r4
 8001a38:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001a3c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001a40:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001a44:	f7fe feb4 	bl	80007b0 <__aeabi_fmul>
 8001a48:	4604      	mov	r4, r0
 8001a4a:	f1b8 0f00 	cmp.w	r8, #0
 8001a4e:	d11e      	bne.n	8001a8e <powf+0x21e>
 8001a50:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001a54:	4b32      	ldr	r3, [pc, #200]	; (8001b20 <powf+0x2b0>)
 8001a56:	2100      	movs	r1, #0
 8001a58:	4628      	mov	r0, r5
 8001a5a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001a5e:	f7ff f845 	bl	8000aec <__aeabi_fcmplt>
 8001a62:	2800      	cmp	r0, #0
 8001a64:	d04e      	beq.n	8001b04 <powf+0x294>
 8001a66:	4620      	mov	r0, r4
 8001a68:	f000 fc12 	bl	8002290 <rintf>
 8001a6c:	4621      	mov	r1, r4
 8001a6e:	f7ff f833 	bl	8000ad8 <__aeabi_fcmpeq>
 8001a72:	b920      	cbnz	r0, 8001a7e <powf+0x20e>
 8001a74:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001a78:	4b2a      	ldr	r3, [pc, #168]	; (8001b24 <powf+0x2b4>)
 8001a7a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001a7e:	f997 3000 	ldrsb.w	r3, [r7]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d13e      	bne.n	8001b04 <powf+0x294>
 8001a86:	f000 fca5 	bl	80023d4 <__errno>
 8001a8a:	2322      	movs	r3, #34	; 0x22
 8001a8c:	e790      	b.n	80019b0 <powf+0x140>
 8001a8e:	2200      	movs	r2, #0
 8001a90:	4b25      	ldr	r3, [pc, #148]	; (8001b28 <powf+0x2b8>)
 8001a92:	2100      	movs	r1, #0
 8001a94:	4628      	mov	r0, r5
 8001a96:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001a9a:	f7ff f827 	bl	8000aec <__aeabi_fcmplt>
 8001a9e:	2800      	cmp	r0, #0
 8001aa0:	d0ed      	beq.n	8001a7e <powf+0x20e>
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	f000 fbf4 	bl	8002290 <rintf>
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	f7ff f815 	bl	8000ad8 <__aeabi_fcmpeq>
 8001aae:	2800      	cmp	r0, #0
 8001ab0:	d1e5      	bne.n	8001a7e <powf+0x20e>
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <powf+0x2ac>)
 8001ab6:	e7e0      	b.n	8001a7a <powf+0x20a>
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4630      	mov	r0, r6
 8001abc:	f7ff f80c 	bl	8000ad8 <__aeabi_fcmpeq>
 8001ac0:	2800      	cmp	r0, #0
 8001ac2:	f43f af46 	beq.w	8001952 <powf+0xe2>
 8001ac6:	4628      	mov	r0, r5
 8001ac8:	f000 fbd6 	bl	8002278 <finitef>
 8001acc:	2800      	cmp	r0, #0
 8001ace:	f43f af40 	beq.w	8001952 <powf+0xe2>
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	f000 fbd0 	bl	8002278 <finitef>
 8001ad8:	2800      	cmp	r0, #0
 8001ada:	f43f af3a 	beq.w	8001952 <powf+0xe2>
 8001ade:	2304      	movs	r3, #4
 8001ae0:	9302      	str	r3, [sp, #8]
 8001ae2:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <powf+0x2a4>)
 8001ae4:	4628      	mov	r0, r5
 8001ae6:	9303      	str	r3, [sp, #12]
 8001ae8:	2300      	movs	r3, #0
 8001aea:	930a      	str	r3, [sp, #40]	; 0x28
 8001aec:	f7fe fcaa 	bl	8000444 <__aeabi_f2d>
 8001af0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001af4:	4620      	mov	r0, r4
 8001af6:	f7fe fca5 	bl	8000444 <__aeabi_f2d>
 8001afa:	2200      	movs	r2, #0
 8001afc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001b00:	2300      	movs	r3, #0
 8001b02:	e7ba      	b.n	8001a7a <powf+0x20a>
 8001b04:	a802      	add	r0, sp, #8
 8001b06:	f000 fbb2 	bl	800226e <matherr>
 8001b0a:	2800      	cmp	r0, #0
 8001b0c:	f47f af16 	bne.w	800193c <powf+0xcc>
 8001b10:	e7b9      	b.n	8001a86 <powf+0x216>
 8001b12:	bf00      	nop
 8001b14:	0800245c 	.word	0x0800245c
 8001b18:	3ff00000 	.word	0x3ff00000
 8001b1c:	fff00000 	.word	0xfff00000
 8001b20:	47efffff 	.word	0x47efffff
 8001b24:	c7efffff 	.word	0xc7efffff
 8001b28:	7ff00000 	.word	0x7ff00000
 8001b2c:	20000008 	.word	0x20000008

08001b30 <__ieee754_powf>:
 8001b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b34:	b087      	sub	sp, #28
 8001b36:	9101      	str	r1, [sp, #4]
 8001b38:	9c01      	ldr	r4, [sp, #4]
 8001b3a:	4681      	mov	r9, r0
 8001b3c:	f034 4700 	bics.w	r7, r4, #2147483648	; 0x80000000
 8001b40:	f000 8324 	beq.w	800218c <__ieee754_powf+0x65c>
 8001b44:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8001b48:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8001b4c:	4680      	mov	r8, r0
 8001b4e:	dc06      	bgt.n	8001b5e <__ieee754_powf+0x2e>
 8001b50:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8001b54:	dd09      	ble.n	8001b6a <__ieee754_powf+0x3a>
 8001b56:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8001b5a:	f000 8317 	beq.w	800218c <__ieee754_powf+0x65c>
 8001b5e:	4885      	ldr	r0, [pc, #532]	; (8001d74 <__ieee754_powf+0x244>)
 8001b60:	b007      	add	sp, #28
 8001b62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b66:	f000 bb8f 	b.w	8002288 <nanf>
 8001b6a:	2800      	cmp	r0, #0
 8001b6c:	da1d      	bge.n	8001baa <__ieee754_powf+0x7a>
 8001b6e:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8001b72:	da2b      	bge.n	8001bcc <__ieee754_powf+0x9c>
 8001b74:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8001b78:	db30      	blt.n	8001bdc <__ieee754_powf+0xac>
 8001b7a:	15fb      	asrs	r3, r7, #23
 8001b7c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8001b80:	fa47 f503 	asr.w	r5, r7, r3
 8001b84:	fa05 f303 	lsl.w	r3, r5, r3
 8001b88:	42bb      	cmp	r3, r7
 8001b8a:	d127      	bne.n	8001bdc <__ieee754_powf+0xac>
 8001b8c:	f005 0501 	and.w	r5, r5, #1
 8001b90:	f1c5 0502 	rsb	r5, r5, #2
 8001b94:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8001b98:	d122      	bne.n	8001be0 <__ieee754_powf+0xb0>
 8001b9a:	2c00      	cmp	r4, #0
 8001b9c:	4649      	mov	r1, r9
 8001b9e:	da11      	bge.n	8001bc4 <__ieee754_powf+0x94>
 8001ba0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001ba4:	f7fe feb8 	bl	8000918 <__aeabi_fdiv>
 8001ba8:	e021      	b.n	8001bee <__ieee754_powf+0xbe>
 8001baa:	2500      	movs	r5, #0
 8001bac:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8001bb0:	d1f0      	bne.n	8001b94 <__ieee754_powf+0x64>
 8001bb2:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8001bb6:	f000 82e9 	beq.w	800218c <__ieee754_powf+0x65c>
 8001bba:	dd09      	ble.n	8001bd0 <__ieee754_powf+0xa0>
 8001bbc:	2c00      	cmp	r4, #0
 8001bbe:	f280 82e8 	bge.w	8002192 <__ieee754_powf+0x662>
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4608      	mov	r0, r1
 8001bc6:	b007      	add	sp, #28
 8001bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bcc:	2502      	movs	r5, #2
 8001bce:	e7ed      	b.n	8001bac <__ieee754_powf+0x7c>
 8001bd0:	2c00      	cmp	r4, #0
 8001bd2:	daf6      	bge.n	8001bc2 <__ieee754_powf+0x92>
 8001bd4:	9b01      	ldr	r3, [sp, #4]
 8001bd6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8001bda:	e7f3      	b.n	8001bc4 <__ieee754_powf+0x94>
 8001bdc:	2500      	movs	r5, #0
 8001bde:	e7d9      	b.n	8001b94 <__ieee754_powf+0x64>
 8001be0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8001be4:	d105      	bne.n	8001bf2 <__ieee754_powf+0xc2>
 8001be6:	4649      	mov	r1, r9
 8001be8:	4608      	mov	r0, r1
 8001bea:	f7fe fde1 	bl	80007b0 <__aeabi_fmul>
 8001bee:	4601      	mov	r1, r0
 8001bf0:	e7e8      	b.n	8001bc4 <__ieee754_powf+0x94>
 8001bf2:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8001bf6:	4648      	mov	r0, r9
 8001bf8:	d107      	bne.n	8001c0a <__ieee754_powf+0xda>
 8001bfa:	f1b8 0f00 	cmp.w	r8, #0
 8001bfe:	db04      	blt.n	8001c0a <__ieee754_powf+0xda>
 8001c00:	b007      	add	sp, #28
 8001c02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c06:	f000 badf 	b.w	80021c8 <__ieee754_sqrtf>
 8001c0a:	f000 fb32 	bl	8002272 <fabsf>
 8001c0e:	4601      	mov	r1, r0
 8001c10:	b126      	cbz	r6, 8001c1c <__ieee754_powf+0xec>
 8001c12:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8001c16:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8001c1a:	d118      	bne.n	8001c4e <__ieee754_powf+0x11e>
 8001c1c:	2c00      	cmp	r4, #0
 8001c1e:	da04      	bge.n	8001c2a <__ieee754_powf+0xfa>
 8001c20:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001c24:	f7fe fe78 	bl	8000918 <__aeabi_fdiv>
 8001c28:	4601      	mov	r1, r0
 8001c2a:	f1b8 0f00 	cmp.w	r8, #0
 8001c2e:	dac9      	bge.n	8001bc4 <__ieee754_powf+0x94>
 8001c30:	f1a6 507e 	sub.w	r0, r6, #1065353216	; 0x3f800000
 8001c34:	ea50 0305 	orrs.w	r3, r0, r5
 8001c38:	d104      	bne.n	8001c44 <__ieee754_powf+0x114>
 8001c3a:	4608      	mov	r0, r1
 8001c3c:	f7fe fcae 	bl	800059c <__aeabi_fsub>
 8001c40:	4601      	mov	r1, r0
 8001c42:	e7af      	b.n	8001ba4 <__ieee754_powf+0x74>
 8001c44:	2d01      	cmp	r5, #1
 8001c46:	d1bd      	bne.n	8001bc4 <__ieee754_powf+0x94>
 8001c48:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8001c4c:	e7ba      	b.n	8001bc4 <__ieee754_powf+0x94>
 8001c4e:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8001c52:	f108 33ff 	add.w	r3, r8, #4294967295
 8001c56:	9303      	str	r3, [sp, #12]
 8001c58:	432b      	orrs	r3, r5
 8001c5a:	d101      	bne.n	8001c60 <__ieee754_powf+0x130>
 8001c5c:	4649      	mov	r1, r9
 8001c5e:	e7ec      	b.n	8001c3a <__ieee754_powf+0x10a>
 8001c60:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8001c64:	f340 8098 	ble.w	8001d98 <__ieee754_powf+0x268>
 8001c68:	4b43      	ldr	r3, [pc, #268]	; (8001d78 <__ieee754_powf+0x248>)
 8001c6a:	429e      	cmp	r6, r3
 8001c6c:	dc03      	bgt.n	8001c76 <__ieee754_powf+0x146>
 8001c6e:	2c00      	cmp	r4, #0
 8001c70:	daa7      	bge.n	8001bc2 <__ieee754_powf+0x92>
 8001c72:	4942      	ldr	r1, [pc, #264]	; (8001d7c <__ieee754_powf+0x24c>)
 8001c74:	e7b8      	b.n	8001be8 <__ieee754_powf+0xb8>
 8001c76:	4b42      	ldr	r3, [pc, #264]	; (8001d80 <__ieee754_powf+0x250>)
 8001c78:	429e      	cmp	r6, r3
 8001c7a:	dd02      	ble.n	8001c82 <__ieee754_powf+0x152>
 8001c7c:	2c00      	cmp	r4, #0
 8001c7e:	dcf8      	bgt.n	8001c72 <__ieee754_powf+0x142>
 8001c80:	e79f      	b.n	8001bc2 <__ieee754_powf+0x92>
 8001c82:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c86:	f7fe fc89 	bl	800059c <__aeabi_fsub>
 8001c8a:	493e      	ldr	r1, [pc, #248]	; (8001d84 <__ieee754_powf+0x254>)
 8001c8c:	4606      	mov	r6, r0
 8001c8e:	f7fe fd8f 	bl	80007b0 <__aeabi_fmul>
 8001c92:	493d      	ldr	r1, [pc, #244]	; (8001d88 <__ieee754_powf+0x258>)
 8001c94:	4607      	mov	r7, r0
 8001c96:	4630      	mov	r0, r6
 8001c98:	f7fe fd8a 	bl	80007b0 <__aeabi_fmul>
 8001c9c:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8001ca0:	4680      	mov	r8, r0
 8001ca2:	4630      	mov	r0, r6
 8001ca4:	f7fe fd84 	bl	80007b0 <__aeabi_fmul>
 8001ca8:	4601      	mov	r1, r0
 8001caa:	4838      	ldr	r0, [pc, #224]	; (8001d8c <__ieee754_powf+0x25c>)
 8001cac:	f7fe fc76 	bl	800059c <__aeabi_fsub>
 8001cb0:	4631      	mov	r1, r6
 8001cb2:	f7fe fd7d 	bl	80007b0 <__aeabi_fmul>
 8001cb6:	4601      	mov	r1, r0
 8001cb8:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001cbc:	f7fe fc6e 	bl	800059c <__aeabi_fsub>
 8001cc0:	4631      	mov	r1, r6
 8001cc2:	4681      	mov	r9, r0
 8001cc4:	4630      	mov	r0, r6
 8001cc6:	f7fe fd73 	bl	80007b0 <__aeabi_fmul>
 8001cca:	4601      	mov	r1, r0
 8001ccc:	4648      	mov	r0, r9
 8001cce:	f7fe fd6f 	bl	80007b0 <__aeabi_fmul>
 8001cd2:	492f      	ldr	r1, [pc, #188]	; (8001d90 <__ieee754_powf+0x260>)
 8001cd4:	f7fe fd6c 	bl	80007b0 <__aeabi_fmul>
 8001cd8:	4601      	mov	r1, r0
 8001cda:	4640      	mov	r0, r8
 8001cdc:	f7fe fc5e 	bl	800059c <__aeabi_fsub>
 8001ce0:	4601      	mov	r1, r0
 8001ce2:	4606      	mov	r6, r0
 8001ce4:	4638      	mov	r0, r7
 8001ce6:	f7fe fc5b 	bl	80005a0 <__addsf3>
 8001cea:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 8001cee:	f02a 0a0f 	bic.w	sl, sl, #15
 8001cf2:	4639      	mov	r1, r7
 8001cf4:	4650      	mov	r0, sl
 8001cf6:	f7fe fc51 	bl	800059c <__aeabi_fsub>
 8001cfa:	4601      	mov	r1, r0
 8001cfc:	4630      	mov	r0, r6
 8001cfe:	f7fe fc4d 	bl	800059c <__aeabi_fsub>
 8001d02:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8001d06:	9b03      	ldr	r3, [sp, #12]
 8001d08:	3d01      	subs	r5, #1
 8001d0a:	f024 040f 	bic.w	r4, r4, #15
 8001d0e:	432b      	orrs	r3, r5
 8001d10:	4606      	mov	r6, r0
 8001d12:	4621      	mov	r1, r4
 8001d14:	9801      	ldr	r0, [sp, #4]
 8001d16:	bf0c      	ite	eq
 8001d18:	4d1e      	ldreq	r5, [pc, #120]	; (8001d94 <__ieee754_powf+0x264>)
 8001d1a:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 8001d1e:	f7fe fc3d 	bl	800059c <__aeabi_fsub>
 8001d22:	4651      	mov	r1, sl
 8001d24:	f7fe fd44 	bl	80007b0 <__aeabi_fmul>
 8001d28:	9901      	ldr	r1, [sp, #4]
 8001d2a:	4607      	mov	r7, r0
 8001d2c:	4630      	mov	r0, r6
 8001d2e:	f7fe fd3f 	bl	80007b0 <__aeabi_fmul>
 8001d32:	4601      	mov	r1, r0
 8001d34:	4638      	mov	r0, r7
 8001d36:	f7fe fc33 	bl	80005a0 <__addsf3>
 8001d3a:	4621      	mov	r1, r4
 8001d3c:	4606      	mov	r6, r0
 8001d3e:	4650      	mov	r0, sl
 8001d40:	f7fe fd36 	bl	80007b0 <__aeabi_fmul>
 8001d44:	4601      	mov	r1, r0
 8001d46:	4607      	mov	r7, r0
 8001d48:	4681      	mov	r9, r0
 8001d4a:	4630      	mov	r0, r6
 8001d4c:	f7fe fc28 	bl	80005a0 <__addsf3>
 8001d50:	2800      	cmp	r0, #0
 8001d52:	4682      	mov	sl, r0
 8001d54:	4680      	mov	r8, r0
 8001d56:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8001d5a:	f340 81fb 	ble.w	8002154 <__ieee754_powf+0x624>
 8001d5e:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 8001d62:	f340 8149 	ble.w	8001ff8 <__ieee754_powf+0x4c8>
 8001d66:	4905      	ldr	r1, [pc, #20]	; (8001d7c <__ieee754_powf+0x24c>)
 8001d68:	4628      	mov	r0, r5
 8001d6a:	f7fe fd21 	bl	80007b0 <__aeabi_fmul>
 8001d6e:	4903      	ldr	r1, [pc, #12]	; (8001d7c <__ieee754_powf+0x24c>)
 8001d70:	e73b      	b.n	8001bea <__ieee754_powf+0xba>
 8001d72:	bf00      	nop
 8001d74:	08002460 	.word	0x08002460
 8001d78:	3f7ffff7 	.word	0x3f7ffff7
 8001d7c:	7149f2ca 	.word	0x7149f2ca
 8001d80:	3f800007 	.word	0x3f800007
 8001d84:	3fb8aa00 	.word	0x3fb8aa00
 8001d88:	36eca570 	.word	0x36eca570
 8001d8c:	3eaaaaab 	.word	0x3eaaaaab
 8001d90:	3fb8aa3b 	.word	0x3fb8aa3b
 8001d94:	bf800000 	.word	0xbf800000
 8001d98:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
 8001d9c:	f280 810a 	bge.w	8001fb4 <__ieee754_powf+0x484>
 8001da0:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 8001da4:	f7fe fd04 	bl	80007b0 <__aeabi_fmul>
 8001da8:	f06f 0217 	mvn.w	r2, #23
 8001dac:	4606      	mov	r6, r0
 8001dae:	15f3      	asrs	r3, r6, #23
 8001db0:	3b7f      	subs	r3, #127	; 0x7f
 8001db2:	441a      	add	r2, r3
 8001db4:	4b81      	ldr	r3, [pc, #516]	; (8001fbc <__ieee754_powf+0x48c>)
 8001db6:	f3c6 0016 	ubfx	r0, r6, #0, #23
 8001dba:	4298      	cmp	r0, r3
 8001dbc:	f040 567e 	orr.w	r6, r0, #1065353216	; 0x3f800000
 8001dc0:	dd06      	ble.n	8001dd0 <__ieee754_powf+0x2a0>
 8001dc2:	4b7f      	ldr	r3, [pc, #508]	; (8001fc0 <__ieee754_powf+0x490>)
 8001dc4:	4298      	cmp	r0, r3
 8001dc6:	f340 80f7 	ble.w	8001fb8 <__ieee754_powf+0x488>
 8001dca:	3201      	adds	r2, #1
 8001dcc:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 8001dd0:	2700      	movs	r7, #0
 8001dd2:	4b7c      	ldr	r3, [pc, #496]	; (8001fc4 <__ieee754_powf+0x494>)
 8001dd4:	4630      	mov	r0, r6
 8001dd6:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 8001dda:	9205      	str	r2, [sp, #20]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	9302      	str	r3, [sp, #8]
 8001de0:	f7fe fbdc 	bl	800059c <__aeabi_fsub>
 8001de4:	4631      	mov	r1, r6
 8001de6:	4683      	mov	fp, r0
 8001de8:	9802      	ldr	r0, [sp, #8]
 8001dea:	f7fe fbd9 	bl	80005a0 <__addsf3>
 8001dee:	4601      	mov	r1, r0
 8001df0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001df4:	f7fe fd90 	bl	8000918 <__aeabi_fdiv>
 8001df8:	4601      	mov	r1, r0
 8001dfa:	9004      	str	r0, [sp, #16]
 8001dfc:	4658      	mov	r0, fp
 8001dfe:	f7fe fcd7 	bl	80007b0 <__aeabi_fmul>
 8001e02:	46b2      	mov	sl, r6
 8001e04:	1076      	asrs	r6, r6, #1
 8001e06:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8001e0a:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 8001e0e:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 8001e12:	f028 080f 	bic.w	r8, r8, #15
 8001e16:	eb06 5647 	add.w	r6, r6, r7, lsl #21
 8001e1a:	4681      	mov	r9, r0
 8001e1c:	4631      	mov	r1, r6
 8001e1e:	4640      	mov	r0, r8
 8001e20:	f7fe fcc6 	bl	80007b0 <__aeabi_fmul>
 8001e24:	4601      	mov	r1, r0
 8001e26:	4658      	mov	r0, fp
 8001e28:	f7fe fbb8 	bl	800059c <__aeabi_fsub>
 8001e2c:	9902      	ldr	r1, [sp, #8]
 8001e2e:	4683      	mov	fp, r0
 8001e30:	4630      	mov	r0, r6
 8001e32:	f7fe fbb3 	bl	800059c <__aeabi_fsub>
 8001e36:	4601      	mov	r1, r0
 8001e38:	4650      	mov	r0, sl
 8001e3a:	f7fe fbaf 	bl	800059c <__aeabi_fsub>
 8001e3e:	4641      	mov	r1, r8
 8001e40:	f7fe fcb6 	bl	80007b0 <__aeabi_fmul>
 8001e44:	4601      	mov	r1, r0
 8001e46:	4658      	mov	r0, fp
 8001e48:	f7fe fba8 	bl	800059c <__aeabi_fsub>
 8001e4c:	9b04      	ldr	r3, [sp, #16]
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f7fe fcae 	bl	80007b0 <__aeabi_fmul>
 8001e54:	4649      	mov	r1, r9
 8001e56:	4683      	mov	fp, r0
 8001e58:	4648      	mov	r0, r9
 8001e5a:	f7fe fca9 	bl	80007b0 <__aeabi_fmul>
 8001e5e:	4606      	mov	r6, r0
 8001e60:	4959      	ldr	r1, [pc, #356]	; (8001fc8 <__ieee754_powf+0x498>)
 8001e62:	f7fe fca5 	bl	80007b0 <__aeabi_fmul>
 8001e66:	4959      	ldr	r1, [pc, #356]	; (8001fcc <__ieee754_powf+0x49c>)
 8001e68:	f7fe fb9a 	bl	80005a0 <__addsf3>
 8001e6c:	4631      	mov	r1, r6
 8001e6e:	f7fe fc9f 	bl	80007b0 <__aeabi_fmul>
 8001e72:	4957      	ldr	r1, [pc, #348]	; (8001fd0 <__ieee754_powf+0x4a0>)
 8001e74:	f7fe fb94 	bl	80005a0 <__addsf3>
 8001e78:	4631      	mov	r1, r6
 8001e7a:	f7fe fc99 	bl	80007b0 <__aeabi_fmul>
 8001e7e:	4955      	ldr	r1, [pc, #340]	; (8001fd4 <__ieee754_powf+0x4a4>)
 8001e80:	f7fe fb8e 	bl	80005a0 <__addsf3>
 8001e84:	4631      	mov	r1, r6
 8001e86:	f7fe fc93 	bl	80007b0 <__aeabi_fmul>
 8001e8a:	4953      	ldr	r1, [pc, #332]	; (8001fd8 <__ieee754_powf+0x4a8>)
 8001e8c:	f7fe fb88 	bl	80005a0 <__addsf3>
 8001e90:	4631      	mov	r1, r6
 8001e92:	f7fe fc8d 	bl	80007b0 <__aeabi_fmul>
 8001e96:	4951      	ldr	r1, [pc, #324]	; (8001fdc <__ieee754_powf+0x4ac>)
 8001e98:	f7fe fb82 	bl	80005a0 <__addsf3>
 8001e9c:	4631      	mov	r1, r6
 8001e9e:	4682      	mov	sl, r0
 8001ea0:	4630      	mov	r0, r6
 8001ea2:	f7fe fc85 	bl	80007b0 <__aeabi_fmul>
 8001ea6:	4601      	mov	r1, r0
 8001ea8:	4650      	mov	r0, sl
 8001eaa:	f7fe fc81 	bl	80007b0 <__aeabi_fmul>
 8001eae:	4606      	mov	r6, r0
 8001eb0:	4649      	mov	r1, r9
 8001eb2:	4640      	mov	r0, r8
 8001eb4:	f7fe fb74 	bl	80005a0 <__addsf3>
 8001eb8:	4659      	mov	r1, fp
 8001eba:	f7fe fc79 	bl	80007b0 <__aeabi_fmul>
 8001ebe:	4631      	mov	r1, r6
 8001ec0:	f7fe fb6e 	bl	80005a0 <__addsf3>
 8001ec4:	4641      	mov	r1, r8
 8001ec6:	4682      	mov	sl, r0
 8001ec8:	4640      	mov	r0, r8
 8001eca:	f7fe fc71 	bl	80007b0 <__aeabi_fmul>
 8001ece:	4944      	ldr	r1, [pc, #272]	; (8001fe0 <__ieee754_powf+0x4b0>)
 8001ed0:	9002      	str	r0, [sp, #8]
 8001ed2:	f7fe fb65 	bl	80005a0 <__addsf3>
 8001ed6:	4651      	mov	r1, sl
 8001ed8:	f7fe fb62 	bl	80005a0 <__addsf3>
 8001edc:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 8001ee0:	f026 060f 	bic.w	r6, r6, #15
 8001ee4:	4631      	mov	r1, r6
 8001ee6:	4640      	mov	r0, r8
 8001ee8:	f7fe fc62 	bl	80007b0 <__aeabi_fmul>
 8001eec:	493c      	ldr	r1, [pc, #240]	; (8001fe0 <__ieee754_powf+0x4b0>)
 8001eee:	4680      	mov	r8, r0
 8001ef0:	4630      	mov	r0, r6
 8001ef2:	f7fe fb53 	bl	800059c <__aeabi_fsub>
 8001ef6:	9b02      	ldr	r3, [sp, #8]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f7fe fb4f 	bl	800059c <__aeabi_fsub>
 8001efe:	4601      	mov	r1, r0
 8001f00:	4650      	mov	r0, sl
 8001f02:	f7fe fb4b 	bl	800059c <__aeabi_fsub>
 8001f06:	4649      	mov	r1, r9
 8001f08:	f7fe fc52 	bl	80007b0 <__aeabi_fmul>
 8001f0c:	4659      	mov	r1, fp
 8001f0e:	4681      	mov	r9, r0
 8001f10:	4630      	mov	r0, r6
 8001f12:	f7fe fc4d 	bl	80007b0 <__aeabi_fmul>
 8001f16:	4601      	mov	r1, r0
 8001f18:	4648      	mov	r0, r9
 8001f1a:	f7fe fb41 	bl	80005a0 <__addsf3>
 8001f1e:	4682      	mov	sl, r0
 8001f20:	4601      	mov	r1, r0
 8001f22:	4640      	mov	r0, r8
 8001f24:	f7fe fb3c 	bl	80005a0 <__addsf3>
 8001f28:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8001f2c:	f029 090f 	bic.w	r9, r9, #15
 8001f30:	492c      	ldr	r1, [pc, #176]	; (8001fe4 <__ieee754_powf+0x4b4>)
 8001f32:	4648      	mov	r0, r9
 8001f34:	f7fe fc3c 	bl	80007b0 <__aeabi_fmul>
 8001f38:	4641      	mov	r1, r8
 8001f3a:	4606      	mov	r6, r0
 8001f3c:	4648      	mov	r0, r9
 8001f3e:	f7fe fb2d 	bl	800059c <__aeabi_fsub>
 8001f42:	4601      	mov	r1, r0
 8001f44:	4650      	mov	r0, sl
 8001f46:	f7fe fb29 	bl	800059c <__aeabi_fsub>
 8001f4a:	4927      	ldr	r1, [pc, #156]	; (8001fe8 <__ieee754_powf+0x4b8>)
 8001f4c:	f7fe fc30 	bl	80007b0 <__aeabi_fmul>
 8001f50:	4926      	ldr	r1, [pc, #152]	; (8001fec <__ieee754_powf+0x4bc>)
 8001f52:	4680      	mov	r8, r0
 8001f54:	4648      	mov	r0, r9
 8001f56:	f7fe fc2b 	bl	80007b0 <__aeabi_fmul>
 8001f5a:	4601      	mov	r1, r0
 8001f5c:	4640      	mov	r0, r8
 8001f5e:	f7fe fb1f 	bl	80005a0 <__addsf3>
 8001f62:	4b23      	ldr	r3, [pc, #140]	; (8001ff0 <__ieee754_powf+0x4c0>)
 8001f64:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8001f68:	f7fe fb1a 	bl	80005a0 <__addsf3>
 8001f6c:	9a05      	ldr	r2, [sp, #20]
 8001f6e:	4680      	mov	r8, r0
 8001f70:	4610      	mov	r0, r2
 8001f72:	f7fe fbc9 	bl	8000708 <__aeabi_i2f>
 8001f76:	4681      	mov	r9, r0
 8001f78:	4b1e      	ldr	r3, [pc, #120]	; (8001ff4 <__ieee754_powf+0x4c4>)
 8001f7a:	4641      	mov	r1, r8
 8001f7c:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8001f80:	4630      	mov	r0, r6
 8001f82:	f7fe fb0d 	bl	80005a0 <__addsf3>
 8001f86:	4639      	mov	r1, r7
 8001f88:	f7fe fb0a 	bl	80005a0 <__addsf3>
 8001f8c:	4649      	mov	r1, r9
 8001f8e:	f7fe fb07 	bl	80005a0 <__addsf3>
 8001f92:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 8001f96:	f02a 0a0f 	bic.w	sl, sl, #15
 8001f9a:	4649      	mov	r1, r9
 8001f9c:	4650      	mov	r0, sl
 8001f9e:	f7fe fafd 	bl	800059c <__aeabi_fsub>
 8001fa2:	4639      	mov	r1, r7
 8001fa4:	f7fe fafa 	bl	800059c <__aeabi_fsub>
 8001fa8:	4631      	mov	r1, r6
 8001faa:	f7fe faf7 	bl	800059c <__aeabi_fsub>
 8001fae:	4601      	mov	r1, r0
 8001fb0:	4640      	mov	r0, r8
 8001fb2:	e6a4      	b.n	8001cfe <__ieee754_powf+0x1ce>
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	e6fa      	b.n	8001dae <__ieee754_powf+0x27e>
 8001fb8:	2701      	movs	r7, #1
 8001fba:	e70a      	b.n	8001dd2 <__ieee754_powf+0x2a2>
 8001fbc:	001cc471 	.word	0x001cc471
 8001fc0:	005db3d6 	.word	0x005db3d6
 8001fc4:	08002464 	.word	0x08002464
 8001fc8:	3e53f142 	.word	0x3e53f142
 8001fcc:	3e6c3255 	.word	0x3e6c3255
 8001fd0:	3e8ba305 	.word	0x3e8ba305
 8001fd4:	3eaaaaab 	.word	0x3eaaaaab
 8001fd8:	3edb6db7 	.word	0x3edb6db7
 8001fdc:	3f19999a 	.word	0x3f19999a
 8001fe0:	40400000 	.word	0x40400000
 8001fe4:	3f763800 	.word	0x3f763800
 8001fe8:	3f76384f 	.word	0x3f76384f
 8001fec:	369dc3a0 	.word	0x369dc3a0
 8001ff0:	08002474 	.word	0x08002474
 8001ff4:	0800246c 	.word	0x0800246c
 8001ff8:	f040 80c0 	bne.w	800217c <__ieee754_powf+0x64c>
 8001ffc:	4966      	ldr	r1, [pc, #408]	; (8002198 <__ieee754_powf+0x668>)
 8001ffe:	4630      	mov	r0, r6
 8002000:	f7fe face 	bl	80005a0 <__addsf3>
 8002004:	4639      	mov	r1, r7
 8002006:	4681      	mov	r9, r0
 8002008:	4650      	mov	r0, sl
 800200a:	f7fe fac7 	bl	800059c <__aeabi_fsub>
 800200e:	4601      	mov	r1, r0
 8002010:	4648      	mov	r0, r9
 8002012:	f7fe fd89 	bl	8000b28 <__aeabi_fcmpgt>
 8002016:	2800      	cmp	r0, #0
 8002018:	f47f aea5 	bne.w	8001d66 <__ieee754_powf+0x236>
 800201c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002020:	15e4      	asrs	r4, r4, #23
 8002022:	3c7e      	subs	r4, #126	; 0x7e
 8002024:	4123      	asrs	r3, r4
 8002026:	4443      	add	r3, r8
 8002028:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800202c:	495b      	ldr	r1, [pc, #364]	; (800219c <__ieee754_powf+0x66c>)
 800202e:	3a7f      	subs	r2, #127	; 0x7f
 8002030:	f3c3 0416 	ubfx	r4, r3, #0, #23
 8002034:	4111      	asrs	r1, r2
 8002036:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 800203a:	f1c2 0217 	rsb	r2, r2, #23
 800203e:	4114      	asrs	r4, r2
 8002040:	f1b8 0f00 	cmp.w	r8, #0
 8002044:	ea23 0101 	bic.w	r1, r3, r1
 8002048:	4638      	mov	r0, r7
 800204a:	bfb8      	it	lt
 800204c:	4264      	neglt	r4, r4
 800204e:	f7fe faa5 	bl	800059c <__aeabi_fsub>
 8002052:	4681      	mov	r9, r0
 8002054:	4631      	mov	r1, r6
 8002056:	4648      	mov	r0, r9
 8002058:	f7fe faa2 	bl	80005a0 <__addsf3>
 800205c:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 8002060:	f027 070f 	bic.w	r7, r7, #15
 8002064:	494e      	ldr	r1, [pc, #312]	; (80021a0 <__ieee754_powf+0x670>)
 8002066:	4638      	mov	r0, r7
 8002068:	f7fe fba2 	bl	80007b0 <__aeabi_fmul>
 800206c:	4649      	mov	r1, r9
 800206e:	4680      	mov	r8, r0
 8002070:	4638      	mov	r0, r7
 8002072:	f7fe fa93 	bl	800059c <__aeabi_fsub>
 8002076:	4601      	mov	r1, r0
 8002078:	4630      	mov	r0, r6
 800207a:	f7fe fa8f 	bl	800059c <__aeabi_fsub>
 800207e:	4949      	ldr	r1, [pc, #292]	; (80021a4 <__ieee754_powf+0x674>)
 8002080:	f7fe fb96 	bl	80007b0 <__aeabi_fmul>
 8002084:	4948      	ldr	r1, [pc, #288]	; (80021a8 <__ieee754_powf+0x678>)
 8002086:	4606      	mov	r6, r0
 8002088:	4638      	mov	r0, r7
 800208a:	f7fe fb91 	bl	80007b0 <__aeabi_fmul>
 800208e:	4601      	mov	r1, r0
 8002090:	4630      	mov	r0, r6
 8002092:	f7fe fa85 	bl	80005a0 <__addsf3>
 8002096:	4607      	mov	r7, r0
 8002098:	4601      	mov	r1, r0
 800209a:	4640      	mov	r0, r8
 800209c:	f7fe fa80 	bl	80005a0 <__addsf3>
 80020a0:	4641      	mov	r1, r8
 80020a2:	4606      	mov	r6, r0
 80020a4:	f7fe fa7a 	bl	800059c <__aeabi_fsub>
 80020a8:	4601      	mov	r1, r0
 80020aa:	4638      	mov	r0, r7
 80020ac:	f7fe fa76 	bl	800059c <__aeabi_fsub>
 80020b0:	4631      	mov	r1, r6
 80020b2:	4680      	mov	r8, r0
 80020b4:	4630      	mov	r0, r6
 80020b6:	f7fe fb7b 	bl	80007b0 <__aeabi_fmul>
 80020ba:	4607      	mov	r7, r0
 80020bc:	493b      	ldr	r1, [pc, #236]	; (80021ac <__ieee754_powf+0x67c>)
 80020be:	f7fe fb77 	bl	80007b0 <__aeabi_fmul>
 80020c2:	493b      	ldr	r1, [pc, #236]	; (80021b0 <__ieee754_powf+0x680>)
 80020c4:	f7fe fa6a 	bl	800059c <__aeabi_fsub>
 80020c8:	4639      	mov	r1, r7
 80020ca:	f7fe fb71 	bl	80007b0 <__aeabi_fmul>
 80020ce:	4939      	ldr	r1, [pc, #228]	; (80021b4 <__ieee754_powf+0x684>)
 80020d0:	f7fe fa66 	bl	80005a0 <__addsf3>
 80020d4:	4639      	mov	r1, r7
 80020d6:	f7fe fb6b 	bl	80007b0 <__aeabi_fmul>
 80020da:	4937      	ldr	r1, [pc, #220]	; (80021b8 <__ieee754_powf+0x688>)
 80020dc:	f7fe fa5e 	bl	800059c <__aeabi_fsub>
 80020e0:	4639      	mov	r1, r7
 80020e2:	f7fe fb65 	bl	80007b0 <__aeabi_fmul>
 80020e6:	4935      	ldr	r1, [pc, #212]	; (80021bc <__ieee754_powf+0x68c>)
 80020e8:	f7fe fa5a 	bl	80005a0 <__addsf3>
 80020ec:	4639      	mov	r1, r7
 80020ee:	f7fe fb5f 	bl	80007b0 <__aeabi_fmul>
 80020f2:	4601      	mov	r1, r0
 80020f4:	4630      	mov	r0, r6
 80020f6:	f7fe fa51 	bl	800059c <__aeabi_fsub>
 80020fa:	4607      	mov	r7, r0
 80020fc:	4601      	mov	r1, r0
 80020fe:	4630      	mov	r0, r6
 8002100:	f7fe fb56 	bl	80007b0 <__aeabi_fmul>
 8002104:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002108:	4681      	mov	r9, r0
 800210a:	4638      	mov	r0, r7
 800210c:	f7fe fa46 	bl	800059c <__aeabi_fsub>
 8002110:	4601      	mov	r1, r0
 8002112:	4648      	mov	r0, r9
 8002114:	f7fe fc00 	bl	8000918 <__aeabi_fdiv>
 8002118:	4641      	mov	r1, r8
 800211a:	4607      	mov	r7, r0
 800211c:	4630      	mov	r0, r6
 800211e:	f7fe fb47 	bl	80007b0 <__aeabi_fmul>
 8002122:	4641      	mov	r1, r8
 8002124:	f7fe fa3c 	bl	80005a0 <__addsf3>
 8002128:	4601      	mov	r1, r0
 800212a:	4638      	mov	r0, r7
 800212c:	f7fe fa36 	bl	800059c <__aeabi_fsub>
 8002130:	4631      	mov	r1, r6
 8002132:	f7fe fa33 	bl	800059c <__aeabi_fsub>
 8002136:	4601      	mov	r1, r0
 8002138:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800213c:	f7fe fa2e 	bl	800059c <__aeabi_fsub>
 8002140:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8002144:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002148:	da1e      	bge.n	8002188 <__ieee754_powf+0x658>
 800214a:	4621      	mov	r1, r4
 800214c:	f000 f8f0 	bl	8002330 <scalbnf>
 8002150:	4629      	mov	r1, r5
 8002152:	e54a      	b.n	8001bea <__ieee754_powf+0xba>
 8002154:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <__ieee754_powf+0x690>)
 8002156:	429c      	cmp	r4, r3
 8002158:	dd05      	ble.n	8002166 <__ieee754_powf+0x636>
 800215a:	491a      	ldr	r1, [pc, #104]	; (80021c4 <__ieee754_powf+0x694>)
 800215c:	4628      	mov	r0, r5
 800215e:	f7fe fb27 	bl	80007b0 <__aeabi_fmul>
 8002162:	4918      	ldr	r1, [pc, #96]	; (80021c4 <__ieee754_powf+0x694>)
 8002164:	e541      	b.n	8001bea <__ieee754_powf+0xba>
 8002166:	d109      	bne.n	800217c <__ieee754_powf+0x64c>
 8002168:	4639      	mov	r1, r7
 800216a:	f7fe fa17 	bl	800059c <__aeabi_fsub>
 800216e:	4631      	mov	r1, r6
 8002170:	f7fe fcd0 	bl	8000b14 <__aeabi_fcmpge>
 8002174:	2800      	cmp	r0, #0
 8002176:	f43f af51 	beq.w	800201c <__ieee754_powf+0x4ec>
 800217a:	e7ee      	b.n	800215a <__ieee754_powf+0x62a>
 800217c:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8002180:	f73f af4c 	bgt.w	800201c <__ieee754_powf+0x4ec>
 8002184:	2400      	movs	r4, #0
 8002186:	e765      	b.n	8002054 <__ieee754_powf+0x524>
 8002188:	4618      	mov	r0, r3
 800218a:	e7e1      	b.n	8002150 <__ieee754_powf+0x620>
 800218c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002190:	e518      	b.n	8001bc4 <__ieee754_powf+0x94>
 8002192:	9901      	ldr	r1, [sp, #4]
 8002194:	e516      	b.n	8001bc4 <__ieee754_powf+0x94>
 8002196:	bf00      	nop
 8002198:	3338aa3c 	.word	0x3338aa3c
 800219c:	007fffff 	.word	0x007fffff
 80021a0:	3f317200 	.word	0x3f317200
 80021a4:	3f317218 	.word	0x3f317218
 80021a8:	35bfbe8c 	.word	0x35bfbe8c
 80021ac:	3331bb4c 	.word	0x3331bb4c
 80021b0:	35ddea0e 	.word	0x35ddea0e
 80021b4:	388ab355 	.word	0x388ab355
 80021b8:	3b360b61 	.word	0x3b360b61
 80021bc:	3e2aaaab 	.word	0x3e2aaaab
 80021c0:	43160000 	.word	0x43160000
 80021c4:	0da24260 	.word	0x0da24260

080021c8 <__ieee754_sqrtf>:
 80021c8:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80021cc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80021d0:	b570      	push	{r4, r5, r6, lr}
 80021d2:	4603      	mov	r3, r0
 80021d4:	4604      	mov	r4, r0
 80021d6:	d309      	bcc.n	80021ec <__ieee754_sqrtf+0x24>
 80021d8:	4601      	mov	r1, r0
 80021da:	f7fe fae9 	bl	80007b0 <__aeabi_fmul>
 80021de:	4601      	mov	r1, r0
 80021e0:	4620      	mov	r0, r4
 80021e2:	f7fe f9dd 	bl	80005a0 <__addsf3>
 80021e6:	4604      	mov	r4, r0
 80021e8:	4620      	mov	r0, r4
 80021ea:	bd70      	pop	{r4, r5, r6, pc}
 80021ec:	2a00      	cmp	r2, #0
 80021ee:	d0fb      	beq.n	80021e8 <__ieee754_sqrtf+0x20>
 80021f0:	2800      	cmp	r0, #0
 80021f2:	da06      	bge.n	8002202 <__ieee754_sqrtf+0x3a>
 80021f4:	4601      	mov	r1, r0
 80021f6:	f7fe f9d1 	bl	800059c <__aeabi_fsub>
 80021fa:	4601      	mov	r1, r0
 80021fc:	f7fe fb8c 	bl	8000918 <__aeabi_fdiv>
 8002200:	e7f1      	b.n	80021e6 <__ieee754_sqrtf+0x1e>
 8002202:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8002206:	ea4f 54e0 	mov.w	r4, r0, asr #23
 800220a:	d32e      	bcc.n	800226a <__ieee754_sqrtf+0xa2>
 800220c:	3c7f      	subs	r4, #127	; 0x7f
 800220e:	07e2      	lsls	r2, r4, #31
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	ea4f 0164 	mov.w	r1, r4, asr #1
 8002218:	4616      	mov	r6, r2
 800221a:	f04f 0419 	mov.w	r4, #25
 800221e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8002222:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8002226:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800222a:	bf48      	it	mi
 800222c:	005b      	lslmi	r3, r3, #1
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	1835      	adds	r5, r6, r0
 8002232:	429d      	cmp	r5, r3
 8002234:	bfde      	ittt	le
 8002236:	182e      	addle	r6, r5, r0
 8002238:	1b5b      	suble	r3, r3, r5
 800223a:	1812      	addle	r2, r2, r0
 800223c:	3c01      	subs	r4, #1
 800223e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002242:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8002246:	d1f3      	bne.n	8002230 <__ieee754_sqrtf+0x68>
 8002248:	b113      	cbz	r3, 8002250 <__ieee754_sqrtf+0x88>
 800224a:	3201      	adds	r2, #1
 800224c:	f022 0201 	bic.w	r2, r2, #1
 8002250:	1054      	asrs	r4, r2, #1
 8002252:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8002256:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 800225a:	e7c5      	b.n	80021e8 <__ieee754_sqrtf+0x20>
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	3201      	adds	r2, #1
 8002260:	0219      	lsls	r1, r3, #8
 8002262:	d5fb      	bpl.n	800225c <__ieee754_sqrtf+0x94>
 8002264:	3a01      	subs	r2, #1
 8002266:	1aa4      	subs	r4, r4, r2
 8002268:	e7d0      	b.n	800220c <__ieee754_sqrtf+0x44>
 800226a:	2200      	movs	r2, #0
 800226c:	e7f8      	b.n	8002260 <__ieee754_sqrtf+0x98>

0800226e <matherr>:
 800226e:	2000      	movs	r0, #0
 8002270:	4770      	bx	lr

08002272 <fabsf>:
 8002272:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002276:	4770      	bx	lr

08002278 <finitef>:
 8002278:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800227c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8002280:	bfac      	ite	ge
 8002282:	2000      	movge	r0, #0
 8002284:	2001      	movlt	r0, #1
 8002286:	4770      	bx	lr

08002288 <nanf>:
 8002288:	4800      	ldr	r0, [pc, #0]	; (800228c <nanf+0x4>)
 800228a:	4770      	bx	lr
 800228c:	7fc00000 	.word	0x7fc00000

08002290 <rintf>:
 8002290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002292:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8002296:	0dd5      	lsrs	r5, r2, #23
 8002298:	3d7f      	subs	r5, #127	; 0x7f
 800229a:	2d16      	cmp	r5, #22
 800229c:	4601      	mov	r1, r0
 800229e:	dc3b      	bgt.n	8002318 <rintf+0x88>
 80022a0:	b1e2      	cbz	r2, 80022dc <rintf+0x4c>
 80022a2:	2d00      	cmp	r5, #0
 80022a4:	4602      	mov	r2, r0
 80022a6:	ea4f 74d0 	mov.w	r4, r0, lsr #31
 80022aa:	da1a      	bge.n	80022e2 <rintf+0x52>
 80022ac:	4a1e      	ldr	r2, [pc, #120]	; (8002328 <rintf+0x98>)
 80022ae:	f3c0 0116 	ubfx	r1, r0, #0, #23
 80022b2:	4249      	negs	r1, r1
 80022b4:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 80022b8:	0d03      	lsrs	r3, r0, #20
 80022ba:	0a49      	lsrs	r1, r1, #9
 80022bc:	051b      	lsls	r3, r3, #20
 80022be:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80022c2:	4319      	orrs	r1, r3
 80022c4:	4628      	mov	r0, r5
 80022c6:	f7fe f96b 	bl	80005a0 <__addsf3>
 80022ca:	9001      	str	r0, [sp, #4]
 80022cc:	4629      	mov	r1, r5
 80022ce:	9801      	ldr	r0, [sp, #4]
 80022d0:	f7fe f964 	bl	800059c <__aeabi_fsub>
 80022d4:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 80022d8:	ea41 71c4 	orr.w	r1, r1, r4, lsl #31
 80022dc:	4608      	mov	r0, r1
 80022de:	b003      	add	sp, #12
 80022e0:	bd30      	pop	{r4, r5, pc}
 80022e2:	4b12      	ldr	r3, [pc, #72]	; (800232c <rintf+0x9c>)
 80022e4:	412b      	asrs	r3, r5
 80022e6:	4218      	tst	r0, r3
 80022e8:	d0f8      	beq.n	80022dc <rintf+0x4c>
 80022ea:	0859      	lsrs	r1, r3, #1
 80022ec:	4208      	tst	r0, r1
 80022ee:	d006      	beq.n	80022fe <rintf+0x6e>
 80022f0:	ea20 0201 	bic.w	r2, r0, r1
 80022f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80022f8:	fa41 f505 	asr.w	r5, r1, r5
 80022fc:	432a      	orrs	r2, r5
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <rintf+0x98>)
 8002300:	4611      	mov	r1, r2
 8002302:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8002306:	4620      	mov	r0, r4
 8002308:	f7fe f94a 	bl	80005a0 <__addsf3>
 800230c:	9001      	str	r0, [sp, #4]
 800230e:	9801      	ldr	r0, [sp, #4]
 8002310:	4621      	mov	r1, r4
 8002312:	f7fe f943 	bl	800059c <__aeabi_fsub>
 8002316:	e004      	b.n	8002322 <rintf+0x92>
 8002318:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800231c:	d3de      	bcc.n	80022dc <rintf+0x4c>
 800231e:	f7fe f93f 	bl	80005a0 <__addsf3>
 8002322:	4601      	mov	r1, r0
 8002324:	e7da      	b.n	80022dc <rintf+0x4c>
 8002326:	bf00      	nop
 8002328:	0800247c 	.word	0x0800247c
 800232c:	007fffff 	.word	0x007fffff

08002330 <scalbnf>:
 8002330:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 8002334:	b510      	push	{r4, lr}
 8002336:	4602      	mov	r2, r0
 8002338:	460c      	mov	r4, r1
 800233a:	4601      	mov	r1, r0
 800233c:	d027      	beq.n	800238e <scalbnf+0x5e>
 800233e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8002342:	d303      	bcc.n	800234c <scalbnf+0x1c>
 8002344:	f7fe f92c 	bl	80005a0 <__addsf3>
 8002348:	4602      	mov	r2, r0
 800234a:	e020      	b.n	800238e <scalbnf+0x5e>
 800234c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002350:	d215      	bcs.n	800237e <scalbnf+0x4e>
 8002352:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8002356:	f7fe fa2b 	bl	80007b0 <__aeabi_fmul>
 800235a:	4b18      	ldr	r3, [pc, #96]	; (80023bc <scalbnf+0x8c>)
 800235c:	4602      	mov	r2, r0
 800235e:	429c      	cmp	r4, r3
 8002360:	db22      	blt.n	80023a8 <scalbnf+0x78>
 8002362:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8002366:	3b19      	subs	r3, #25
 8002368:	4423      	add	r3, r4
 800236a:	2bfe      	cmp	r3, #254	; 0xfe
 800236c:	dd09      	ble.n	8002382 <scalbnf+0x52>
 800236e:	4611      	mov	r1, r2
 8002370:	4813      	ldr	r0, [pc, #76]	; (80023c0 <scalbnf+0x90>)
 8002372:	f000 f829 	bl	80023c8 <copysignf>
 8002376:	4912      	ldr	r1, [pc, #72]	; (80023c0 <scalbnf+0x90>)
 8002378:	f7fe fa1a 	bl	80007b0 <__aeabi_fmul>
 800237c:	e7e4      	b.n	8002348 <scalbnf+0x18>
 800237e:	0ddb      	lsrs	r3, r3, #23
 8002380:	e7f2      	b.n	8002368 <scalbnf+0x38>
 8002382:	2b00      	cmp	r3, #0
 8002384:	dd05      	ble.n	8002392 <scalbnf+0x62>
 8002386:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800238a:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 800238e:	4610      	mov	r0, r2
 8002390:	bd10      	pop	{r4, pc}
 8002392:	f113 0f16 	cmn.w	r3, #22
 8002396:	da09      	bge.n	80023ac <scalbnf+0x7c>
 8002398:	f24c 3350 	movw	r3, #50000	; 0xc350
 800239c:	429c      	cmp	r4, r3
 800239e:	4611      	mov	r1, r2
 80023a0:	dce6      	bgt.n	8002370 <scalbnf+0x40>
 80023a2:	4808      	ldr	r0, [pc, #32]	; (80023c4 <scalbnf+0x94>)
 80023a4:	f000 f810 	bl	80023c8 <copysignf>
 80023a8:	4906      	ldr	r1, [pc, #24]	; (80023c4 <scalbnf+0x94>)
 80023aa:	e7e5      	b.n	8002378 <scalbnf+0x48>
 80023ac:	3319      	adds	r3, #25
 80023ae:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 80023b2:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 80023b6:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 80023ba:	e7dd      	b.n	8002378 <scalbnf+0x48>
 80023bc:	ffff3cb0 	.word	0xffff3cb0
 80023c0:	7149f2ca 	.word	0x7149f2ca
 80023c4:	0da24260 	.word	0x0da24260

080023c8 <copysignf>:
 80023c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80023cc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80023d0:	4308      	orrs	r0, r1
 80023d2:	4770      	bx	lr

080023d4 <__errno>:
 80023d4:	4b01      	ldr	r3, [pc, #4]	; (80023dc <__errno+0x8>)
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	2000000c 	.word	0x2000000c

080023e0 <__libc_init_array>:
 80023e0:	b570      	push	{r4, r5, r6, lr}
 80023e2:	2500      	movs	r5, #0
 80023e4:	4e0c      	ldr	r6, [pc, #48]	; (8002418 <__libc_init_array+0x38>)
 80023e6:	4c0d      	ldr	r4, [pc, #52]	; (800241c <__libc_init_array+0x3c>)
 80023e8:	1ba4      	subs	r4, r4, r6
 80023ea:	10a4      	asrs	r4, r4, #2
 80023ec:	42a5      	cmp	r5, r4
 80023ee:	d109      	bne.n	8002404 <__libc_init_array+0x24>
 80023f0:	f000 f81a 	bl	8002428 <_init>
 80023f4:	2500      	movs	r5, #0
 80023f6:	4e0a      	ldr	r6, [pc, #40]	; (8002420 <__libc_init_array+0x40>)
 80023f8:	4c0a      	ldr	r4, [pc, #40]	; (8002424 <__libc_init_array+0x44>)
 80023fa:	1ba4      	subs	r4, r4, r6
 80023fc:	10a4      	asrs	r4, r4, #2
 80023fe:	42a5      	cmp	r5, r4
 8002400:	d105      	bne.n	800240e <__libc_init_array+0x2e>
 8002402:	bd70      	pop	{r4, r5, r6, pc}
 8002404:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002408:	4798      	blx	r3
 800240a:	3501      	adds	r5, #1
 800240c:	e7ee      	b.n	80023ec <__libc_init_array+0xc>
 800240e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002412:	4798      	blx	r3
 8002414:	3501      	adds	r5, #1
 8002416:	e7f2      	b.n	80023fe <__libc_init_array+0x1e>
 8002418:	08002484 	.word	0x08002484
 800241c:	08002484 	.word	0x08002484
 8002420:	08002484 	.word	0x08002484
 8002424:	08002488 	.word	0x08002488

08002428 <_init>:
 8002428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800242a:	bf00      	nop
 800242c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800242e:	bc08      	pop	{r3}
 8002430:	469e      	mov	lr, r3
 8002432:	4770      	bx	lr

08002434 <_fini>:
 8002434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002436:	bf00      	nop
 8002438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800243a:	bc08      	pop	{r3}
 800243c:	469e      	mov	lr, r3
 800243e:	4770      	bx	lr
